
Test_Swarm_001_G07RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e80  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006178  08006178  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006180  08006180  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08006188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200000c4  0800624c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800624c  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015054  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d5  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00037b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00038cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f5b  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ab8  00000000  00000000  00053ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7ea4  00000000  00000000  00068783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  00110678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000c4 	.word	0x200000c4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f24 	.word	0x08005f24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000c8 	.word	0x200000c8
 8000100:	08005f24 	.word	0x08005f24

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fed8 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f972 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fb34 	bl	8000cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 fb14 	bl	8000c7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000654:	f000 fac4 	bl	8000be0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f9c0 	bl	80009dc <MX_RTC_Init>
  MX_USART1_UART_Init();
 800065c:	f000 fa72 	bl	8000b44 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000660:	f000 fa32 	bl	8000ac8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //HAL_RTCEx_DeactivateWakeUpTimer ( &hrtc ) ;
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000664:	4b82      	ldr	r3, [pc, #520]	; (8000870 <main+0x230>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2202      	movs	r2, #2
 800066a:	4252      	negs	r2, r2
 800066c:	611a      	str	r2, [r3, #16]

  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 800066e:	4b81      	ldr	r3, [pc, #516]	; (8000874 <main+0x234>)
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff fd47 	bl	8000104 <strlen>
 8000676:	0003      	movs	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	497e      	ldr	r1, [pc, #504]	; (8000874 <main+0x234>)
 800067c:	487e      	ldr	r0, [pc, #504]	; (8000878 <main+0x238>)
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	f003 fb12 	bl	8003ca8 <HAL_UART_Transmit>
 8000684:	0003      	movs	r3, r0
 8000686:	001a      	movs	r2, r3
 8000688:	4b7c      	ldr	r3, [pc, #496]	; (800087c <main+0x23c>)
 800068a:	701a      	strb	r2, [r3, #0]
  HAL_Delay ( 15000 ) ; // Wait for Swarm boot
 800068c:	4b7c      	ldr	r3, [pc, #496]	; (8000880 <main+0x240>)
 800068e:	0018      	movs	r0, r3
 8000690:	f000 ff38 	bl	8001504 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000694:	23fa      	movs	r3, #250	; 0xfa
 8000696:	005a      	lsls	r2, r3, #1
 8000698:	497a      	ldr	r1, [pc, #488]	; (8000884 <main+0x244>)
 800069a:	4b7b      	ldr	r3, [pc, #492]	; (8000888 <main+0x248>)
 800069c:	0018      	movs	r0, r3
 800069e:	f004 fecd 	bl	800543c <HAL_UARTEx_ReceiveToIdle_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while ( 1 )
  {
	  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 80006a2:	497a      	ldr	r1, [pc, #488]	; (800088c <main+0x24c>)
 80006a4:	4b7a      	ldr	r3, [pc, #488]	; (8000890 <main+0x250>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fbad 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 1 )
 80006ae:	4b79      	ldr	r3, [pc, #484]	; (8000894 <main+0x254>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d105      	bne.n	80006c2 <main+0x82>
		  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 80006b6:	4978      	ldr	r1, [pc, #480]	; (8000898 <main+0x258>)
 80006b8:	4b78      	ldr	r3, [pc, #480]	; (800089c <main+0x25c>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fba3 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 2 )
 80006c2:	4b74      	ldr	r3, [pc, #464]	; (8000894 <main+0x254>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d105      	bne.n	80006d6 <main+0x96>
	  	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006ca:	4975      	ldr	r1, [pc, #468]	; (80008a0 <main+0x260>)
 80006cc:	4b75      	ldr	r3, [pc, #468]	; (80008a4 <main+0x264>)
 80006ce:	2203      	movs	r2, #3
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fb99 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 3 )
 80006d6:	4b6f      	ldr	r3, [pc, #444]	; (8000894 <main+0x254>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d105      	bne.n	80006ea <main+0xaa>
	  	send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006de:	4972      	ldr	r1, [pc, #456]	; (80008a8 <main+0x268>)
 80006e0:	4b72      	ldr	r3, [pc, #456]	; (80008ac <main+0x26c>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fb8f 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 4 )
 80006ea:	4b6a      	ldr	r3, [pc, #424]	; (8000894 <main+0x254>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d105      	bne.n	80006fe <main+0xbe>
	  	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006f2:	496f      	ldr	r1, [pc, #444]	; (80008b0 <main+0x270>)
 80006f4:	4b6f      	ldr	r3, [pc, #444]	; (80008b4 <main+0x274>)
 80006f6:	2205      	movs	r2, #5
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fb85 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 5 )
 80006fe:	4b65      	ldr	r3, [pc, #404]	; (8000894 <main+0x254>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	2b05      	cmp	r3, #5
 8000704:	d105      	bne.n	8000712 <main+0xd2>
	  	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 6 ) ;
 8000706:	496c      	ldr	r1, [pc, #432]	; (80008b8 <main+0x278>)
 8000708:	4b6c      	ldr	r3, [pc, #432]	; (80008bc <main+0x27c>)
 800070a:	2206      	movs	r2, #6
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fb7b 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 6 )
 8000712:	4b60      	ldr	r3, [pc, #384]	; (8000894 <main+0x254>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2b06      	cmp	r3, #6
 8000718:	d105      	bne.n	8000726 <main+0xe6>
		  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 7 ) ;
 800071a:	4969      	ldr	r1, [pc, #420]	; (80008c0 <main+0x280>)
 800071c:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <main+0x284>)
 800071e:	2207      	movs	r2, #7
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fb71 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 7 )
 8000726:	4b5b      	ldr	r3, [pc, #364]	; (8000894 <main+0x254>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	2b07      	cmp	r3, #7
 800072c:	d105      	bne.n	800073a <main+0xfa>
		  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 8 ) ;
 800072e:	4966      	ldr	r1, [pc, #408]	; (80008c8 <main+0x288>)
 8000730:	4b66      	ldr	r3, [pc, #408]	; (80008cc <main+0x28c>)
 8000732:	2208      	movs	r2, #8
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fb67 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 8 )
 800073a:	4b56      	ldr	r3, [pc, #344]	; (8000894 <main+0x254>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	2b08      	cmp	r3, #8
 8000740:	d105      	bne.n	800074e <main+0x10e>
		  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 9 ) ;
 8000742:	4963      	ldr	r1, [pc, #396]	; (80008d0 <main+0x290>)
 8000744:	4b63      	ldr	r3, [pc, #396]	; (80008d4 <main+0x294>)
 8000746:	2209      	movs	r2, #9
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fb5d 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 9 )
 800074e:	4b51      	ldr	r3, [pc, #324]	; (8000894 <main+0x254>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2b09      	cmp	r3, #9
 8000754:	d105      	bne.n	8000762 <main+0x122>
		  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 10 ) ;
 8000756:	4960      	ldr	r1, [pc, #384]	; (80008d8 <main+0x298>)
 8000758:	4b60      	ldr	r3, [pc, #384]	; (80008dc <main+0x29c>)
 800075a:	220a      	movs	r2, #10
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fb53 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 10 )
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <main+0x254>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	2b0a      	cmp	r3, #10
 8000768:	d105      	bne.n	8000776 <main+0x136>
	  	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 11 ) ;
 800076a:	495d      	ldr	r1, [pc, #372]	; (80008e0 <main+0x2a0>)
 800076c:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <main+0x2a4>)
 800076e:	220b      	movs	r2, #11
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fb49 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 11 )
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <main+0x254>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b0b      	cmp	r3, #11
 800077c:	d105      	bne.n	800078a <main+0x14a>
	  	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 12 ) ;
 800077e:	495a      	ldr	r1, [pc, #360]	; (80008e8 <main+0x2a8>)
 8000780:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <main+0x2ac>)
 8000782:	220c      	movs	r2, #12
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fb3f 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 12 )
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <main+0x254>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	2b0c      	cmp	r3, #12
 8000790:	d105      	bne.n	800079e <main+0x15e>
	  	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 13 ) ;
 8000792:	4957      	ldr	r1, [pc, #348]	; (80008f0 <main+0x2b0>)
 8000794:	4b57      	ldr	r3, [pc, #348]	; (80008f4 <main+0x2b4>)
 8000796:	220d      	movs	r2, #13
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fb35 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 13 )
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <main+0x254>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	2b0d      	cmp	r3, #13
 80007a4:	d105      	bne.n	80007b2 <main+0x172>
		  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 14 ) ;
 80007a6:	4954      	ldr	r1, [pc, #336]	; (80008f8 <main+0x2b8>)
 80007a8:	4b54      	ldr	r3, [pc, #336]	; (80008fc <main+0x2bc>)
 80007aa:	220e      	movs	r2, #14
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fb2b 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 14 )
 80007b2:	4b38      	ldr	r3, [pc, #224]	; (8000894 <main+0x254>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	2b0e      	cmp	r3, #14
 80007b8:	d105      	bne.n	80007c6 <main+0x186>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007ba:	4951      	ldr	r1, [pc, #324]	; (8000900 <main+0x2c0>)
 80007bc:	4b51      	ldr	r3, [pc, #324]	; (8000904 <main+0x2c4>)
 80007be:	220f      	movs	r2, #15
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fb21 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 15 )
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <main+0x254>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	d105      	bne.n	80007da <main+0x19a>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007ce:	494e      	ldr	r1, [pc, #312]	; (8000908 <main+0x2c8>)
 80007d0:	4b4e      	ldr	r3, [pc, #312]	; (800090c <main+0x2cc>)
 80007d2:	2210      	movs	r2, #16
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fb17 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 16 )
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <main+0x254>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	2b10      	cmp	r3, #16
 80007e0:	d105      	bne.n	80007ee <main+0x1ae>
	  	  send2swarm_at_command ( td_mzo_at_comm , td_ok_answer , 17 ) ;
 80007e2:	494b      	ldr	r1, [pc, #300]	; (8000910 <main+0x2d0>)
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <main+0x2d4>)
 80007e6:	2211      	movs	r2, #17
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fb0d 	bl	8000e08 <send2swarm_at_command>
	  if ( checklist == 17 )
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <main+0x254>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	2b11      	cmp	r3, #17
 80007f4:	d10e      	bne.n	8000814 <main+0x1d4>
	  	  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) good , strlen ( good ) , UART_TX_TIMEOUT ) ;
 80007f6:	4b48      	ldr	r3, [pc, #288]	; (8000918 <main+0x2d8>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fc83 	bl	8000104 <strlen>
 80007fe:	0003      	movs	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	4945      	ldr	r1, [pc, #276]	; (8000918 <main+0x2d8>)
 8000804:	481c      	ldr	r0, [pc, #112]	; (8000878 <main+0x238>)
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	f003 fa4e 	bl	8003ca8 <HAL_UART_Transmit>
 800080c:	0003      	movs	r3, r0
 800080e:	001a      	movs	r2, r3
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <main+0x23c>)
 8000812:	701a      	strb	r2, [r3, #0]
	  HAL_Delay ( 310000) ; // 5min. i 10 sekund obejmujące 5 minut na wysłanie wiadomości
 8000814:	4b41      	ldr	r3, [pc, #260]	; (800091c <main+0x2dc>)
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fe74 	bl	8001504 <HAL_Delay>
	  send2swarm_at_command ( sl_3ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
 800081c:	4940      	ldr	r1, [pc, #256]	; (8000920 <main+0x2e0>)
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <main+0x2e4>)
 8000820:	2212      	movs	r2, #18
 8000822:	0018      	movs	r0, r3
 8000824:	f000 faf0 	bl	8000e08 <send2swarm_at_command>
	  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) stm32_shutdown , strlen ( stm32_shutdown ) , UART_TX_TIMEOUT ) ;
 8000828:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <main+0x2e8>)
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fc6a 	bl	8000104 <strlen>
 8000830:	0003      	movs	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	493c      	ldr	r1, [pc, #240]	; (8000928 <main+0x2e8>)
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <main+0x238>)
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	f003 fa35 	bl	8003ca8 <HAL_UART_Transmit>
 800083e:	0003      	movs	r3, r0
 8000840:	001a      	movs	r2, r3
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <main+0x23c>)
 8000844:	701a      	strb	r2, [r3, #0]
	  HAL_PWREx_EnterSHUTDOWNMode () ; // Enter the SHUTDOWN mode
 8000846:	f001 fc8b 	bl	8002160 <HAL_PWREx_EnterSHUTDOWNMode>
	  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) stm32_wakeup , strlen ( stm32_wakeup ) , UART_TX_TIMEOUT ) ;
 800084a:	4b38      	ldr	r3, [pc, #224]	; (800092c <main+0x2ec>)
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fc59 	bl	8000104 <strlen>
 8000852:	0003      	movs	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	4935      	ldr	r1, [pc, #212]	; (800092c <main+0x2ec>)
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <main+0x238>)
 800085a:	2364      	movs	r3, #100	; 0x64
 800085c:	f003 fa24 	bl	8003ca8 <HAL_UART_Transmit>
 8000860:	0003      	movs	r3, r0
 8000862:	001a      	movs	r2, r3
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <main+0x23c>)
 8000866:	701a      	strb	r2, [r3, #0]
	  checklist = 0 ;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <main+0x254>)
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]
	  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 800086e:	e718      	b.n	80006a2 <main+0x62>
 8000870:	2000010c 	.word	0x2000010c
 8000874:	20000000 	.word	0x20000000
 8000878:	200001ec 	.word	0x200001ec
 800087c:	200002df 	.word	0x200002df
 8000880:	00003a98 	.word	0x00003a98
 8000884:	200002e0 	.word	0x200002e0
 8000888:	20000158 	.word	0x20000158
 800088c:	08005ff4 	.word	0x08005ff4
 8000890:	08005f58 	.word	0x08005f58
 8000894:	200002dc 	.word	0x200002dc
 8000898:	08006000 	.word	0x08006000
 800089c:	08005f5c 	.word	0x08005f5c
 80008a0:	0800600c 	.word	0x0800600c
 80008a4:	08005f64 	.word	0x08005f64
 80008a8:	08006018 	.word	0x08006018
 80008ac:	08005f6c 	.word	0x08005f6c
 80008b0:	08006024 	.word	0x08006024
 80008b4:	08005f74 	.word	0x08005f74
 80008b8:	08006030 	.word	0x08006030
 80008bc:	08005f7c 	.word	0x08005f7c
 80008c0:	08006038 	.word	0x08006038
 80008c4:	08005f84 	.word	0x08005f84
 80008c8:	08006044 	.word	0x08006044
 80008cc:	08005f8c 	.word	0x08005f8c
 80008d0:	08006050 	.word	0x08006050
 80008d4:	08005f94 	.word	0x08005f94
 80008d8:	0800605c 	.word	0x0800605c
 80008dc:	08005f9c 	.word	0x08005f9c
 80008e0:	08006068 	.word	0x08006068
 80008e4:	08005fa4 	.word	0x08005fa4
 80008e8:	08006074 	.word	0x08006074
 80008ec:	08005fac 	.word	0x08005fac
 80008f0:	08006080 	.word	0x08006080
 80008f4:	08005fb4 	.word	0x08005fb4
 80008f8:	0800608c 	.word	0x0800608c
 80008fc:	08005fbc 	.word	0x08005fbc
 8000900:	08006098 	.word	0x08006098
 8000904:	08005fc4 	.word	0x08005fc4
 8000908:	080060a0 	.word	0x080060a0
 800090c:	08005fcc 	.word	0x08005fcc
 8000910:	080060a8 	.word	0x080060a8
 8000914:	08005fd4 	.word	0x08005fd4
 8000918:	20000020 	.word	0x20000020
 800091c:	0004baf0 	.word	0x0004baf0
 8000920:	080060b0 	.word	0x080060b0
 8000924:	08005fe8 	.word	0x08005fe8
 8000928:	20000034 	.word	0x20000034
 800092c:	20000044 	.word	0x20000044

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b093      	sub	sp, #76	; 0x4c
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	2410      	movs	r4, #16
 8000938:	193b      	adds	r3, r7, r4
 800093a:	0018      	movs	r0, r3
 800093c:	2338      	movs	r3, #56	; 0x38
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f004 fe6b 	bl	800561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000946:	003b      	movs	r3, r7
 8000948:	0018      	movs	r0, r3
 800094a:	2310      	movs	r3, #16
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f004 fe64 	bl	800561c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fbc1 	bl	80020e0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800095e:	f001 fbb1 	bl	80020c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <SystemClock_Config+0xa8>)
 8000964:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <SystemClock_Config+0xa8>)
 8000968:	2118      	movs	r1, #24
 800096a:	438a      	bics	r2, r1
 800096c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2206      	movs	r2, #6
 8000972:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2201      	movs	r2, #1
 8000978:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0052      	lsls	r2, r2, #1
 8000980:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2240      	movs	r2, #64	; 0x40
 800098c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	193b      	adds	r3, r7, r4
 8000996:	0018      	movs	r0, r3
 8000998:	f001 fc08 	bl	80021ac <HAL_RCC_OscConfig>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009a0:	f000 fafc 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	003b      	movs	r3, r7
 80009a6:	2207      	movs	r2, #7
 80009a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009aa:	003b      	movs	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	003b      	movs	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009bc:	003b      	movs	r3, r7
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 ff0d 	bl	80027e0 <HAL_RCC_ClockConfig>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ca:	f000 fae7 	bl	8000f9c <Error_Handler>
  }
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b013      	add	sp, #76	; 0x4c
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f004 fe16 	bl	800561c <memset>
  RTC_DateTypeDef sDate = {0};
 80009f0:	003b      	movs	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <MX_RTC_Init+0xe4>)
 80009f8:	4a32      	ldr	r2, [pc, #200]	; (8000ac4 <MX_RTC_Init+0xe8>)
 80009fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <MX_RTC_Init+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a04:	227f      	movs	r2, #127	; 0x7f
 8000a06:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	05d2      	lsls	r2, r2, #23
 8000a26:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 fa37 	bl	8002ea4 <HAL_RTC_Init>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a3a:	f000 faaf 	bl	8000f9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a62:	1d39      	adds	r1, r7, #4
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 fabd 	bl	8002fe8 <HAL_RTC_SetTime>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a72:	f000 fa93 	bl	8000f9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a76:	003b      	movs	r3, r7
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a7c:	003b      	movs	r3, r7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2201      	movs	r2, #1
 8000a86:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a8e:	0039      	movs	r1, r7
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 fb4f 	bl	8003138 <HAL_RTC_SetDate>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000a9e:	f000 fa7d 	bl	8000f9c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000aa2:	23e1      	movs	r3, #225	; 0xe1
 8000aa4:	0119      	lsls	r1, r3, #4
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_RTC_Init+0xe4>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 fcac 	bl	8003408 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000ab4:	f000 fa72 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b006      	add	sp, #24
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000e0 	.word	0x200000e0
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f004 fda0 	bl	800561c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <MX_TIM6_Init+0x70>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_TIM6_Init+0x74>)
 8000ae6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <MX_TIM6_Init+0x78>)
 8000af2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fd43 	bl	8003588 <HAL_TIM_Base_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b06:	f000 fa49 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b16:	1d3a      	adds	r2, r7, #4
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 ffe7 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b26:	f000 fa39 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	2000010c 	.word	0x2000010c
 8000b38:	40001000 	.word	0x40001000
 8000b3c:	00003e7f 	.word	0x00003e7f
 8000b40:	000007cf 	.word	0x000007cf

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <MX_USART1_UART_Init+0x98>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b50:	22e1      	movs	r2, #225	; 0xe1
 8000b52:	0252      	lsls	r2, r2, #9
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f003 f834 	bl	8003bfc <HAL_UART_Init>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 fa00 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f004 fbc9 	bl	8005338 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 f9f7 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f004 fc00 	bl	80053b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f9ee 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f004 fb7e 	bl	80052c4 <HAL_UARTEx_DisableFifoMode>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f9e6 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000158 	.word	0x20000158
 8000bdc:	40013800 	.word	0x40013800

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000be6:	4a24      	ldr	r2, [pc, #144]	; (8000c78 <MX_USART2_UART_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000bec:	22e1      	movs	r2, #225	; 0xe1
 8000bee:	0252      	lsls	r2, r2, #9
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 ffe6 	bl	8003bfc <HAL_UART_Init>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f9b2 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f004 fb7b 	bl	8005338 <HAL_UARTEx_SetTxFifoThreshold>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 f9a9 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f004 fbb2 	bl	80053b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 f9a0 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f004 fb30 	bl	80052c4 <HAL_UARTEx_DisableFifoMode>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f998 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	200001ec 	.word	0x200001ec
 8000c78:	40004400 	.word	0x40004400

08000c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_DMA_Init+0x38>)
 8000c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_DMA_Init+0x38>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_DMA_Init+0x38>)
 8000c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2009      	movs	r0, #9
 8000ca0:	f000 fd00 	bl	80016a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ca4:	2009      	movs	r0, #9
 8000ca6:	f000 fd12 	bl	80016ce <HAL_NVIC_EnableIRQ>

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	240c      	movs	r4, #12
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2314      	movs	r3, #20
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f004 fca7 	bl	800561c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cec:	2120      	movs	r1, #32
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf2:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	; 0x34
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 f974 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0192      	lsls	r2, r2, #6
 8000d2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2288      	movs	r2, #136	; 0x88
 8000d30:	0352      	lsls	r2, r2, #13
 8000d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <MX_GPIO_Init+0xd4>)
 8000d3e:	0019      	movs	r1, r3
 8000d40:	0010      	movs	r0, r2
 8000d42:	f000 ffff 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000d46:	0021      	movs	r1, r4
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2201      	movs	r2, #1
 8000d52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d60:	187a      	adds	r2, r7, r1
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 ffeb 	bl	8001d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2007      	movs	r0, #7
 8000d74:	f000 fc96 	bl	80016a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d78:	2007      	movs	r0, #7
 8000d7a:	f000 fca8 	bl	80016ce <HAL_NVIC_EnableIRQ>

}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b009      	add	sp, #36	; 0x24
 8000d84:	bd90      	pop	{r4, r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	50000800 	.word	0x50000800

08000d90 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	000a      	movs	r2, r1
 8000d9a:	1cbb      	adds	r3, r7, #2
 8000d9c:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_UARTEx_RxEventCallback+0x60>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d118      	bne.n	8000dda <HAL_UARTEx_RxEventCallback+0x4a>
    {
    	if ( rx_buff[0] != 0 )
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d014      	beq.n	8000dda <HAL_UARTEx_RxEventCallback+0x4a>
    	{
    		// Jeśli dostałem potwierdzenie $RT = 0, to ustawiam odpowiednią zmienną
    		if ( strncmp ( (char*) rx_buff , rt_0_answer , strlen ( rt_0_answer ) ) == 0 )
 8000db0:	4911      	ldr	r1, [pc, #68]	; (8000df8 <HAL_UARTEx_RxEventCallback+0x68>)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000db4:	2208      	movs	r2, #8
 8000db6:	0018      	movs	r0, r3
 8000db8:	f004 fc58 	bl	800566c <strncmp>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d103      	bne.n	8000dc8 <HAL_UARTEx_RxEventCallback+0x38>
    		{
    			rt_unsolicited = 0 ;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UARTEx_RxEventCallback+0x6c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
    			__NOP () ;
 8000dc6:	46c0      	nop			; (mov r8, r8)
    		}
    		if ( strncmp ( (char*) rx_buff , rt_ok_answer , strlen ( rt_ok_answer ) ) == 0 )
 8000dc8:	490d      	ldr	r1, [pc, #52]	; (8000e00 <HAL_UARTEx_RxEventCallback+0x70>)
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000dcc:	2209      	movs	r2, #9
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f004 fc4c 	bl	800566c <strncmp>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d100      	bne.n	8000dda <HAL_UARTEx_RxEventCallback+0x4a>
    		{
    			__NOP () ;
 8000dd8:	46c0      	nop			; (mov r8, r8)
    		}
    		//rx_buff[0] = 0 ;
    	}
    }
    HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000dda:	23fa      	movs	r3, #250	; 0xfa
 8000ddc:	005a      	lsls	r2, r3, #1
 8000dde:	4905      	ldr	r1, [pc, #20]	; (8000df4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_UARTEx_RxEventCallback+0x74>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f004 fb2a 	bl	800543c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40013800 	.word	0x40013800
 8000df4:	200002e0 	.word	0x200002e0
 8000df8:	0800600c 	.word	0x0800600c
 8000dfc:	20000053 	.word	0x20000053
 8000e00:	08006000 	.word	0x08006000
 8000e04:	20000158 	.word	0x20000158

08000e08 <send2swarm_at_command>:
			break ;
		}
	}
}
void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b0c4      	sub	sp, #272	; 0x110
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <send2swarm_at_command+0xa4>)
 8000e14:	2188      	movs	r1, #136	; 0x88
 8000e16:	0049      	lsls	r1, r1, #1
 8000e18:	185b      	adds	r3, r3, r1
 8000e1a:	19db      	adds	r3, r3, r7
 8000e1c:	801a      	strh	r2, [r3, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff f96f 	bl	8000104 <strlen>
 8000e26:	0002      	movs	r2, r0
 8000e28:	2510      	movs	r5, #16
 8000e2a:	35ff      	adds	r5, #255	; 0xff
 8000e2c:	197c      	adds	r4, r7, r5
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	0011      	movs	r1, r2
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 f864 	bl	8000f00 <nmea_checksum>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	7023      	strb	r3, [r4, #0]
	char uart_tx_buff[250] ;

	sprintf ( (char*) uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000e3c:	197b      	adds	r3, r7, r5
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	491b      	ldr	r1, [pc, #108]	; (8000eb0 <send2swarm_at_command+0xa8>)
 8000e44:	2414      	movs	r4, #20
 8000e46:	1938      	adds	r0, r7, r4
 8000e48:	f004 fbf0 	bl	800562c <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) uart_tx_buff ,  strlen ( (char*) uart_tx_buff ) , UART_TX_TIMEOUT ) ;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff f958 	bl	8000104 <strlen>
 8000e54:	0003      	movs	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	1939      	adds	r1, r7, r4
 8000e5a:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <send2swarm_at_command+0xac>)
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	f002 ff23 	bl	8003ca8 <HAL_UART_Transmit>
 8000e62:	0003      	movs	r3, r0
 8000e64:	001a      	movs	r2, r3
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <send2swarm_at_command+0xb0>)
 8000e68:	701a      	strb	r2, [r3, #0]
	waiting_for_answer = 1 ;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <send2swarm_at_command+0xb4>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <send2swarm_at_command+0xb8>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 fbe0 	bl	8003638 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000e78:	e00e      	b.n	8000e98 <send2swarm_at_command+0x90>
	{
		if ( check_answer ( answer ) )
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 f823 	bl	8000ec8 <check_answer>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d008      	beq.n	8000e98 <send2swarm_at_command+0x90>
		{
			checklist = step ;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <send2swarm_at_command+0xbc>)
 8000e88:	4a08      	ldr	r2, [pc, #32]	; (8000eac <send2swarm_at_command+0xa4>)
 8000e8a:	2188      	movs	r1, #136	; 0x88
 8000e8c:	0049      	lsls	r1, r1, #1
 8000e8e:	1852      	adds	r2, r2, r1
 8000e90:	19d2      	adds	r2, r2, r7
 8000e92:	8812      	ldrh	r2, [r2, #0]
 8000e94:	801a      	strh	r2, [r3, #0]
			break ;
 8000e96:	e004      	b.n	8000ea2 <send2swarm_at_command+0x9a>
	while ( waiting_for_answer )
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <send2swarm_at_command+0xb4>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1ec      	bne.n	8000e7a <send2swarm_at_command+0x72>
		}
	}
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b044      	add	sp, #272	; 0x110
 8000ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	fffffef6 	.word	0xfffffef6
 8000eb0:	08005f3c 	.word	0x08005f3c
 8000eb4:	20000158 	.word	0x20000158
 8000eb8:	200002df 	.word	0x200002df
 8000ebc:	200002de 	.word	0x200002de
 8000ec0:	2000010c 	.word	0x2000010c
 8000ec4:	200002dc 	.word	0x200002dc

08000ec8 <check_answer>:
uint8_t check_answer ( const char* answer )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff f916 	bl	8000104 <strlen>
 8000ed8:	0002      	movs	r2, r0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <check_answer+0x34>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f004 fbc4 	bl	800566c <strncmp>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d104      	bne.n	8000ef2 <check_answer+0x2a>
	{
		rx_buff[0] = 0 ;
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <check_answer+0x34>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		return 1 ;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <check_answer+0x2c>
	}
	else
		return 0 ;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200002e0 	.word	0x200002e0

08000f00 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b24      	cmp	r3, #36	; 0x24
 8000f14:	d102      	bne.n	8000f1c <nmea_checksum+0x1c>
		i++ ;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f1c:	230b      	movs	r3, #11
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	e00c      	b.n	8000f40 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	18d3      	adds	r3, r2, r3
 8000f2c:	7819      	ldrb	r1, [r3, #0]
 8000f2e:	220b      	movs	r2, #11
 8000f30:	18bb      	adds	r3, r7, r2
 8000f32:	18ba      	adds	r2, r7, r2
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	404a      	eors	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d205      	bcs.n	8000f54 <nmea_checksum+0x54>
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e8      	bne.n	8000f26 <nmea_checksum+0x26>
	return cs;
 8000f54:	230b      	movs	r3, #11
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	781b      	ldrb	r3, [r3, #0]
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d107      	bne.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		waiting_for_answer = 0 ;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f002 fbb6 	bl	80036f0 <HAL_TIM_Base_Stop_IT>
		//NVIC_SystemReset () ; // Może kiedyś przyda się restartowanie aplikacji przy problemach z hardware
		__NOP () ;
 8000f84:	46c0      	nop			; (mov r8, r8)
	}
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40001000 	.word	0x40001000
 8000f94:	200002de 	.word	0x200002de
 8000f98:	2000010c 	.word	0x2000010c

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x44>)
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_MspInit+0x44>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x44>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x44>)
 8000fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_MspInit+0x44>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0549      	lsls	r1, r1, #21
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_MspInit+0x44>)
 8000fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	055b      	lsls	r3, r3, #21
 8000fdc:	4013      	ands	r3, r2
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b091      	sub	sp, #68	; 0x44
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	240c      	movs	r4, #12
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	2334      	movs	r3, #52	; 0x34
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f004 fb0a 	bl	800561c <memset>
  if(hrtc->Instance==RTC)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_RTC_MspInit+0x84>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12c      	bne.n	800106c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001012:	193b      	adds	r3, r7, r4
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	0292      	lsls	r2, r2, #10
 8001018:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	f001 fd85 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800102e:	f7ff ffb5 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_RTC_MspInit+0x88>)
 8001034:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_RTC_MspInit+0x88>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	0209      	lsls	r1, r1, #8
 800103c:	430a      	orrs	r2, r1
 800103e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_RTC_MspInit+0x88>)
 8001042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_RTC_MspInit+0x88>)
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	00c9      	lsls	r1, r1, #3
 800104a:	430a      	orrs	r2, r1
 800104c:	63da      	str	r2, [r3, #60]	; 0x3c
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_RTC_MspInit+0x88>)
 8001050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4013      	ands	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2002      	movs	r0, #2
 8001062:	f000 fb1f 	bl	80016a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001066:	2002      	movs	r0, #2
 8001068:	f000 fb31 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b011      	add	sp, #68	; 0x44
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	40002800 	.word	0x40002800
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <HAL_TIM_Base_MspInit+0x44>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d113      	bne.n	80010b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 8001090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 8001094:	2110      	movs	r1, #16
 8001096:	430a      	orrs	r2, r1
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 800109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109e:	2210      	movs	r2, #16
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2011      	movs	r0, #17
 80010ac:	f000 fafa 	bl	80016a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80010b0:	2011      	movs	r0, #17
 80010b2:	f000 fb0c 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40001000 	.word	0x40001000
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b099      	sub	sp, #100	; 0x64
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	234c      	movs	r3, #76	; 0x4c
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	0018      	movs	r0, r3
 80010d6:	2314      	movs	r3, #20
 80010d8:	001a      	movs	r2, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	f004 fa9e 	bl	800561c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	2418      	movs	r4, #24
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	0018      	movs	r0, r3
 80010e6:	2334      	movs	r3, #52	; 0x34
 80010e8:	001a      	movs	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	f004 fa96 	bl	800561c <memset>
  if(huart->Instance==USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a5e      	ldr	r2, [pc, #376]	; (8001270 <HAL_UART_MspInit+0x1a8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d170      	bne.n	80011dc <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001100:	193b      	adds	r3, r7, r4
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	193b      	adds	r3, r7, r4
 8001108:	0018      	movs	r0, r3
 800110a:	f001 fd13 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001112:	f7ff ff43 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001116:	4b57      	ldr	r3, [pc, #348]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111a:	4b56      	ldr	r3, [pc, #344]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	01c9      	lsls	r1, r1, #7
 8001120:	430a      	orrs	r2, r1
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
 8001124:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	01db      	lsls	r3, r3, #7
 800112c:	4013      	ands	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b50      	ldr	r3, [pc, #320]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001136:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001138:	2104      	movs	r1, #4
 800113a:	430a      	orrs	r2, r1
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
 800113e:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001142:	2204      	movs	r2, #4
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800114a:	214c      	movs	r1, #76	; 0x4c
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2202      	movs	r2, #2
 8001156:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2201      	movs	r2, #1
 8001168:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	187b      	adds	r3, r7, r1
 800116c:	4a42      	ldr	r2, [pc, #264]	; (8001278 <HAL_UART_MspInit+0x1b0>)
 800116e:	0019      	movs	r1, r3
 8001170:	0010      	movs	r0, r2
 8001172:	f000 fde7 	bl	8001d44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_UART_MspInit+0x1b4>)
 8001178:	4a41      	ldr	r2, [pc, #260]	; (8001280 <HAL_UART_MspInit+0x1b8>)
 800117a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <HAL_UART_MspInit+0x1b4>)
 800117e:	2232      	movs	r2, #50	; 0x32
 8001180:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <HAL_UART_MspInit+0x1b4>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001188:	4b3c      	ldr	r3, [pc, #240]	; (800127c <HAL_UART_MspInit+0x1b4>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_UART_MspInit+0x1b4>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_UART_MspInit+0x1b4>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_UART_MspInit+0x1b4>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <HAL_UART_MspInit+0x1b4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_UART_MspInit+0x1b4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <HAL_UART_MspInit+0x1b4>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 faaa 	bl	8001708 <HAL_DMA_Init>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80011b8:	f7ff fef0 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	4a2e      	ldr	r2, [pc, #184]	; (800127c <HAL_UART_MspInit+0x1b4>)
 80011c2:	505a      	str	r2, [r3, r1]
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_UART_MspInit+0x1b4>)
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	201b      	movs	r0, #27
 80011d0:	f000 fa68 	bl	80016a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011d4:	201b      	movs	r0, #27
 80011d6:	f000 fa7a 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011da:	e044      	b.n	8001266 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a28      	ldr	r2, [pc, #160]	; (8001284 <HAL_UART_MspInit+0x1bc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d13f      	bne.n	8001266 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e6:	2118      	movs	r1, #24
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2202      	movs	r2, #2
 80011ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 fc9c 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8001200:	f7ff fecc 	bl	8000f9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	0289      	lsls	r1, r1, #10
 800120e:	430a      	orrs	r2, r1
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	029b      	lsls	r3, r3, #10
 800121a:	4013      	ands	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 8001226:	2101      	movs	r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_MspInit+0x1ac>)
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	2201      	movs	r2, #1
 8001232:	4013      	ands	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8001238:	214c      	movs	r1, #76	; 0x4c
 800123a:	187b      	adds	r3, r7, r1
 800123c:	220c      	movs	r2, #12
 800123e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2202      	movs	r2, #2
 8001244:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2201      	movs	r2, #1
 800124a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2201      	movs	r2, #1
 8001256:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	187a      	adds	r2, r7, r1
 800125a:	23a0      	movs	r3, #160	; 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	0011      	movs	r1, r2
 8001260:	0018      	movs	r0, r3
 8001262:	f000 fd6f 	bl	8001d44 <HAL_GPIO_Init>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b019      	add	sp, #100	; 0x64
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	50000800 	.word	0x50000800
 800127c:	20000280 	.word	0x20000280
 8001280:	40020008 	.word	0x40020008
 8001284:	40004400 	.word	0x40004400

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 f90e 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <RTC_TAMP_IRQHandler+0x14>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f002 f93c 	bl	800353c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	200000e0 	.word	0x200000e0

080012d0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	019b      	lsls	r3, r3, #6
 80012d8:	0018      	movs	r0, r3
 80012da:	f000 feb5 	bl	8002048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <DMA1_Channel1_IRQHandler+0x14>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 fbe8 	bl	8001ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	20000280 	.word	0x20000280

080012fc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001302:	0018      	movs	r0, r3
 8001304:	f002 fa22 	bl	800374c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	2000010c 	.word	0x2000010c

08001314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <USART1_IRQHandler+0x14>)
 800131a:	0018      	movs	r0, r3
 800131c:	f002 fd60 	bl	8003de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000158 	.word	0x20000158

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	18d3      	adds	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f004 f934 	bl	80055c8 <__errno>
 8001360:	0003      	movs	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	2301      	movs	r3, #1
 8001368:	425b      	negs	r3, r3
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	18d2      	adds	r2, r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b006      	add	sp, #24
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20009000 	.word	0x20009000
 800138c:	00000400 	.word	0x00000400
 8001390:	200004d4 	.word	0x200004d4
 8001394:	200004f0 	.word	0x200004f0

08001398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a8:	f7ff fff6 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <LoopForever+0xe>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	; (80013f0 <LoopForever+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013d2:	f004 f8ff 	bl	80055d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013d6:	f7ff f933 	bl	8000640 <main>

080013da <LoopForever>:

LoopForever:
  b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   r0, =_estack
 80013dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80013e8:	08006188 	.word	0x08006188
  ldr r2, =_sbss
 80013ec:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80013f0:	200004ec 	.word	0x200004ec

080013f4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_COMP_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_Init+0x3c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Init+0x3c>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0049      	lsls	r1, r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f810 	bl	8001438 <HAL_InitTick>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d003      	beq.n	8001424 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	e001      	b.n	8001428 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fdc0 	bl	8000fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	230f      	movs	r3, #15
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_InitTick+0x88>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d02b      	beq.n	80014a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_InitTick+0x8c>)
 8001452:	681c      	ldr	r4, [r3, #0]
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_InitTick+0x88>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	0019      	movs	r1, r3
 800145a:	23fa      	movs	r3, #250	; 0xfa
 800145c:	0098      	lsls	r0, r3, #2
 800145e:	f7fe fe63 	bl	8000128 <__udivsi3>
 8001462:	0003      	movs	r3, r0
 8001464:	0019      	movs	r1, r3
 8001466:	0020      	movs	r0, r4
 8001468:	f7fe fe5e 	bl	8000128 <__udivsi3>
 800146c:	0003      	movs	r3, r0
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f93d 	bl	80016ee <HAL_SYSTICK_Config>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d112      	bne.n	800149e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d80a      	bhi.n	8001494 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	425b      	negs	r3, r3
 8001484:	2200      	movs	r2, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f90c 	bl	80016a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_InitTick+0x90>)
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e00d      	b.n	80014b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e008      	b.n	80014b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800149e:	230f      	movs	r3, #15
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e003      	b.n	80014b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a8:	230f      	movs	r3, #15
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014b0:	230f      	movs	r3, #15
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b005      	add	sp, #20
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	2000005c 	.word	0x2000005c
 80014c4:	20000054 	.word	0x20000054
 80014c8:	20000058 	.word	0x20000058

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_IncTick+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	001a      	movs	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_IncTick+0x20>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	18d2      	adds	r2, r2, r3
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_IncTick+0x20>)
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	2000005c 	.word	0x2000005c
 80014ec:	200004d8 	.word	0x200004d8

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_GetTick+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	200004d8 	.word	0x200004d8

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fff0 	bl	80014f0 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	001a      	movs	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	189b      	adds	r3, r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	f7ff ffe0 	bl	80014f0 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	2000005c 	.word	0x2000005c

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	0002      	movs	r2, r0
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b7f      	cmp	r3, #127	; 0x7f
 800155e:	d809      	bhi.n	8001574 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	231f      	movs	r3, #31
 8001568:	401a      	ands	r2, r3
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_EnableIRQ+0x30>)
 800156c:	2101      	movs	r1, #1
 800156e:	4091      	lsls	r1, r2
 8001570:	000a      	movs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	0002      	movs	r2, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b7f      	cmp	r3, #127	; 0x7f
 8001594:	d828      	bhi.n	80015e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001596:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <__NVIC_SetPriority+0xd4>)
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b25b      	sxtb	r3, r3
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	33c0      	adds	r3, #192	; 0xc0
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	589b      	ldr	r3, [r3, r2]
 80015a6:	1dfa      	adds	r2, r7, #7
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	0011      	movs	r1, r2
 80015ac:	2203      	movs	r2, #3
 80015ae:	400a      	ands	r2, r1
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	21ff      	movs	r1, #255	; 0xff
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	43d2      	mvns	r2, r2
 80015ba:	401a      	ands	r2, r3
 80015bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	401a      	ands	r2, r3
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	2303      	movs	r3, #3
 80015ce:	4003      	ands	r3, r0
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	481f      	ldr	r0, [pc, #124]	; (8001654 <__NVIC_SetPriority+0xd4>)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	430a      	orrs	r2, r1
 80015e0:	33c0      	adds	r3, #192	; 0xc0
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015e6:	e031      	b.n	800164c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <__NVIC_SetPriority+0xd8>)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0019      	movs	r1, r3
 80015f0:	230f      	movs	r3, #15
 80015f2:	400b      	ands	r3, r1
 80015f4:	3b08      	subs	r3, #8
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3306      	adds	r3, #6
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	3304      	adds	r3, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	0011      	movs	r1, r2
 8001608:	2203      	movs	r2, #3
 800160a:	400a      	ands	r2, r1
 800160c:	00d2      	lsls	r2, r2, #3
 800160e:	21ff      	movs	r1, #255	; 0xff
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	43d2      	mvns	r2, r2
 8001616:	401a      	ands	r2, r3
 8001618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	401a      	ands	r2, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	2303      	movs	r3, #3
 800162a:	4003      	ands	r3, r0
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <__NVIC_SetPriority+0xd8>)
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	001c      	movs	r4, r3
 8001638:	230f      	movs	r3, #15
 800163a:	4023      	ands	r3, r4
 800163c:	3b08      	subs	r3, #8
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	430a      	orrs	r2, r1
 8001642:	3306      	adds	r3, #6
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	18c3      	adds	r3, r0, r3
 8001648:	3304      	adds	r3, #4
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b003      	add	sp, #12
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	045b      	lsls	r3, r3, #17
 800166c:	429a      	cmp	r2, r3
 800166e:	d301      	bcc.n	8001674 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001670:	2301      	movs	r3, #1
 8001672:	e010      	b.n	8001696 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <SysTick_Config+0x44>)
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	3a01      	subs	r2, #1
 800167a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167c:	2301      	movs	r3, #1
 800167e:	425b      	negs	r3, r3
 8001680:	2103      	movs	r1, #3
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ff7c 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x44>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x44>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	210f      	movs	r1, #15
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	1c02      	adds	r2, r0, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	0011      	movs	r1, r2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	0002      	movs	r2, r0
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff33 	bl	800154c <__NVIC_EnableIRQ>
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ffaf 	bl	800165c <SysTick_Config>
 80016fe:	0003      	movs	r3, r0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e077      	b.n	800180a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <HAL_DMA_Init+0x10c>)
 8001720:	4694      	mov	ip, r2
 8001722:	4463      	add	r3, ip
 8001724:	2114      	movs	r1, #20
 8001726:	0018      	movs	r0, r3
 8001728:	f7fe fcfe 	bl	8000128 <__udivsi3>
 800172c:	0003      	movs	r3, r0
 800172e:	009a      	lsls	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2225      	movs	r2, #37	; 0x25
 8001738:	2102      	movs	r1, #2
 800173a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4934      	ldr	r1, [pc, #208]	; (8001818 <HAL_DMA_Init+0x110>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f000 fa8d 	bl	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	01db      	lsls	r3, r3, #7
 8001792:	429a      	cmp	r2, r3
 8001794:	d102      	bne.n	800179c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	213f      	movs	r1, #63	; 0x3f
 80017a6:	400a      	ands	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017b2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d011      	beq.n	80017e0 <HAL_DMA_Init+0xd8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d80d      	bhi.n	80017e0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fa98 	bl	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	e008      	b.n	80017f2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2225      	movs	r2, #37	; 0x25
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2224      	movs	r2, #36	; 0x24
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	bffdfff8 	.word	0xbffdfff8
 8001818:	ffff800f 	.word	0xffff800f

0800181c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800182a:	2317      	movs	r3, #23
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2224      	movs	r2, #36	; 0x24
 8001836:	5c9b      	ldrb	r3, [r3, r2]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_DMA_Start_IT+0x24>
 800183c:	2302      	movs	r3, #2
 800183e:	e06f      	b.n	8001920 <HAL_DMA_Start_IT+0x104>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	2101      	movs	r1, #1
 8001846:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2225      	movs	r2, #37	; 0x25
 800184c:	5c9b      	ldrb	r3, [r3, r2]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d157      	bne.n	8001904 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2225      	movs	r2, #37	; 0x25
 8001858:	2102      	movs	r1, #2
 800185a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 f9d3 	bl	8001c24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	210e      	movs	r1, #14
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e00f      	b.n	80018b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2104      	movs	r1, #4
 80018a4:	438a      	bics	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	210a      	movs	r1, #10
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	4013      	ands	r3, r2
 80018c4:	d008      	beq.n	80018d8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0049      	lsls	r1, r1, #1
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	0049      	lsls	r1, r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00a      	b.n	800191a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2224      	movs	r2, #36	; 0x24
 800190e:	2100      	movs	r1, #0
 8001910:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001912:	2317      	movs	r3, #23
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800191a:	2317      	movs	r3, #23
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	781b      	ldrb	r3, [r3, #0]
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b006      	add	sp, #24
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e050      	b.n	80019dc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2225      	movs	r2, #37	; 0x25
 800193e:	5c9b      	ldrb	r3, [r3, r2]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d008      	beq.n	8001958 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2224      	movs	r2, #36	; 0x24
 8001950:	2100      	movs	r1, #0
 8001952:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e041      	b.n	80019dc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	210e      	movs	r1, #14
 8001964:	438a      	bics	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	491c      	ldr	r1, [pc, #112]	; (80019e4 <HAL_DMA_Abort+0xbc>)
 8001974:	400a      	ands	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_DMA_Abort+0xc0>)
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	221c      	movs	r2, #28
 8001992:	4013      	ands	r3, r2
 8001994:	2201      	movs	r2, #1
 8001996:	409a      	lsls	r2, r3
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_DMA_Abort+0xc0>)
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	490a      	ldr	r1, [pc, #40]	; (80019e4 <HAL_DMA_Abort+0xbc>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80019c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2225      	movs	r2, #37	; 0x25
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2224      	movs	r2, #36	; 0x24
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b002      	add	sp, #8
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	fffffeff 	.word	0xfffffeff
 80019e8:	40020000 	.word	0x40020000

080019ec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	210f      	movs	r1, #15
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2225      	movs	r2, #37	; 0x25
 8001a00:	5c9b      	ldrb	r3, [r3, r2]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d006      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e049      	b.n	8001aaa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	210e      	movs	r1, #14
 8001a22:	438a      	bics	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	438a      	bics	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <HAL_DMA_Abort_IT+0xcc>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_DMA_Abort_IT+0xd0>)
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	221c      	movs	r2, #28
 8001a50:	4013      	ands	r3, r2
 8001a52:	2201      	movs	r2, #1
 8001a54:	409a      	lsls	r2, r3
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_DMA_Abort_IT+0xd0>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00c      	beq.n	8001a88 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a78:	490f      	ldr	r1, [pc, #60]	; (8001ab8 <HAL_DMA_Abort_IT+0xcc>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2225      	movs	r2, #37	; 0x25
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	4798      	blx	r3
    }
  }
  return status;
 8001aaa:	230f      	movs	r3, #15
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	781b      	ldrb	r3, [r3, #0]
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b004      	add	sp, #16
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	fffffeff 	.word	0xfffffeff
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001ac8:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <HAL_DMA_IRQHandler+0x160>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	221c      	movs	r2, #28
 8001adc:	4013      	ands	r3, r2
 8001ade:	2204      	movs	r2, #4
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x7a>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2204      	movs	r2, #4
 8001aee:	4013      	ands	r3, r2
 8001af0:	d023      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2220      	movs	r2, #32
 8001afa:	4013      	ands	r3, r2
 8001afc:	d107      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2104      	movs	r1, #4
 8001b0a:	438a      	bics	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <HAL_DMA_IRQHandler+0x160>)
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	221c      	movs	r2, #28
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_DMA_IRQHandler+0x160>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d100      	bne.n	8001b2e <HAL_DMA_IRQHandler+0x6e>
 8001b2c:	e073      	b.n	8001c16 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	0010      	movs	r0, r2
 8001b36:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b38:	e06d      	b.n	8001c16 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	221c      	movs	r2, #28
 8001b40:	4013      	ands	r3, r2
 8001b42:	2202      	movs	r2, #2
 8001b44:	409a      	lsls	r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d02e      	beq.n	8001bac <HAL_DMA_IRQHandler+0xec>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d02a      	beq.n	8001bac <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d10b      	bne.n	8001b7a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	210a      	movs	r1, #10
 8001b6e:	438a      	bics	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2225      	movs	r2, #37	; 0x25
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_DMA_IRQHandler+0x160>)
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	221c      	movs	r2, #28
 8001b84:	4013      	ands	r3, r2
 8001b86:	2202      	movs	r2, #2
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_DMA_IRQHandler+0x160>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d03a      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001baa:	e034      	b.n	8001c16 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	221c      	movs	r2, #28
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d02b      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x158>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	210e      	movs	r1, #14
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_DMA_IRQHandler+0x160>)
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	221c      	movs	r2, #28
 8001be2:	4013      	ands	r3, r2
 8001be4:	2201      	movs	r2, #1
 8001be6:	409a      	lsls	r2, r3
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_DMA_IRQHandler+0x160>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2225      	movs	r2, #37	; 0x25
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	0010      	movs	r0, r2
 8001c14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46c0      	nop			; (mov r8, r8)
}
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40020000 	.word	0x40020000

08001c24 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <DMA_SetConfig+0x7c>)
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	221c      	movs	r2, #28
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <DMA_SetConfig+0x7c>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d108      	bne.n	8001c86 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c84:	e007      	b.n	8001c96 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	60da      	str	r2, [r3, #12]
}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b004      	add	sp, #16
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001cb4:	4694      	mov	ip, r2
 8001cb6:	4463      	add	r3, ip
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	001a      	movs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	23ff      	movs	r3, #255	; 0xff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	3b08      	subs	r3, #8
 8001ccc:	2114      	movs	r1, #20
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7fe fa2a 	bl	8000128 <__udivsi3>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001cdc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	10008200 	.word	0x10008200
 8001cf8:	40020880 	.word	0x40020880

08001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	223f      	movs	r2, #63	; 0x3f
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d12:	4694      	mov	ip, r2
 8001d14:	4463      	add	r3, ip
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	001a      	movs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	1000823f 	.word	0x1000823f
 8001d40:	40020940 	.word	0x40020940

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	e147      	b.n	8001fe4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4091      	lsls	r1, r2
 8001d5e:	000a      	movs	r2, r1
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d100      	bne.n	8001d6c <HAL_GPIO_Init+0x28>
 8001d6a:	e138      	b.n	8001fde <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d005      	beq.n	8001d84 <HAL_GPIO_Init+0x40>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d130      	bne.n	8001de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	409a      	lsls	r2, r3
 8001d92:	0013      	movs	r3, r2
 8001d94:	43da      	mvns	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	409a      	lsls	r2, r3
 8001da6:	0013      	movs	r3, r2
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	0013      	movs	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d017      	beq.n	8001e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	43da      	mvns	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2203      	movs	r2, #3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d123      	bne.n	8001e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	58d3      	ldr	r3, [r2, r3]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2107      	movs	r1, #7
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	6939      	ldr	r1, [r7, #16]
 8001e74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	401a      	ands	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	23c0      	movs	r3, #192	; 0xc0
 8001eb0:	029b      	lsls	r3, r3, #10
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d100      	bne.n	8001eb8 <HAL_GPIO_Init+0x174>
 8001eb6:	e092      	b.n	8001fde <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001eb8:	4a50      	ldr	r2, [pc, #320]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3318      	adds	r3, #24
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	589b      	ldr	r3, [r3, r2]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	220f      	movs	r2, #15
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	23a0      	movs	r3, #160	; 0xa0
 8001ee0:	05db      	lsls	r3, r3, #23
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x1ca>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a45      	ldr	r2, [pc, #276]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x1c6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a44      	ldr	r2, [pc, #272]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x1c2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a43      	ldr	r2, [pc, #268]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x1be>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x1cc>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x1cc>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x1cc>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x1cc>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	2103      	movs	r1, #3
 8001f14:	400a      	ands	r2, r1
 8001f16:	00d2      	lsls	r2, r2, #3
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f20:	4936      	ldr	r1, [pc, #216]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3318      	adds	r3, #24
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43da      	mvns	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	035b      	lsls	r3, r3, #13
 8001f46:	4013      	ands	r3, r2
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43da      	mvns	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	039b      	lsls	r3, r3, #14
 8001f70:	4013      	ands	r3, r2
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f84:	2384      	movs	r3, #132	; 0x84
 8001f86:	58d3      	ldr	r3, [r2, r3]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa8:	4914      	ldr	r1, [pc, #80]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001faa:	2284      	movs	r2, #132	; 0x84
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	58d3      	ldr	r3, [r2, r3]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	025b      	lsls	r3, r3, #9
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fd6:	4909      	ldr	r1, [pc, #36]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	40da      	lsrs	r2, r3
 8001fec:	1e13      	subs	r3, r2, #0
 8001fee:	d000      	beq.n	8001ff2 <HAL_GPIO_Init+0x2ae>
 8001ff0:	e6b0      	b.n	8001d54 <HAL_GPIO_Init+0x10>
  }
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b006      	add	sp, #24
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021800 	.word	0x40021800
 8002000:	50000400 	.word	0x50000400
 8002004:	50000800 	.word	0x50000800
 8002008:	50000c00 	.word	0x50000c00

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	0008      	movs	r0, r1
 8002016:	0011      	movs	r1, r2
 8002018:	1cbb      	adds	r3, r7, #2
 800201a:	1c02      	adds	r2, r0, #0
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	1c7b      	adds	r3, r7, #1
 8002020:	1c0a      	adds	r2, r1, #0
 8002022:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002024:	1c7b      	adds	r3, r7, #1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800202c:	1cbb      	adds	r3, r7, #2
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002036:	1cbb      	adds	r3, r7, #2
 8002038:	881a      	ldrh	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	1dba      	adds	r2, r7, #6
 800205a:	8812      	ldrh	r2, [r2, #0]
 800205c:	4013      	ands	r3, r2
 800205e:	d008      	beq.n	8002072 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002062:	1dba      	adds	r2, r7, #6
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002068:	1dbb      	adds	r3, r7, #6
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	0018      	movs	r0, r3
 800206e:	f000 f815 	bl	800209c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	1dba      	adds	r2, r7, #6
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	4013      	ands	r3, r2
 800207c:	d008      	beq.n	8002090 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002080:	1dba      	adds	r2, r7, #6
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002086:	1dbb      	adds	r3, r7, #6
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f810 	bl	80020b0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021800 	.word	0x40021800

0800209c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	0002      	movs	r2, r0
 80020a4:	1dbb      	adds	r3, r7, #6
 80020a6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	0049      	lsls	r1, r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40007000 	.word	0x40007000

080020e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d11f      	bne.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	0013      	movs	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	189b      	adds	r3, r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4912      	ldr	r1, [pc, #72]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002112:	0018      	movs	r0, r3
 8002114:	f7fe f808 	bl	8000128 <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	3301      	adds	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800211e:	e008      	b.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b01      	subs	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e001      	b.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e009      	b.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	401a      	ands	r2, r3
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	429a      	cmp	r2, r3
 8002142:	d0ed      	beq.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	40007000 	.word	0x40007000
 8002154:	fffff9ff 	.word	0xfffff9ff
 8002158:	20000054 	.word	0x20000054
 800215c:	000f4240 	.word	0x000f4240

08002160 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2207      	movs	r2, #7
 800216a:	4393      	bics	r3, r2
 800216c:	001a      	movs	r2, r3
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002170:	2104      	movs	r1, #4
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800217c:	2104      	movs	r1, #4
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8002182:	bf30      	wfi
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40007000 	.word	0x40007000
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	23e0      	movs	r3, #224	; 0xe0
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	4013      	ands	r3, r2
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000

080021ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e2fe      	b.n	80027bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	d100      	bne.n	80021ca <HAL_RCC_OscConfig+0x1e>
 80021c8:	e07c      	b.n	80022c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ca:	4bc3      	ldr	r3, [pc, #780]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2238      	movs	r2, #56	; 0x38
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d4:	4bc0      	ldr	r3, [pc, #768]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2203      	movs	r2, #3
 80021da:	4013      	ands	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_OscConfig+0x3e>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4bb9      	ldr	r3, [pc, #740]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	029b      	lsls	r3, r3, #10
 80021f8:	4013      	ands	r3, r2
 80021fa:	d062      	beq.n	80022c2 <HAL_RCC_OscConfig+0x116>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d15e      	bne.n	80022c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e2d9      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x78>
 8002214:	4bb0      	ldr	r3, [pc, #704]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4baf      	ldr	r3, [pc, #700]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0249      	lsls	r1, r1, #9
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e020      	b.n	8002266 <HAL_RCC_OscConfig+0xba>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	23a0      	movs	r3, #160	; 0xa0
 800222a:	02db      	lsls	r3, r3, #11
 800222c:	429a      	cmp	r2, r3
 800222e:	d10e      	bne.n	800224e <HAL_RCC_OscConfig+0xa2>
 8002230:	4ba9      	ldr	r3, [pc, #676]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4ba8      	ldr	r3, [pc, #672]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	02c9      	lsls	r1, r1, #11
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	4ba6      	ldr	r3, [pc, #664]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4ba5      	ldr	r3, [pc, #660]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0249      	lsls	r1, r1, #9
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0xba>
 800224e:	4ba2      	ldr	r3, [pc, #648]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4ba1      	ldr	r3, [pc, #644]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002254:	49a1      	ldr	r1, [pc, #644]	; (80024dc <HAL_RCC_OscConfig+0x330>)
 8002256:	400a      	ands	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4b9f      	ldr	r3, [pc, #636]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b9e      	ldr	r3, [pc, #632]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002260:	499f      	ldr	r1, [pc, #636]	; (80024e0 <HAL_RCC_OscConfig+0x334>)
 8002262:	400a      	ands	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d014      	beq.n	8002298 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff f93f 	bl	80014f0 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff f93a 	bl	80014f0 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e298      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b93      	ldr	r3, [pc, #588]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	029b      	lsls	r3, r3, #10
 8002292:	4013      	ands	r3, r2
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0xcc>
 8002296:	e015      	b.n	80022c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff f92a 	bl	80014f0 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a2:	f7ff f925 	bl	80014f0 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e283      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b4:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	4013      	ands	r3, r2
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0xf6>
 80022c0:	e000      	b.n	80022c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d100      	bne.n	80022d0 <HAL_RCC_OscConfig+0x124>
 80022ce:	e099      	b.n	8002404 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d0:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2238      	movs	r2, #56	; 0x38
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2203      	movs	r2, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d102      	bne.n	80022f0 <HAL_RCC_OscConfig+0x144>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d002      	beq.n	80022f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d135      	bne.n	8002362 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f6:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4013      	ands	r3, r2
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x162>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e256      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a74      	ldr	r2, [pc, #464]	; (80024e4 <HAL_RCC_OscConfig+0x338>)
 8002314:	4013      	ands	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800232a:	4b6b      	ldr	r3, [pc, #428]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6e      	ldr	r2, [pc, #440]	; (80024e8 <HAL_RCC_OscConfig+0x33c>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800233e:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0adb      	lsrs	r3, r3, #11
 8002344:	2207      	movs	r2, #7
 8002346:	4013      	ands	r3, r2
 8002348:	4a68      	ldr	r2, [pc, #416]	; (80024ec <HAL_RCC_OscConfig+0x340>)
 800234a:	40da      	lsrs	r2, r3
 800234c:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <HAL_RCC_OscConfig+0x344>)
 800234e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x348>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff f86f 	bl	8001438 <HAL_InitTick>
 800235a:	1e03      	subs	r3, r0, #0
 800235c:	d051      	beq.n	8002402 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e22c      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d030      	beq.n	80023cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a5e      	ldr	r2, [pc, #376]	; (80024e8 <HAL_RCC_OscConfig+0x33c>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0049      	lsls	r1, r1, #1
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff f8b0 	bl	80014f0 <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7ff f8ab 	bl	80014f0 <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e209      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a8:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_RCC_OscConfig+0x338>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	021a      	lsls	r2, r3, #8
 80023c4:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	e01b      	b.n	8002404 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023cc:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	4949      	ldr	r1, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x34c>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff f88a 	bl	80014f0 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7ff f885 	bl	80014f0 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1e3      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x236>
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002402:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2208      	movs	r2, #8
 800240a:	4013      	ands	r3, r2
 800240c:	d047      	beq.n	800249e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800240e:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2238      	movs	r2, #56	; 0x38
 8002414:	4013      	ands	r3, r2
 8002416:	2b18      	cmp	r3, #24
 8002418:	d10a      	bne.n	8002430 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800241a:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d03c      	beq.n	800249e <HAL_RCC_OscConfig+0x2f2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d138      	bne.n	800249e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e1c5      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d019      	beq.n	800246c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800243a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800243e:	2101      	movs	r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f854 	bl	80014f0 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff f84f 	bl	80014f0 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1ad      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	2202      	movs	r2, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d0f1      	beq.n	800244e <HAL_RCC_OscConfig+0x2a2>
 800246a:	e018      	b.n	800249e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 800246e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7ff f83a 	bl	80014f0 <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff f835 	bl	80014f0 <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e193      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d1f1      	bne.n	8002482 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d100      	bne.n	80024aa <HAL_RCC_OscConfig+0x2fe>
 80024a8:	e0c6      	b.n	8002638 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	231f      	movs	r3, #31
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2238      	movs	r2, #56	; 0x38
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	d11e      	bne.n	80024fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x32c>)
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d100      	bne.n	80024ca <HAL_RCC_OscConfig+0x31e>
 80024c8:	e0b6      	b.n	8002638 <HAL_RCC_OscConfig+0x48c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d000      	beq.n	80024d4 <HAL_RCC_OscConfig+0x328>
 80024d2:	e0b1      	b.n	8002638 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e171      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	fffeffff 	.word	0xfffeffff
 80024e0:	fffbffff 	.word	0xfffbffff
 80024e4:	ffff80ff 	.word	0xffff80ff
 80024e8:	ffffc7ff 	.word	0xffffc7ff
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	20000054 	.word	0x20000054
 80024f4:	20000058 	.word	0x20000058
 80024f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024fc:	4bb1      	ldr	r3, [pc, #708]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80024fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	055b      	lsls	r3, r3, #21
 8002504:	4013      	ands	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_RCC_OscConfig+0x360>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x362>
 800250c:	2300      	movs	r3, #0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4bac      	ldr	r3, [pc, #688]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002516:	4bab      	ldr	r3, [pc, #684]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0549      	lsls	r1, r1, #21
 800251c:	430a      	orrs	r2, r1
 800251e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002520:	4ba8      	ldr	r3, [pc, #672]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	055b      	lsls	r3, r3, #21
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002536:	4ba4      	ldr	r3, [pc, #656]	; (80027c8 <HAL_RCC_OscConfig+0x61c>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4013      	ands	r3, r2
 8002540:	d11a      	bne.n	8002578 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002542:	4ba1      	ldr	r3, [pc, #644]	; (80027c8 <HAL_RCC_OscConfig+0x61c>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <HAL_RCC_OscConfig+0x61c>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	0049      	lsls	r1, r1, #1
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002550:	f7fe ffce 	bl	80014f0 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe ffc9 	bl	80014f0 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e127      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	4b96      	ldr	r3, [pc, #600]	; (80027c8 <HAL_RCC_OscConfig+0x61c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4013      	ands	r3, r2
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x3e2>
 8002580:	4b90      	ldr	r3, [pc, #576]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002584:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002586:	2101      	movs	r1, #1
 8002588:	430a      	orrs	r2, r1
 800258a:	65da      	str	r2, [r3, #92]	; 0x5c
 800258c:	e01c      	b.n	80025c8 <HAL_RCC_OscConfig+0x41c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x404>
 8002596:	4b8b      	ldr	r3, [pc, #556]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002598:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800259a:	4b8a      	ldr	r3, [pc, #552]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800259c:	2104      	movs	r1, #4
 800259e:	430a      	orrs	r2, r1
 80025a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80025a2:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80025a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025a6:	4b87      	ldr	r3, [pc, #540]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0x41c>
 80025b0:	4b84      	ldr	r3, [pc, #528]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80025b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b4:	4b83      	ldr	r3, [pc, #524]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	438a      	bics	r2, r1
 80025ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80025bc:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80025be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80025c2:	2104      	movs	r1, #4
 80025c4:	438a      	bics	r2, r1
 80025c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d014      	beq.n	80025fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff8e 	bl	80014f0 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d8:	e009      	b.n	80025ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe ff89 	bl	80014f0 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a79      	ldr	r2, [pc, #484]	; (80027cc <HAL_RCC_OscConfig+0x620>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0e6      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ee:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	2202      	movs	r2, #2
 80025f4:	4013      	ands	r3, r2
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x42e>
 80025f8:	e013      	b.n	8002622 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe ff79 	bl	80014f0 <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002602:	e009      	b.n	8002618 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe ff74 	bl	80014f0 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	4a6f      	ldr	r2, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x620>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0d1      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002618:	4b6a      	ldr	r3, [pc, #424]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2202      	movs	r2, #2
 800261e:	4013      	ands	r3, r2
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002622:	231f      	movs	r3, #31
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800262e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002632:	4967      	ldr	r1, [pc, #412]	; (80027d0 <HAL_RCC_OscConfig+0x624>)
 8002634:	400a      	ands	r2, r1
 8002636:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d100      	bne.n	8002642 <HAL_RCC_OscConfig+0x496>
 8002640:	e0bb      	b.n	80027ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002642:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	; 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	2b10      	cmp	r3, #16
 800264c:	d100      	bne.n	8002650 <HAL_RCC_OscConfig+0x4a4>
 800264e:	e07b      	b.n	8002748 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d156      	bne.n	8002706 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800265e:	495d      	ldr	r1, [pc, #372]	; (80027d4 <HAL_RCC_OscConfig+0x628>)
 8002660:	400a      	ands	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe ff44 	bl	80014f0 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe ff3f 	bl	80014f0 <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e09d      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	049b      	lsls	r3, r3, #18
 8002688:	4013      	ands	r3, r2
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a51      	ldr	r2, [pc, #324]	; (80027d8 <HAL_RCC_OscConfig+0x62c>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1a      	ldr	r2, [r3, #32]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	431a      	orrs	r2, r3
 80026ba:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0449      	lsls	r1, r1, #17
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0549      	lsls	r1, r1, #21
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff08 	bl	80014f0 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe ff03 	bl	80014f0 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e061      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f8:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	049b      	lsls	r3, r3, #18
 8002700:	4013      	ands	r3, r2
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x53a>
 8002704:	e059      	b.n	80027ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800270c:	4931      	ldr	r1, [pc, #196]	; (80027d4 <HAL_RCC_OscConfig+0x628>)
 800270e:	400a      	ands	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe feed 	bl	80014f0 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fee8 	bl	80014f0 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e046      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	049b      	lsls	r3, r3, #18
 8002736:	4013      	ands	r3, r2
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002740:	4926      	ldr	r1, [pc, #152]	; (80027dc <HAL_RCC_OscConfig+0x630>)
 8002742:	400a      	ands	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	e038      	b.n	80027ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e033      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2203      	movs	r2, #3
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	429a      	cmp	r2, r3
 8002766:	d126      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2270      	movs	r2, #112	; 0x70
 800276c:	401a      	ands	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d11f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	23fe      	movs	r3, #254	; 0xfe
 800277a:	01db      	lsls	r3, r3, #7
 800277c:	401a      	ands	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d116      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	23f8      	movs	r3, #248	; 0xf8
 800278c:	039b      	lsls	r3, r3, #14
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d10e      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	23e0      	movs	r3, #224	; 0xe0
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	0f5b      	lsrs	r3, r3, #29
 80027ac:	075a      	lsls	r2, r3, #29
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b008      	add	sp, #32
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	00001388 	.word	0x00001388
 80027d0:	efffffff 	.word	0xefffffff
 80027d4:	feffffff 	.word	0xfeffffff
 80027d8:	11c1808c 	.word	0x11c1808c
 80027dc:	eefefffc 	.word	0xeefefffc

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0e9      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2207      	movs	r2, #7
 80027fa:	4013      	ands	r3, r2
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d91e      	bls.n	8002840 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2207      	movs	r2, #7
 8002808:	4393      	bics	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002814:	f7fe fe6c 	bl	80014f0 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800281c:	e009      	b.n	8002832 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281e:	f7fe fe67 	bl	80014f0 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	4a6a      	ldr	r2, [pc, #424]	; (80029d4 <HAL_RCC_ClockConfig+0x1f4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0ca      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2207      	movs	r2, #7
 8002838:	4013      	ands	r3, r2
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2202      	movs	r2, #2
 8002846:	4013      	ands	r3, r2
 8002848:	d015      	beq.n	8002876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	4013      	ands	r3, r2
 8002852:	d006      	beq.n	8002862 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002854:	4b60      	ldr	r3, [pc, #384]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 800285a:	21e0      	movs	r1, #224	; 0xe0
 800285c:	01c9      	lsls	r1, r1, #7
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002862:	4b5d      	ldr	r3, [pc, #372]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_RCC_ClockConfig+0x1fc>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d057      	beq.n	8002930 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	029b      	lsls	r3, r3, #10
 8002890:	4013      	ands	r3, r2
 8002892:	d12b      	bne.n	80028ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e097      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a0:	4b4d      	ldr	r3, [pc, #308]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	049b      	lsls	r3, r3, #18
 80028a8:	4013      	ands	r3, r2
 80028aa:	d11f      	bne.n	80028ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e08b      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b8:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4013      	ands	r3, r2
 80028c2:	d113      	bne.n	80028ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e07f      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d106      	bne.n	80028de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d0:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e074      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028de:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2202      	movs	r2, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e06d      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2207      	movs	r2, #7
 80028f2:	4393      	bics	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80028fc:	430a      	orrs	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002900:	f7fe fdf6 	bl	80014f0 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002908:	e009      	b.n	800291e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290a:	f7fe fdf1 	bl	80014f0 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <HAL_RCC_ClockConfig+0x1f4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e054      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2e      	ldr	r3, [pc, #184]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2238      	movs	r2, #56	; 0x38
 8002924:	401a      	ands	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	429a      	cmp	r2, r3
 800292e:	d1ec      	bne.n	800290a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2207      	movs	r2, #7
 8002936:	4013      	ands	r3, r2
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d21e      	bcs.n	800297c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2207      	movs	r2, #7
 8002944:	4393      	bics	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002950:	f7fe fdce 	bl	80014f0 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002958:	e009      	b.n	800296e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295a:	f7fe fdc9 	bl	80014f0 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_RCC_ClockConfig+0x1f4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e02c      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2207      	movs	r2, #7
 8002974:	4013      	ands	r3, r2
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d1ee      	bne.n	800295a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2204      	movs	r2, #4
 8002982:	4013      	ands	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_RCC_ClockConfig+0x200>)
 800298c:	4013      	ands	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800299a:	f000 f829 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 800299e:	0001      	movs	r1, r0
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	220f      	movs	r2, #15
 80029a8:	401a      	ands	r2, r3
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x204>)
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	58d3      	ldr	r3, [r2, r3]
 80029b0:	221f      	movs	r2, #31
 80029b2:	4013      	ands	r3, r2
 80029b4:	000a      	movs	r2, r1
 80029b6:	40da      	lsrs	r2, r3
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_ClockConfig+0x208>)
 80029ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_ClockConfig+0x20c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7fe fd39 	bl	8001438 <HAL_InitTick>
 80029c6:	0003      	movs	r3, r0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40022000 	.word	0x40022000
 80029d4:	00001388 	.word	0x00001388
 80029d8:	40021000 	.word	0x40021000
 80029dc:	fffff0ff 	.word	0xfffff0ff
 80029e0:	ffff8fff 	.word	0xffff8fff
 80029e4:	080060bc 	.word	0x080060bc
 80029e8:	20000054 	.word	0x20000054
 80029ec:	20000058 	.word	0x20000058

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f6:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2238      	movs	r2, #56	; 0x38
 80029fc:	4013      	ands	r3, r2
 80029fe:	d10f      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0adb      	lsrs	r3, r3, #11
 8002a06:	2207      	movs	r2, #7
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a12:	6839      	ldr	r1, [r7, #0]
 8002a14:	4835      	ldr	r0, [pc, #212]	; (8002aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a16:	f7fd fb87 	bl	8000128 <__udivsi3>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	e05d      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2238      	movs	r2, #56	; 0x38
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e054      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2238      	movs	r2, #56	; 0x38
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d138      	bne.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2203      	movs	r2, #3
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	2207      	movs	r2, #7
 8002a50:	4013      	ands	r3, r2
 8002a52:	3301      	adds	r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	4824      	ldr	r0, [pc, #144]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a60:	f7fd fb62 	bl	8000128 <__udivsi3>
 8002a64:	0003      	movs	r3, r0
 8002a66:	0019      	movs	r1, r3
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	227f      	movs	r2, #127	; 0x7f
 8002a70:	4013      	ands	r3, r2
 8002a72:	434b      	muls	r3, r1
 8002a74:	617b      	str	r3, [r7, #20]
        break;
 8002a76:	e00d      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	481c      	ldr	r0, [pc, #112]	; (8002aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a7c:	f7fd fb54 	bl	8000128 <__udivsi3>
 8002a80:	0003      	movs	r3, r0
 8002a82:	0019      	movs	r1, r3
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	227f      	movs	r2, #127	; 0x7f
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	434b      	muls	r3, r1
 8002a90:	617b      	str	r3, [r7, #20]
        break;
 8002a92:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0f5b      	lsrs	r3, r3, #29
 8002a9a:	2207      	movs	r2, #7
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	6978      	ldr	r0, [r7, #20]
 8002aa6:	f7fd fb3f 	bl	8000128 <__udivsi3>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	e015      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2238      	movs	r2, #56	; 0x38
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d103      	bne.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2238      	movs	r2, #56	; 0x38
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b18      	cmp	r3, #24
 8002ace:	d103      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ad0:	23fa      	movs	r3, #250	; 0xfa
 8002ad2:	01db      	lsls	r3, r3, #7
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e001      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002adc:	693b      	ldr	r3, [r7, #16]
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b006      	add	sp, #24
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	007a1200 	.word	0x007a1200

08002af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	20000054 	.word	0x20000054

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b0c:	f7ff fff2 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b10:	0004      	movs	r4, r0
 8002b12:	f7ff fb3f 	bl	8002194 <LL_RCC_GetAPB1Prescaler>
 8002b16:	0003      	movs	r3, r0
 8002b18:	0b1a      	lsrs	r2, r3, #12
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	58d3      	ldr	r3, [r2, r3]
 8002b20:	221f      	movs	r2, #31
 8002b22:	4013      	ands	r3, r2
 8002b24:	40dc      	lsrs	r4, r3
 8002b26:	0023      	movs	r3, r4
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	080060fc 	.word	0x080060fc

08002b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b3c:	2313      	movs	r3, #19
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b44:	2312      	movs	r3, #18
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	4013      	ands	r3, r2
 8002b56:	d100      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b58:	e0a3      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2011      	movs	r0, #17
 8002b5c:	183b      	adds	r3, r7, r0
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4bc3      	ldr	r3, [pc, #780]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	055b      	lsls	r3, r3, #21
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d110      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4bc0      	ldr	r3, [pc, #768]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b72:	4bbf      	ldr	r3, [pc, #764]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0549      	lsls	r1, r1, #21
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b7c:	4bbc      	ldr	r3, [pc, #752]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	055b      	lsls	r3, r3, #21
 8002b84:	4013      	ands	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8a:	183b      	adds	r3, r7, r0
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b90:	4bb8      	ldr	r3, [pc, #736]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4bb7      	ldr	r3, [pc, #732]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0049      	lsls	r1, r1, #1
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fca7 	bl	80014f0 <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe fca2 	bl	80014f0 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d904      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bb6:	2313      	movs	r3, #19
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
        break;
 8002bbe:	e005      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc0:	4bac      	ldr	r3, [pc, #688]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d0ed      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002bcc:	2313      	movs	r3, #19
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d154      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bd6:	4ba6      	ldr	r3, [pc, #664]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bda:	23c0      	movs	r3, #192	; 0xc0
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d019      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bf2:	4b9f      	ldr	r3, [pc, #636]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	4aa0      	ldr	r2, [pc, #640]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bfc:	4b9c      	ldr	r3, [pc, #624]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c00:	4b9b      	ldr	r3, [pc, #620]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	0249      	lsls	r1, r1, #9
 8002c06:	430a      	orrs	r2, r1
 8002c08:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0a:	4b99      	ldr	r3, [pc, #612]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c0e:	4b98      	ldr	r3, [pc, #608]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c10:	499a      	ldr	r1, [pc, #616]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c16:	4b96      	ldr	r3, [pc, #600]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d016      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fc64 	bl	80014f0 <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2c:	e00c      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fc5f 	bl	80014f0 <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	4a91      	ldr	r2, [pc, #580]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d904      	bls.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c3e:	2313      	movs	r3, #19
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2203      	movs	r2, #3
 8002c44:	701a      	strb	r2, [r3, #0]
            break;
 8002c46:	e004      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c48:	4b89      	ldr	r3, [pc, #548]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d0ed      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c52:	2313      	movs	r3, #19
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	4a85      	ldr	r2, [pc, #532]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c70:	e00c      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c72:	2312      	movs	r3, #18
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2213      	movs	r2, #19
 8002c78:	18ba      	adds	r2, r7, r2
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e005      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	2312      	movs	r3, #18
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2213      	movs	r2, #19
 8002c86:	18ba      	adds	r2, r7, r2
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c8c:	2311      	movs	r3, #17
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9a:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c9c:	4979      	ldr	r1, [pc, #484]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cac:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	4393      	bics	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cca:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	220c      	movs	r2, #12
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce8:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	4a66      	ldr	r2, [pc, #408]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	4b5e      	ldr	r3, [pc, #376]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d08:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	4a5f      	ldr	r2, [pc, #380]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4013      	ands	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d28:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	4a58      	ldr	r2, [pc, #352]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2220      	movs	r2, #32
 8002d42:	4013      	ands	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d56:	430a      	orrs	r2, r1
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	01db      	lsls	r3, r3, #7
 8002d62:	4013      	ands	r3, r2
 8002d64:	d015      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d66:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	0899      	lsrs	r1, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	05db      	lsls	r3, r3, #23
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d106      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	0249      	lsls	r1, r1, #9
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	031b      	lsls	r3, r3, #12
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d9e:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	4393      	bics	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dae:	430a      	orrs	r2, r1
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	039b      	lsls	r3, r3, #14
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d016      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	03db      	lsls	r3, r3, #15
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d106      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	0449      	lsls	r1, r1, #17
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	03db      	lsls	r3, r3, #15
 8002df4:	4013      	ands	r3, r2
 8002df6:	d016      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	045b      	lsls	r3, r3, #17
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d106      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0449      	lsls	r1, r1, #17
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d016      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	01db      	lsls	r3, r3, #7
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d106      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0249      	lsls	r1, r1, #9
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e60:	2312      	movs	r3, #18
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	781b      	ldrb	r3, [r3, #0]
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b006      	add	sp, #24
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	fffffcff 	.word	0xfffffcff
 8002e7c:	fffeffff 	.word	0xfffeffff
 8002e80:	00001388 	.word	0x00001388
 8002e84:	efffffff 	.word	0xefffffff
 8002e88:	fffff3ff 	.word	0xfffff3ff
 8002e8c:	fff3ffff 	.word	0xfff3ffff
 8002e90:	ffcfffff 	.word	0xffcfffff
 8002e94:	ffffcfff 	.word	0xffffcfff
 8002e98:	ffbfffff 	.word	0xffbfffff
 8002e9c:	feffffff 	.word	0xfeffffff
 8002ea0:	ffff3fff 	.word	0xffff3fff

08002ea4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ea4:	b5b0      	push	{r4, r5, r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002eac:	230f      	movs	r3, #15
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d100      	bne.n	8002ebc <HAL_RTC_Init+0x18>
 8002eba:	e08c      	b.n	8002fd6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2229      	movs	r2, #41	; 0x29
 8002ec0:	5c9b      	ldrb	r3, [r3, r2]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2228      	movs	r2, #40	; 0x28
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2288      	movs	r2, #136	; 0x88
 8002ed4:	0212      	lsls	r2, r2, #8
 8002ed6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fe f888 	bl	8000ff0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2229      	movs	r2, #41	; 0x29
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2210      	movs	r2, #16
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d062      	beq.n	8002fbc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	22ca      	movs	r2, #202	; 0xca
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2253      	movs	r2, #83	; 0x53
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f06:	250f      	movs	r5, #15
 8002f08:	197c      	adds	r4, r7, r5
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 f9cc 	bl	80032aa <RTC_EnterInitMode>
 8002f12:	0003      	movs	r3, r0
 8002f14:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002f16:	0028      	movs	r0, r5
 8002f18:	183b      	adds	r3, r7, r0
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d12c      	bne.n	8002f7a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	492e      	ldr	r1, [pc, #184]	; (8002fe4 <HAL_RTC_Init+0x140>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6999      	ldr	r1, [r3, #24]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6912      	ldr	r2, [r2, #16]
 8002f56:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	041a      	lsls	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002f6c:	183c      	adds	r4, r7, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f9dd 	bl	8003330 <RTC_ExitInitMode>
 8002f76:	0003      	movs	r3, r0
 8002f78:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002f7a:	230f      	movs	r3, #15
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	00d2      	lsls	r2, r2, #3
 8002f90:	08d2      	lsrs	r2, r2, #3
 8002f92:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6999      	ldr	r1, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	22ff      	movs	r2, #255	; 0xff
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fba:	e003      	b.n	8002fc4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2229      	movs	r2, #41	; 0x29
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002fd6:	230f      	movs	r3, #15
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	781b      	ldrb	r3, [r3, #0]
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b004      	add	sp, #16
 8002fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe4:	fb8fffbf 	.word	0xfb8fffbf

08002fe8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fe8:	b5b0      	push	{r4, r5, r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2228      	movs	r2, #40	; 0x28
 8002ff8:	5c9b      	ldrb	r3, [r3, r2]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_RTC_SetTime+0x1a>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e092      	b.n	8003128 <HAL_RTC_SetTime+0x140>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2228      	movs	r2, #40	; 0x28
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2229      	movs	r2, #41	; 0x29
 800300e:	2102      	movs	r1, #2
 8003010:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	22ca      	movs	r2, #202	; 0xca
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2253      	movs	r2, #83	; 0x53
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003022:	2513      	movs	r5, #19
 8003024:	197c      	adds	r4, r7, r5
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 f93e 	bl	80032aa <RTC_EnterInitMode>
 800302e:	0003      	movs	r3, r0
 8003030:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003032:	197b      	adds	r3, r7, r5
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d162      	bne.n	8003100 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d125      	bne.n	800308c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2240      	movs	r2, #64	; 0x40
 8003048:	4013      	ands	r3, r2
 800304a:	d102      	bne.n	8003052 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f9ae 	bl	80033b8 <RTC_ByteToBcd2>
 800305c:	0003      	movs	r3, r0
 800305e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f9a7 	bl	80033b8 <RTC_ByteToBcd2>
 800306a:	0003      	movs	r3, r0
 800306c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800306e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	789b      	ldrb	r3, [r3, #2]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 f99f 	bl	80033b8 <RTC_ByteToBcd2>
 800307a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800307c:	0022      	movs	r2, r4
 800307e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	78db      	ldrb	r3, [r3, #3]
 8003084:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e017      	b.n	80030bc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	4013      	ands	r3, r2
 8003096:	d102      	bne.n	800309e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2200      	movs	r2, #0
 800309c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	491b      	ldr	r1, [pc, #108]	; (8003130 <HAL_RTC_SetTime+0x148>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4918      	ldr	r1, [pc, #96]	; (8003134 <HAL_RTC_SetTime+0x14c>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030f0:	2313      	movs	r3, #19
 80030f2:	18fc      	adds	r4, r7, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f91a 	bl	8003330 <RTC_ExitInitMode>
 80030fc:	0003      	movs	r3, r0
 80030fe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003108:	2313      	movs	r3, #19
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2229      	movs	r2, #41	; 0x29
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2228      	movs	r2, #40	; 0x28
 800311e:	2100      	movs	r1, #0
 8003120:	5499      	strb	r1, [r3, r2]

  return status;
 8003122:	2313      	movs	r3, #19
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	781b      	ldrb	r3, [r3, #0]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bdb0      	pop	{r4, r5, r7, pc}
 8003130:	007f7f7f 	.word	0x007f7f7f
 8003134:	fffbffff 	.word	0xfffbffff

08003138 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2228      	movs	r2, #40	; 0x28
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_RTC_SetDate+0x1a>
 800314e:	2302      	movs	r3, #2
 8003150:	e07e      	b.n	8003250 <HAL_RTC_SetDate+0x118>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2228      	movs	r2, #40	; 0x28
 8003156:	2101      	movs	r1, #1
 8003158:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2229      	movs	r2, #41	; 0x29
 800315e:	2102      	movs	r1, #2
 8003160:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10e      	bne.n	8003186 <HAL_RTC_SetDate+0x4e>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	001a      	movs	r2, r3
 800316e:	2310      	movs	r3, #16
 8003170:	4013      	ands	r3, r2
 8003172:	d008      	beq.n	8003186 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2210      	movs	r2, #16
 800317a:	4393      	bics	r3, r2
 800317c:	b2db      	uxtb	r3, r3
 800317e:	330a      	adds	r3, #10
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11c      	bne.n	80031c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	78db      	ldrb	r3, [r3, #3]
 8003190:	0018      	movs	r0, r3
 8003192:	f000 f911 	bl	80033b8 <RTC_ByteToBcd2>
 8003196:	0003      	movs	r3, r0
 8003198:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 f90a 	bl	80033b8 <RTC_ByteToBcd2>
 80031a4:	0003      	movs	r3, r0
 80031a6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031a8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	789b      	ldrb	r3, [r3, #2]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f000 f902 	bl	80033b8 <RTC_ByteToBcd2>
 80031b4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031b6:	0022      	movs	r2, r4
 80031b8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e00e      	b.n	80031e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	78db      	ldrb	r3, [r3, #3]
 80031ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	22ca      	movs	r2, #202	; 0xca
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2253      	movs	r2, #83	; 0x53
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031f4:	2513      	movs	r5, #19
 80031f6:	197c      	adds	r4, r7, r5
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f855 	bl	80032aa <RTC_EnterInitMode>
 8003200:	0003      	movs	r3, r0
 8003202:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003204:	0028      	movs	r0, r5
 8003206:	183b      	adds	r3, r7, r0
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4910      	ldr	r1, [pc, #64]	; (8003258 <HAL_RTC_SetDate+0x120>)
 8003216:	400a      	ands	r2, r1
 8003218:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800321a:	183c      	adds	r4, r7, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	0018      	movs	r0, r3
 8003220:	f000 f886 	bl	8003330 <RTC_ExitInitMode>
 8003224:	0003      	movs	r3, r0
 8003226:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003230:	2313      	movs	r3, #19
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2229      	movs	r2, #41	; 0x29
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2228      	movs	r2, #40	; 0x28
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

  return status;
 800324a:	2313      	movs	r3, #19
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	781b      	ldrb	r3, [r3, #0]
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b006      	add	sp, #24
 8003256:	bdb0      	pop	{r4, r5, r7, pc}
 8003258:	00ffff3f 	.word	0x00ffff3f

0800325c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	21a0      	movs	r1, #160	; 0xa0
 8003270:	438a      	bics	r2, r1
 8003272:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003274:	f7fe f93c 	bl	80014f0 <HAL_GetTick>
 8003278:	0003      	movs	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800327c:	e00a      	b.n	8003294 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800327e:	f7fe f937 	bl	80014f0 <HAL_GetTick>
 8003282:	0002      	movs	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	23fa      	movs	r3, #250	; 0xfa
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d901      	bls.n	8003294 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e006      	b.n	80032a2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	4013      	ands	r3, r2
 800329e:	d0ee      	beq.n	800327e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}

080032aa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80032b2:	230f      	movs	r3, #15
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2240      	movs	r2, #64	; 0x40
 80032c2:	4013      	ands	r3, r2
 80032c4:	d12c      	bne.n	8003320 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	430a      	orrs	r2, r1
 80032d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032d6:	f7fe f90b 	bl	80014f0 <HAL_GetTick>
 80032da:	0003      	movs	r3, r0
 80032dc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032de:	e014      	b.n	800330a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80032e0:	f7fe f906 	bl	80014f0 <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad2      	subs	r2, r2, r3
 80032ea:	200f      	movs	r0, #15
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	1839      	adds	r1, r7, r0
 80032f0:	7809      	ldrb	r1, [r1, #0]
 80032f2:	7019      	strb	r1, [r3, #0]
 80032f4:	23fa      	movs	r3, #250	; 0xfa
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d906      	bls.n	800330a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80032fc:	183b      	adds	r3, r7, r0
 80032fe:	2203      	movs	r2, #3
 8003300:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2229      	movs	r2, #41	; 0x29
 8003306:	2103      	movs	r1, #3
 8003308:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2240      	movs	r2, #64	; 0x40
 8003312:	4013      	ands	r3, r2
 8003314:	d104      	bne.n	8003320 <RTC_EnterInitMode+0x76>
 8003316:	230f      	movs	r3, #15
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d1df      	bne.n	80032e0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	240f      	movs	r4, #15
 800333a:	193b      	adds	r3, r7, r4
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <RTC_ExitInitMode+0x84>)
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <RTC_ExitInitMode+0x84>)
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	438a      	bics	r2, r1
 800334a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <RTC_ExitInitMode+0x84>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2220      	movs	r2, #32
 8003352:	4013      	ands	r3, r2
 8003354:	d10d      	bne.n	8003372 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff ff7f 	bl	800325c <HAL_RTC_WaitForSynchro>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d021      	beq.n	80033a6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2229      	movs	r2, #41	; 0x29
 8003366:	2103      	movs	r1, #3
 8003368:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800336a:	193b      	adds	r3, r7, r4
 800336c:	2203      	movs	r2, #3
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e019      	b.n	80033a6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <RTC_ExitInitMode+0x84>)
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <RTC_ExitInitMode+0x84>)
 8003378:	2120      	movs	r1, #32
 800337a:	438a      	bics	r2, r1
 800337c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff ff6b 	bl	800325c <HAL_RTC_WaitForSynchro>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d007      	beq.n	800339a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2229      	movs	r2, #41	; 0x29
 800338e:	2103      	movs	r1, #3
 8003390:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003392:	230f      	movs	r3, #15
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2203      	movs	r2, #3
 8003398:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <RTC_ExitInitMode+0x84>)
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <RTC_ExitInitMode+0x84>)
 80033a0:	2120      	movs	r1, #32
 80033a2:	430a      	orrs	r2, r1
 80033a4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80033a6:	230f      	movs	r3, #15
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b005      	add	sp, #20
 80033b2:	bd90      	pop	{r4, r7, pc}
 80033b4:	40002800 	.word	0x40002800

080033b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	0002      	movs	r2, r0
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80033c8:	230b      	movs	r3, #11
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	1dfa      	adds	r2, r7, #7
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80033d2:	e008      	b.n	80033e6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80033da:	220b      	movs	r2, #11
 80033dc:	18bb      	adds	r3, r7, r2
 80033de:	18ba      	adds	r2, r7, r2
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	3a0a      	subs	r2, #10
 80033e4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80033e6:	210b      	movs	r1, #11
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d8f1      	bhi.n	80033d4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2228      	movs	r2, #40	; 0x28
 8003418:	5c9b      	ldrb	r3, [r3, r2]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800341e:	2302      	movs	r3, #2
 8003420:	e082      	b.n	8003528 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2228      	movs	r2, #40	; 0x28
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2229      	movs	r2, #41	; 0x29
 800342e:	2102      	movs	r1, #2
 8003430:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	22ca      	movs	r2, #202	; 0xca
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2253      	movs	r2, #83	; 0x53
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4938      	ldr	r1, [pc, #224]	; (8003530 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800344e:	400a      	ands	r2, r1
 8003450:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2104      	movs	r1, #4
 800345e:	430a      	orrs	r2, r1
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	4013      	ands	r3, r2
 800346a:	d121      	bne.n	80034b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800346c:	f7fe f840 	bl	80014f0 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003474:	e016      	b.n	80034a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003476:	f7fe f83b 	bl	80014f0 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad2      	subs	r2, r2, r3
 8003480:	23fa      	movs	r3, #250	; 0xfa
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	429a      	cmp	r2, r3
 8003486:	d90d      	bls.n	80034a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2229      	movs	r2, #41	; 0x29
 8003494:	2103      	movs	r1, #3
 8003496:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2228      	movs	r2, #40	; 0x28
 800349c:	2100      	movs	r1, #0
 800349e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e041      	b.n	8003528 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2204      	movs	r2, #4
 80034ac:	4013      	ands	r3, r2
 80034ae:	d0e2      	beq.n	8003476 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2107      	movs	r1, #7
 80034c4:	438a      	bics	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6999      	ldr	r1, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80034d8:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	58d3      	ldr	r3, [r2, r3]
 80034de:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	0312      	lsls	r2, r2, #12
 80034e4:	4313      	orrs	r3, r2
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	01c9      	lsls	r1, r1, #7
 80034f8:	430a      	orrs	r2, r1
 80034fa:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	00c9      	lsls	r1, r1, #3
 800350a:	430a      	orrs	r2, r1
 800350c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	22ff      	movs	r2, #255	; 0xff
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2229      	movs	r2, #41	; 0x29
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2228      	movs	r2, #40	; 0x28
 8003522:	2100      	movs	r1, #0
 8003524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b006      	add	sp, #24
 800352e:	bd80      	pop	{r7, pc}
 8003530:	fffffbff 	.word	0xfffffbff
 8003534:	40002800 	.word	0x40002800
 8003538:	40021800 	.word	0x40021800

0800353c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354a:	2204      	movs	r2, #4
 800354c:	4013      	ands	r3, r2
 800354e:	d00b      	beq.n	8003568 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2104      	movs	r1, #4
 800355c:	430a      	orrs	r2, r1
 800355e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f808 	bl	8003578 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2229      	movs	r2, #41	; 0x29
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]
}
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e04a      	b.n	8003630 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	223d      	movs	r2, #61	; 0x3d
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	223c      	movs	r2, #60	; 0x3c
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7fd fd63 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	223d      	movs	r2, #61	; 0x3d
 80035ba:	2102      	movs	r1, #2
 80035bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	0019      	movs	r1, r3
 80035c8:	0010      	movs	r0, r2
 80035ca:	f000 fa11 	bl	80039f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2248      	movs	r2, #72	; 0x48
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223e      	movs	r2, #62	; 0x3e
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	223f      	movs	r2, #63	; 0x3f
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2241      	movs	r2, #65	; 0x41
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2242      	movs	r2, #66	; 0x42
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2243      	movs	r2, #67	; 0x43
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2244      	movs	r2, #68	; 0x44
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2245      	movs	r2, #69	; 0x45
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2246      	movs	r2, #70	; 0x46
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2247      	movs	r2, #71	; 0x47
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223d      	movs	r2, #61	; 0x3d
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	223d      	movs	r2, #61	; 0x3d
 8003644:	5c9b      	ldrb	r3, [r3, r2]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e042      	b.n	80036d6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	223d      	movs	r2, #61	; 0x3d
 8003654:	2102      	movs	r1, #2
 8003656:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2101      	movs	r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <HAL_TIM_Base_Start_IT+0xa8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00f      	beq.n	8003692 <HAL_TIM_Base_Start_IT+0x5a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	05db      	lsls	r3, r3, #23
 800367a:	429a      	cmp	r2, r3
 800367c:	d009      	beq.n	8003692 <HAL_TIM_Base_Start_IT+0x5a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_TIM_Base_Start_IT+0xac>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIM_Base_Start_IT+0x5a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d116      	bne.n	80036c0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <HAL_TIM_Base_Start_IT+0xb4>)
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d016      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x9a>
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	025b      	lsls	r3, r3, #9
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d011      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	e008      	b.n	80036d2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e000      	b.n	80036d4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40014000 	.word	0x40014000
 80036ec:	00010007 	.word	0x00010007

080036f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2101      	movs	r1, #1
 8003704:	438a      	bics	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <HAL_TIM_Base_Stop_IT+0x54>)
 8003710:	4013      	ands	r3, r2
 8003712:	d10d      	bne.n	8003730 <HAL_TIM_Base_Stop_IT+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <HAL_TIM_Base_Stop_IT+0x58>)
 800371c:	4013      	ands	r3, r2
 800371e:	d107      	bne.n	8003730 <HAL_TIM_Base_Stop_IT+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	438a      	bics	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	223d      	movs	r2, #61	; 0x3d
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	00001111 	.word	0x00001111
 8003748:	00000444 	.word	0x00000444

0800374c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2202      	movs	r2, #2
 800375c:	4013      	ands	r3, r2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d124      	bne.n	80037ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2202      	movs	r2, #2
 800376a:	4013      	ands	r3, r2
 800376c:	2b02      	cmp	r3, #2
 800376e:	d11d      	bne.n	80037ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2203      	movs	r2, #3
 8003776:	4252      	negs	r2, r2
 8003778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2203      	movs	r2, #3
 8003788:	4013      	ands	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	0018      	movs	r0, r3
 8003790:	f000 f916 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 8003794:	e007      	b.n	80037a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f000 f909 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 f915 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2204      	movs	r2, #4
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d125      	bne.n	8003806 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2204      	movs	r2, #4
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11e      	bne.n	8003806 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2205      	movs	r2, #5
 80037ce:	4252      	negs	r2, r2
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	23c0      	movs	r3, #192	; 0xc0
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f8e9 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 80037ee:	e007      	b.n	8003800 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f8dc 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f8e8 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2208      	movs	r2, #8
 800380e:	4013      	ands	r3, r2
 8003810:	2b08      	cmp	r3, #8
 8003812:	d124      	bne.n	800385e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2208      	movs	r2, #8
 800381c:	4013      	ands	r3, r2
 800381e:	2b08      	cmp	r3, #8
 8003820:	d11d      	bne.n	800385e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2209      	movs	r2, #9
 8003828:	4252      	negs	r2, r2
 800382a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2204      	movs	r2, #4
 8003830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2203      	movs	r2, #3
 800383a:	4013      	ands	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f8bd 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 8003846:	e007      	b.n	8003858 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f8b0 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f8bc 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2210      	movs	r2, #16
 8003866:	4013      	ands	r3, r2
 8003868:	2b10      	cmp	r3, #16
 800386a:	d125      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2210      	movs	r2, #16
 8003874:	4013      	ands	r3, r2
 8003876:	2b10      	cmp	r3, #16
 8003878:	d11e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2211      	movs	r2, #17
 8003880:	4252      	negs	r2, r2
 8003882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2208      	movs	r2, #8
 8003888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	23c0      	movs	r3, #192	; 0xc0
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4013      	ands	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 f890 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e007      	b.n	80038b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 f883 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 f88f 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2201      	movs	r2, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d10f      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d108      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2202      	movs	r2, #2
 80038da:	4252      	negs	r2, r2
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7fd fb3f 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b80      	cmp	r3, #128	; 0x80
 80038f2:	d10f      	bne.n	8003914 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d108      	bne.n	8003914 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2281      	movs	r2, #129	; 0x81
 8003908:	4252      	negs	r2, r2
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0018      	movs	r0, r3
 8003910:	f000 f964 	bl	8003bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	401a      	ands	r2, r3
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	429a      	cmp	r2, r3
 8003926:	d10e      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	4013      	ands	r3, r2
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d107      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <HAL_TIM_IRQHandler+0x260>)
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f953 	bl	8003bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2240      	movs	r2, #64	; 0x40
 800394e:	4013      	ands	r3, r2
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d10f      	bne.n	8003974 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	4013      	ands	r3, r2
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d108      	bne.n	8003974 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2241      	movs	r2, #65	; 0x41
 8003968:	4252      	negs	r2, r2
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0018      	movs	r0, r3
 8003970:	f000 f836 	bl	80039e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2220      	movs	r2, #32
 800397c:	4013      	ands	r3, r2
 800397e:	2b20      	cmp	r3, #32
 8003980:	d10f      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	4013      	ands	r3, r2
 800398c:	2b20      	cmp	r3, #32
 800398e:	d108      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2221      	movs	r2, #33	; 0x21
 8003996:	4252      	negs	r2, r2
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 f915 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	fffffeff 	.word	0xfffffeff

080039b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a34      	ldr	r2, [pc, #208]	; (8003ad4 <TIM_Base_SetConfig+0xe4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d008      	beq.n	8003a1a <TIM_Base_SetConfig+0x2a>
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	05db      	lsls	r3, r3, #23
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x2a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <TIM_Base_SetConfig+0xe8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2270      	movs	r2, #112	; 0x70
 8003a1e:	4393      	bics	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a29      	ldr	r2, [pc, #164]	; (8003ad4 <TIM_Base_SetConfig+0xe4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d013      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a25      	ldr	r2, [pc, #148]	; (8003ad8 <TIM_Base_SetConfig+0xe8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a24      	ldr	r2, [pc, #144]	; (8003adc <TIM_Base_SetConfig+0xec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <TIM_Base_SetConfig+0xf0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <TIM_Base_SetConfig+0xf4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <TIM_Base_SetConfig+0xf8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a20      	ldr	r2, [pc, #128]	; (8003aec <TIM_Base_SetConfig+0xfc>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	4393      	bics	r3, r2
 8003a7e:	001a      	movs	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <TIM_Base_SetConfig+0xe4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0xce>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	; (8003ae0 <TIM_Base_SetConfig+0xf0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0xce>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <TIM_Base_SetConfig+0xf4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0xce>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <TIM_Base_SetConfig+0xf8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d103      	bne.n	8003ac6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	615a      	str	r2, [r3, #20]
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b004      	add	sp, #16
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40002000 	.word	0x40002000
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800
 8003aec:	fffffcff 	.word	0xfffffcff

08003af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	223c      	movs	r2, #60	; 0x3c
 8003afe:	5c9b      	ldrb	r3, [r3, r2]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e055      	b.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	223c      	movs	r2, #60	; 0x3c
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	223d      	movs	r2, #61	; 0x3d
 8003b14:	2102      	movs	r1, #2
 8003b16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a23      	ldr	r2, [pc, #140]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2270      	movs	r2, #112	; 0x70
 8003b48:	4393      	bics	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a16      	ldr	r2, [pc, #88]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00f      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	05db      	lsls	r3, r3, #23
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d009      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a11      	ldr	r2, [pc, #68]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10c      	bne.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	4393      	bics	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	223d      	movs	r2, #61	; 0x3d
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	223c      	movs	r2, #60	; 0x3c
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b004      	add	sp, #16
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	ff0fffff 	.word	0xff0fffff
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40014000 	.word	0x40014000

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e046      	b.n	8003c9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2288      	movs	r2, #136	; 0x88
 8003c12:	589b      	ldr	r3, [r3, r2]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2284      	movs	r2, #132	; 0x84
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7fd fa50 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2288      	movs	r2, #136	; 0x88
 8003c2c:	2124      	movs	r1, #36	; 0x24
 8003c2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	438a      	bics	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 fc12 	bl	800446c <UART_SetConfig>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e024      	b.n	8003c9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fec3 	bl	80049e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	490d      	ldr	r1, [pc, #52]	; (8003ca4 <HAL_UART_Init+0xa8>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	212a      	movs	r1, #42	; 0x2a
 8003c7e:	438a      	bics	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f000 ff5b 	bl	8004b50 <UART_CheckIdleState>
 8003c9a:	0003      	movs	r3, r0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	ffffb7ff 	.word	0xffffb7ff

08003ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	1dbb      	adds	r3, r7, #6
 8003cb6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2288      	movs	r2, #136	; 0x88
 8003cbc:	589b      	ldr	r3, [r3, r2]
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d000      	beq.n	8003cc4 <HAL_UART_Transmit+0x1c>
 8003cc2:	e088      	b.n	8003dd6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_UART_Transmit+0x2a>
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e080      	b.n	8003dd8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	015b      	lsls	r3, r3, #5
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d109      	bne.n	8003cf6 <HAL_UART_Transmit+0x4e>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d001      	beq.n	8003cf6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e070      	b.n	8003dd8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2290      	movs	r2, #144	; 0x90
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2288      	movs	r2, #136	; 0x88
 8003d02:	2121      	movs	r1, #33	; 0x21
 8003d04:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d06:	f7fd fbf3 	bl	80014f0 <HAL_GetTick>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1dba      	adds	r2, r7, #6
 8003d12:	2154      	movs	r1, #84	; 0x54
 8003d14:	8812      	ldrh	r2, [r2, #0]
 8003d16:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1dba      	adds	r2, r7, #6
 8003d1c:	2156      	movs	r1, #86	; 0x56
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	015b      	lsls	r3, r3, #5
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d108      	bne.n	8003d40 <HAL_UART_Transmit+0x98>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e003      	b.n	8003d48 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d48:	e02c      	b.n	8003da4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	0013      	movs	r3, r2
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	f000 ff48 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e039      	b.n	8003dd8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	001a      	movs	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	05d2      	lsls	r2, r2, #23
 8003d76:	0dd2      	lsrs	r2, r2, #23
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e007      	b.n	8003d92 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	781a      	ldrb	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2256      	movs	r2, #86	; 0x56
 8003d96:	5a9b      	ldrh	r3, [r3, r2]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b299      	uxth	r1, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2256      	movs	r2, #86	; 0x56
 8003da2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2256      	movs	r2, #86	; 0x56
 8003da8:	5a9b      	ldrh	r3, [r3, r2]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1cc      	bne.n	8003d4a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	0013      	movs	r3, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2140      	movs	r1, #64	; 0x40
 8003dbe:	f000 ff15 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e006      	b.n	8003dd8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2288      	movs	r2, #136	; 0x88
 8003dce:	2120      	movs	r1, #32
 8003dd0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b008      	add	sp, #32
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b0aa      	sub	sp, #168	; 0xa8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	22a4      	movs	r2, #164	; 0xa4
 8003df0:	18b9      	adds	r1, r7, r2
 8003df2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	20a0      	movs	r0, #160	; 0xa0
 8003dfc:	1839      	adds	r1, r7, r0
 8003dfe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	249c      	movs	r4, #156	; 0x9c
 8003e08:	1939      	adds	r1, r7, r4
 8003e0a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	18bb      	adds	r3, r7, r2
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4aa2      	ldr	r2, [pc, #648]	; (800409c <HAL_UART_IRQHandler+0x2bc>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	2298      	movs	r2, #152	; 0x98
 8003e18:	18bd      	adds	r5, r7, r2
 8003e1a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003e1c:	18bb      	adds	r3, r7, r2
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11a      	bne.n	8003e5a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d015      	beq.n	8003e5a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e2e:	183b      	adds	r3, r7, r0
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2220      	movs	r2, #32
 8003e34:	4013      	ands	r3, r2
 8003e36:	d105      	bne.n	8003e44 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e38:	193b      	adds	r3, r7, r4
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	055b      	lsls	r3, r3, #21
 8003e40:	4013      	ands	r3, r2
 8003e42:	d00a      	beq.n	8003e5a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d100      	bne.n	8003e4e <HAL_UART_IRQHandler+0x6e>
 8003e4c:	e2dc      	b.n	8004408 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	0010      	movs	r0, r2
 8003e56:	4798      	blx	r3
      }
      return;
 8003e58:	e2d6      	b.n	8004408 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e5a:	2398      	movs	r3, #152	; 0x98
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d100      	bne.n	8003e66 <HAL_UART_IRQHandler+0x86>
 8003e64:	e122      	b.n	80040ac <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e66:	239c      	movs	r3, #156	; 0x9c
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a8c      	ldr	r2, [pc, #560]	; (80040a0 <HAL_UART_IRQHandler+0x2c0>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d106      	bne.n	8003e80 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e72:	23a0      	movs	r3, #160	; 0xa0
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a8a      	ldr	r2, [pc, #552]	; (80040a4 <HAL_UART_IRQHandler+0x2c4>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d100      	bne.n	8003e80 <HAL_UART_IRQHandler+0xa0>
 8003e7e:	e115      	b.n	80040ac <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e80:	23a4      	movs	r3, #164	; 0xa4
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2201      	movs	r2, #1
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d012      	beq.n	8003eb2 <HAL_UART_IRQHandler+0xd2>
 8003e8c:	23a0      	movs	r3, #160	; 0xa0
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4013      	ands	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2290      	movs	r2, #144	; 0x90
 8003ea6:	589b      	ldr	r3, [r3, r2]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2190      	movs	r1, #144	; 0x90
 8003eb0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eb2:	23a4      	movs	r3, #164	; 0xa4
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d011      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x102>
 8003ebe:	239c      	movs	r3, #156	; 0x9c
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2290      	movs	r2, #144	; 0x90
 8003ed6:	589b      	ldr	r3, [r3, r2]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2190      	movs	r1, #144	; 0x90
 8003ee0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ee2:	23a4      	movs	r3, #164	; 0xa4
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	4013      	ands	r3, r2
 8003eec:	d011      	beq.n	8003f12 <HAL_UART_IRQHandler+0x132>
 8003eee:	239c      	movs	r3, #156	; 0x9c
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2204      	movs	r2, #4
 8003f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2290      	movs	r2, #144	; 0x90
 8003f06:	589b      	ldr	r3, [r3, r2]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2190      	movs	r1, #144	; 0x90
 8003f10:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f12:	23a4      	movs	r3, #164	; 0xa4
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d017      	beq.n	8003f4e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f1e:	23a0      	movs	r3, #160	; 0xa0
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2220      	movs	r2, #32
 8003f26:	4013      	ands	r3, r2
 8003f28:	d105      	bne.n	8003f36 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f2a:	239c      	movs	r3, #156	; 0x9c
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <HAL_UART_IRQHandler+0x2c0>)
 8003f32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f34:	d00b      	beq.n	8003f4e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2290      	movs	r2, #144	; 0x90
 8003f42:	589b      	ldr	r3, [r3, r2]
 8003f44:	2208      	movs	r2, #8
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2190      	movs	r1, #144	; 0x90
 8003f4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f4e:	23a4      	movs	r3, #164	; 0xa4
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_UART_IRQHandler+0x1a4>
 8003f5c:	23a0      	movs	r3, #160	; 0xa0
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	04db      	lsls	r3, r3, #19
 8003f66:	4013      	ands	r3, r2
 8003f68:	d00c      	beq.n	8003f84 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2290      	movs	r2, #144	; 0x90
 8003f78:	589b      	ldr	r3, [r3, r2]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2190      	movs	r1, #144	; 0x90
 8003f82:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2290      	movs	r2, #144	; 0x90
 8003f88:	589b      	ldr	r3, [r3, r2]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d100      	bne.n	8003f90 <HAL_UART_IRQHandler+0x1b0>
 8003f8e:	e23d      	b.n	800440c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f90:	23a4      	movs	r3, #164	; 0xa4
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2220      	movs	r2, #32
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d015      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f9c:	23a0      	movs	r3, #160	; 0xa0
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fa8:	239c      	movs	r3, #156	; 0x9c
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	055b      	lsls	r3, r3, #21
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d008      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	0010      	movs	r0, r2
 8003fc6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2290      	movs	r2, #144	; 0x90
 8003fcc:	589b      	ldr	r3, [r3, r2]
 8003fce:	2194      	movs	r1, #148	; 0x94
 8003fd0:	187a      	adds	r2, r7, r1
 8003fd2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2240      	movs	r2, #64	; 0x40
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d004      	beq.n	8003fec <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2228      	movs	r2, #40	; 0x28
 8003fe8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fea:	d04c      	beq.n	8004086 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 ffaa 	bl	8004f48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2240      	movs	r2, #64	; 0x40
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d13c      	bne.n	800407c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004002:	f3ef 8310 	mrs	r3, PRIMASK
 8004006:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	2090      	movs	r0, #144	; 0x90
 800400c:	183a      	adds	r2, r7, r0
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	2301      	movs	r3, #1
 8004012:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2140      	movs	r1, #64	; 0x40
 8004028:	438a      	bics	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	183b      	adds	r3, r7, r0
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004034:	f383 8810 	msr	PRIMASK, r3
}
 8004038:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	589b      	ldr	r3, [r3, r2]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d016      	beq.n	8004072 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	589b      	ldr	r3, [r3, r2]
 800404a:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <HAL_UART_IRQHandler+0x2c8>)
 800404c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2280      	movs	r2, #128	; 0x80
 8004052:	589b      	ldr	r3, [r3, r2]
 8004054:	0018      	movs	r0, r3
 8004056:	f7fd fcc9 	bl	80019ec <HAL_DMA_Abort_IT>
 800405a:	1e03      	subs	r3, r0, #0
 800405c:	d01c      	beq.n	8004098 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	589b      	ldr	r3, [r3, r2]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	5852      	ldr	r2, [r2, r1]
 800406c:	0010      	movs	r0, r2
 800406e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e012      	b.n	8004098 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f9f1 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407a:	e00d      	b.n	8004098 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0018      	movs	r0, r3
 8004080:	f000 f9ec 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	e008      	b.n	8004098 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f000 f9e7 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2290      	movs	r2, #144	; 0x90
 8004092:	2100      	movs	r1, #0
 8004094:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004096:	e1b9      	b.n	800440c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	46c0      	nop			; (mov r8, r8)
    return;
 800409a:	e1b7      	b.n	800440c <HAL_UART_IRQHandler+0x62c>
 800409c:	0000080f 	.word	0x0000080f
 80040a0:	10000001 	.word	0x10000001
 80040a4:	04000120 	.word	0x04000120
 80040a8:	0800520d 	.word	0x0800520d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d000      	beq.n	80040b6 <HAL_UART_IRQHandler+0x2d6>
 80040b4:	e13e      	b.n	8004334 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040b6:	23a4      	movs	r3, #164	; 0xa4
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2210      	movs	r2, #16
 80040be:	4013      	ands	r3, r2
 80040c0:	d100      	bne.n	80040c4 <HAL_UART_IRQHandler+0x2e4>
 80040c2:	e137      	b.n	8004334 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040c4:	23a0      	movs	r3, #160	; 0xa0
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2210      	movs	r2, #16
 80040cc:	4013      	ands	r3, r2
 80040ce:	d100      	bne.n	80040d2 <HAL_UART_IRQHandler+0x2f2>
 80040d0:	e130      	b.n	8004334 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2210      	movs	r2, #16
 80040d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2240      	movs	r2, #64	; 0x40
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d000      	beq.n	80040ea <HAL_UART_IRQHandler+0x30a>
 80040e8:	e0a4      	b.n	8004234 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	589b      	ldr	r3, [r3, r2]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	217e      	movs	r1, #126	; 0x7e
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d100      	bne.n	8004104 <HAL_UART_IRQHandler+0x324>
 8004102:	e185      	b.n	8004410 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	225c      	movs	r2, #92	; 0x5c
 8004108:	5a9b      	ldrh	r3, [r3, r2]
 800410a:	187a      	adds	r2, r7, r1
 800410c:	8812      	ldrh	r2, [r2, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d300      	bcc.n	8004114 <HAL_UART_IRQHandler+0x334>
 8004112:	e17d      	b.n	8004410 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	187a      	adds	r2, r7, r1
 8004118:	215e      	movs	r1, #94	; 0x5e
 800411a:	8812      	ldrh	r2, [r2, #0]
 800411c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	589b      	ldr	r3, [r3, r2]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2220      	movs	r2, #32
 800412a:	4013      	ands	r3, r2
 800412c:	d170      	bne.n	8004210 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004136:	67bb      	str	r3, [r7, #120]	; 0x78
 8004138:	2301      	movs	r3, #1
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	49b4      	ldr	r1, [pc, #720]	; (8004420 <HAL_UART_IRQHandler+0x640>)
 8004150:	400a      	ands	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004156:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004160:	f3ef 8310 	mrs	r3, PRIMASK
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	677b      	str	r3, [r7, #116]	; 0x74
 800416a:	2301      	movs	r3, #1
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004170:	f383 8810 	msr	PRIMASK, r3
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2101      	movs	r1, #1
 8004182:	438a      	bics	r2, r1
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004188:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004198:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419a:	673b      	str	r3, [r7, #112]	; 0x70
 800419c:	2301      	movs	r3, #1
 800419e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2140      	movs	r1, #64	; 0x40
 80041b4:	438a      	bics	r2, r1
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	228c      	movs	r2, #140	; 0x8c
 80041c8:	2120      	movs	r1, #32
 80041ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d2:	f3ef 8310 	mrs	r3, PRIMASK
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80041d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041dc:	2301      	movs	r3, #1
 80041de:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e2:	f383 8810 	msr	PRIMASK, r3
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2110      	movs	r1, #16
 80041f4:	438a      	bics	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041fe:	f383 8810 	msr	PRIMASK, r3
}
 8004202:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	589b      	ldr	r3, [r3, r2]
 800420a:	0018      	movs	r0, r3
 800420c:	f7fd fb8c 	bl	8001928 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	225c      	movs	r2, #92	; 0x5c
 800421a:	5a9a      	ldrh	r2, [r3, r2]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	215e      	movs	r1, #94	; 0x5e
 8004220:	5a5b      	ldrh	r3, [r3, r1]
 8004222:	b29b      	uxth	r3, r3
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0011      	movs	r1, r2
 800422c:	0018      	movs	r0, r3
 800422e:	f7fc fdaf 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004232:	e0ed      	b.n	8004410 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	225c      	movs	r2, #92	; 0x5c
 8004238:	5a99      	ldrh	r1, [r3, r2]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	225e      	movs	r2, #94	; 0x5e
 800423e:	5a9b      	ldrh	r3, [r3, r2]
 8004240:	b29a      	uxth	r2, r3
 8004242:	208e      	movs	r0, #142	; 0x8e
 8004244:	183b      	adds	r3, r7, r0
 8004246:	1a8a      	subs	r2, r1, r2
 8004248:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	225e      	movs	r2, #94	; 0x5e
 800424e:	5a9b      	ldrh	r3, [r3, r2]
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d100      	bne.n	8004258 <HAL_UART_IRQHandler+0x478>
 8004256:	e0dd      	b.n	8004414 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004258:	183b      	adds	r3, r7, r0
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d100      	bne.n	8004262 <HAL_UART_IRQHandler+0x482>
 8004260:	e0d8      	b.n	8004414 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004262:	f3ef 8310 	mrs	r3, PRIMASK
 8004266:	60fb      	str	r3, [r7, #12]
  return(result);
 8004268:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800426a:	2488      	movs	r4, #136	; 0x88
 800426c:	193a      	adds	r2, r7, r4
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	2301      	movs	r3, #1
 8004272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f383 8810 	msr	PRIMASK, r3
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4967      	ldr	r1, [pc, #412]	; (8004424 <HAL_UART_IRQHandler+0x644>)
 8004288:	400a      	ands	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	193b      	adds	r3, r7, r4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f383 8810 	msr	PRIMASK, r3
}
 8004298:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429a:	f3ef 8310 	mrs	r3, PRIMASK
 800429e:	61bb      	str	r3, [r7, #24]
  return(result);
 80042a0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a2:	2484      	movs	r4, #132	; 0x84
 80042a4:	193a      	adds	r2, r7, r4
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	2301      	movs	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	495a      	ldr	r1, [pc, #360]	; (8004428 <HAL_UART_IRQHandler+0x648>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	228c      	movs	r2, #140	; 0x8c
 80042d6:	2120      	movs	r1, #32
 80042d8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ee:	2480      	movs	r4, #128	; 0x80
 80042f0:	193a      	adds	r2, r7, r4
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	2301      	movs	r3, #1
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	f383 8810 	msr	PRIMASK, r3
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2110      	movs	r1, #16
 800430c:	438a      	bics	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	193b      	adds	r3, r7, r4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004324:	183b      	adds	r3, r7, r0
 8004326:	881a      	ldrh	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0011      	movs	r1, r2
 800432c:	0018      	movs	r0, r3
 800432e:	f7fc fd2f 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004332:	e06f      	b.n	8004414 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004334:	23a4      	movs	r3, #164	; 0xa4
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	035b      	lsls	r3, r3, #13
 800433e:	4013      	ands	r3, r2
 8004340:	d010      	beq.n	8004364 <HAL_UART_IRQHandler+0x584>
 8004342:	239c      	movs	r3, #156	; 0x9c
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	03db      	lsls	r3, r3, #15
 800434c:	4013      	ands	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2280      	movs	r2, #128	; 0x80
 8004356:	0352      	lsls	r2, r2, #13
 8004358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0018      	movs	r0, r3
 800435e:	f000 ff98 	bl	8005292 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004362:	e05a      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004364:	23a4      	movs	r3, #164	; 0xa4
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	4013      	ands	r3, r2
 800436e:	d016      	beq.n	800439e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004370:	23a0      	movs	r3, #160	; 0xa0
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	4013      	ands	r3, r2
 800437a:	d106      	bne.n	800438a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800437c:	239c      	movs	r3, #156	; 0x9c
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	4013      	ands	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438e:	2b00      	cmp	r3, #0
 8004390:	d042      	beq.n	8004418 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	0010      	movs	r0, r2
 800439a:	4798      	blx	r3
    }
    return;
 800439c:	e03c      	b.n	8004418 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800439e:	23a4      	movs	r3, #164	; 0xa4
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	4013      	ands	r3, r2
 80043a8:	d00a      	beq.n	80043c0 <HAL_UART_IRQHandler+0x5e0>
 80043aa:	23a0      	movs	r3, #160	; 0xa0
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2240      	movs	r2, #64	; 0x40
 80043b2:	4013      	ands	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 ff3e 	bl	800523a <UART_EndTransmit_IT>
    return;
 80043be:	e02c      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043c0:	23a4      	movs	r3, #164	; 0xa4
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	4013      	ands	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0x606>
 80043ce:	23a0      	movs	r3, #160	; 0xa0
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	05db      	lsls	r3, r3, #23
 80043d8:	4013      	ands	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 ff67 	bl	80052b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043e4:	e019      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043e6:	23a4      	movs	r3, #164	; 0xa4
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	045b      	lsls	r3, r3, #17
 80043f0:	4013      	ands	r3, r2
 80043f2:	d012      	beq.n	800441a <HAL_UART_IRQHandler+0x63a>
 80043f4:	23a0      	movs	r3, #160	; 0xa0
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da0d      	bge.n	800441a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	0018      	movs	r0, r3
 8004402:	f000 ff4e 	bl	80052a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004406:	e008      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
      return;
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	e006      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
    return;
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	e004      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
      return;
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	e002      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
      return;
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	e000      	b.n	800441a <HAL_UART_IRQHandler+0x63a>
    return;
 8004418:	46c0      	nop			; (mov r8, r8)
  }
}
 800441a:	46bd      	mov	sp, r7
 800441c:	b02a      	add	sp, #168	; 0xa8
 800441e:	bdb0      	pop	{r4, r5, r7, pc}
 8004420:	fffffeff 	.word	0xfffffeff
 8004424:	fffffedf 	.word	0xfffffedf
 8004428:	effffffe 	.word	0xeffffffe

0800442c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b002      	add	sp, #8
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b002      	add	sp, #8
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	b5b0      	push	{r4, r5, r7, lr}
 800446e:	b090      	sub	sp, #64	; 0x40
 8004470:	af00      	add	r7, sp, #0
 8004472:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004474:	231a      	movs	r3, #26
 8004476:	2220      	movs	r2, #32
 8004478:	189b      	adds	r3, r3, r2
 800447a:	19db      	adds	r3, r3, r7
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	431a      	orrs	r2, r3
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	431a      	orrs	r2, r3
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4313      	orrs	r3, r2
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4aaf      	ldr	r2, [pc, #700]	; (800475c <UART_SetConfig+0x2f0>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4aaa      	ldr	r2, [pc, #680]	; (8004760 <UART_SetConfig+0x2f4>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	0018      	movs	r0, r3
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	0003      	movs	r3, r0
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4aa4      	ldr	r2, [pc, #656]	; (8004764 <UART_SetConfig+0x2f8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044de:	4313      	orrs	r3, r2
 80044e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a9f      	ldr	r2, [pc, #636]	; (8004768 <UART_SetConfig+0x2fc>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	220f      	movs	r2, #15
 8004500:	4393      	bics	r3, r2
 8004502:	0018      	movs	r0, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	0003      	movs	r3, r0
 800450e:	430b      	orrs	r3, r1
 8004510:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a95      	ldr	r2, [pc, #596]	; (800476c <UART_SetConfig+0x300>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d131      	bne.n	8004580 <UART_SetConfig+0x114>
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <UART_SetConfig+0x304>)
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	2203      	movs	r2, #3
 8004522:	4013      	ands	r3, r2
 8004524:	2b03      	cmp	r3, #3
 8004526:	d01d      	beq.n	8004564 <UART_SetConfig+0xf8>
 8004528:	d823      	bhi.n	8004572 <UART_SetConfig+0x106>
 800452a:	2b02      	cmp	r3, #2
 800452c:	d00c      	beq.n	8004548 <UART_SetConfig+0xdc>
 800452e:	d820      	bhi.n	8004572 <UART_SetConfig+0x106>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <UART_SetConfig+0xce>
 8004534:	2b01      	cmp	r3, #1
 8004536:	d00e      	beq.n	8004556 <UART_SetConfig+0xea>
 8004538:	e01b      	b.n	8004572 <UART_SetConfig+0x106>
 800453a:	231b      	movs	r3, #27
 800453c:	2220      	movs	r2, #32
 800453e:	189b      	adds	r3, r3, r2
 8004540:	19db      	adds	r3, r3, r7
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	e0b4      	b.n	80046b2 <UART_SetConfig+0x246>
 8004548:	231b      	movs	r3, #27
 800454a:	2220      	movs	r2, #32
 800454c:	189b      	adds	r3, r3, r2
 800454e:	19db      	adds	r3, r3, r7
 8004550:	2202      	movs	r2, #2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	e0ad      	b.n	80046b2 <UART_SetConfig+0x246>
 8004556:	231b      	movs	r3, #27
 8004558:	2220      	movs	r2, #32
 800455a:	189b      	adds	r3, r3, r2
 800455c:	19db      	adds	r3, r3, r7
 800455e:	2204      	movs	r2, #4
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e0a6      	b.n	80046b2 <UART_SetConfig+0x246>
 8004564:	231b      	movs	r3, #27
 8004566:	2220      	movs	r2, #32
 8004568:	189b      	adds	r3, r3, r2
 800456a:	19db      	adds	r3, r3, r7
 800456c:	2208      	movs	r2, #8
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e09f      	b.n	80046b2 <UART_SetConfig+0x246>
 8004572:	231b      	movs	r3, #27
 8004574:	2220      	movs	r2, #32
 8004576:	189b      	adds	r3, r3, r2
 8004578:	19db      	adds	r3, r3, r7
 800457a:	2210      	movs	r2, #16
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e098      	b.n	80046b2 <UART_SetConfig+0x246>
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a7b      	ldr	r2, [pc, #492]	; (8004774 <UART_SetConfig+0x308>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d131      	bne.n	80045ee <UART_SetConfig+0x182>
 800458a:	4b79      	ldr	r3, [pc, #484]	; (8004770 <UART_SetConfig+0x304>)
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	220c      	movs	r2, #12
 8004590:	4013      	ands	r3, r2
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d01d      	beq.n	80045d2 <UART_SetConfig+0x166>
 8004596:	d823      	bhi.n	80045e0 <UART_SetConfig+0x174>
 8004598:	2b08      	cmp	r3, #8
 800459a:	d00c      	beq.n	80045b6 <UART_SetConfig+0x14a>
 800459c:	d820      	bhi.n	80045e0 <UART_SetConfig+0x174>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <UART_SetConfig+0x13c>
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d00e      	beq.n	80045c4 <UART_SetConfig+0x158>
 80045a6:	e01b      	b.n	80045e0 <UART_SetConfig+0x174>
 80045a8:	231b      	movs	r3, #27
 80045aa:	2220      	movs	r2, #32
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	19db      	adds	r3, r3, r7
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e07d      	b.n	80046b2 <UART_SetConfig+0x246>
 80045b6:	231b      	movs	r3, #27
 80045b8:	2220      	movs	r2, #32
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	19db      	adds	r3, r3, r7
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e076      	b.n	80046b2 <UART_SetConfig+0x246>
 80045c4:	231b      	movs	r3, #27
 80045c6:	2220      	movs	r2, #32
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	2204      	movs	r2, #4
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e06f      	b.n	80046b2 <UART_SetConfig+0x246>
 80045d2:	231b      	movs	r3, #27
 80045d4:	2220      	movs	r2, #32
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	2208      	movs	r2, #8
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e068      	b.n	80046b2 <UART_SetConfig+0x246>
 80045e0:	231b      	movs	r3, #27
 80045e2:	2220      	movs	r2, #32
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	2210      	movs	r2, #16
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e061      	b.n	80046b2 <UART_SetConfig+0x246>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a61      	ldr	r2, [pc, #388]	; (8004778 <UART_SetConfig+0x30c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d106      	bne.n	8004606 <UART_SetConfig+0x19a>
 80045f8:	231b      	movs	r3, #27
 80045fa:	2220      	movs	r2, #32
 80045fc:	189b      	adds	r3, r3, r2
 80045fe:	19db      	adds	r3, r3, r7
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e055      	b.n	80046b2 <UART_SetConfig+0x246>
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a5c      	ldr	r2, [pc, #368]	; (800477c <UART_SetConfig+0x310>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d106      	bne.n	800461e <UART_SetConfig+0x1b2>
 8004610:	231b      	movs	r3, #27
 8004612:	2220      	movs	r2, #32
 8004614:	189b      	adds	r3, r3, r2
 8004616:	19db      	adds	r3, r3, r7
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	e049      	b.n	80046b2 <UART_SetConfig+0x246>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a50      	ldr	r2, [pc, #320]	; (8004764 <UART_SetConfig+0x2f8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d13e      	bne.n	80046a6 <UART_SetConfig+0x23a>
 8004628:	4b51      	ldr	r3, [pc, #324]	; (8004770 <UART_SetConfig+0x304>)
 800462a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800462c:	23c0      	movs	r3, #192	; 0xc0
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	4013      	ands	r3, r2
 8004632:	22c0      	movs	r2, #192	; 0xc0
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	4293      	cmp	r3, r2
 8004638:	d027      	beq.n	800468a <UART_SetConfig+0x21e>
 800463a:	22c0      	movs	r2, #192	; 0xc0
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	4293      	cmp	r3, r2
 8004640:	d82a      	bhi.n	8004698 <UART_SetConfig+0x22c>
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	4293      	cmp	r3, r2
 8004648:	d011      	beq.n	800466e <UART_SetConfig+0x202>
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	0112      	lsls	r2, r2, #4
 800464e:	4293      	cmp	r3, r2
 8004650:	d822      	bhi.n	8004698 <UART_SetConfig+0x22c>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <UART_SetConfig+0x1f4>
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	00d2      	lsls	r2, r2, #3
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <UART_SetConfig+0x210>
 800465e:	e01b      	b.n	8004698 <UART_SetConfig+0x22c>
 8004660:	231b      	movs	r3, #27
 8004662:	2220      	movs	r2, #32
 8004664:	189b      	adds	r3, r3, r2
 8004666:	19db      	adds	r3, r3, r7
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e021      	b.n	80046b2 <UART_SetConfig+0x246>
 800466e:	231b      	movs	r3, #27
 8004670:	2220      	movs	r2, #32
 8004672:	189b      	adds	r3, r3, r2
 8004674:	19db      	adds	r3, r3, r7
 8004676:	2202      	movs	r2, #2
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e01a      	b.n	80046b2 <UART_SetConfig+0x246>
 800467c:	231b      	movs	r3, #27
 800467e:	2220      	movs	r2, #32
 8004680:	189b      	adds	r3, r3, r2
 8004682:	19db      	adds	r3, r3, r7
 8004684:	2204      	movs	r2, #4
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e013      	b.n	80046b2 <UART_SetConfig+0x246>
 800468a:	231b      	movs	r3, #27
 800468c:	2220      	movs	r2, #32
 800468e:	189b      	adds	r3, r3, r2
 8004690:	19db      	adds	r3, r3, r7
 8004692:	2208      	movs	r2, #8
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e00c      	b.n	80046b2 <UART_SetConfig+0x246>
 8004698:	231b      	movs	r3, #27
 800469a:	2220      	movs	r2, #32
 800469c:	189b      	adds	r3, r3, r2
 800469e:	19db      	adds	r3, r3, r7
 80046a0:	2210      	movs	r2, #16
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e005      	b.n	80046b2 <UART_SetConfig+0x246>
 80046a6:	231b      	movs	r3, #27
 80046a8:	2220      	movs	r2, #32
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	19db      	adds	r3, r3, r7
 80046ae:	2210      	movs	r2, #16
 80046b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <UART_SetConfig+0x2f8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d000      	beq.n	80046be <UART_SetConfig+0x252>
 80046bc:	e0a9      	b.n	8004812 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046be:	231b      	movs	r3, #27
 80046c0:	2220      	movs	r2, #32
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	19db      	adds	r3, r3, r7
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d015      	beq.n	80046f8 <UART_SetConfig+0x28c>
 80046cc:	dc18      	bgt.n	8004700 <UART_SetConfig+0x294>
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d00d      	beq.n	80046ee <UART_SetConfig+0x282>
 80046d2:	dc15      	bgt.n	8004700 <UART_SetConfig+0x294>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <UART_SetConfig+0x272>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d005      	beq.n	80046e8 <UART_SetConfig+0x27c>
 80046dc:	e010      	b.n	8004700 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046de:	f7fe fa13 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80046e2:	0003      	movs	r3, r0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046e6:	e014      	b.n	8004712 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <UART_SetConfig+0x314>)
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046ec:	e011      	b.n	8004712 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ee:	f7fe f97f 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80046f2:	0003      	movs	r3, r0
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046f6:	e00c      	b.n	8004712 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046fe:	e008      	b.n	8004712 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004704:	231a      	movs	r3, #26
 8004706:	2220      	movs	r2, #32
 8004708:	189b      	adds	r3, r3, r2
 800470a:	19db      	adds	r3, r3, r7
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
        break;
 8004710:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d100      	bne.n	800471a <UART_SetConfig+0x2ae>
 8004718:	e14b      	b.n	80049b2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800471e:	4b19      	ldr	r3, [pc, #100]	; (8004784 <UART_SetConfig+0x318>)
 8004720:	0052      	lsls	r2, r2, #1
 8004722:	5ad3      	ldrh	r3, [r2, r3]
 8004724:	0019      	movs	r1, r3
 8004726:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004728:	f7fb fcfe 	bl	8000128 <__udivsi3>
 800472c:	0003      	movs	r3, r0
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	0013      	movs	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	189b      	adds	r3, r3, r2
 800473a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473c:	429a      	cmp	r2, r3
 800473e:	d305      	bcc.n	800474c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004748:	429a      	cmp	r2, r3
 800474a:	d91d      	bls.n	8004788 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800474c:	231a      	movs	r3, #26
 800474e:	2220      	movs	r2, #32
 8004750:	189b      	adds	r3, r3, r2
 8004752:	19db      	adds	r3, r3, r7
 8004754:	2201      	movs	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e12b      	b.n	80049b2 <UART_SetConfig+0x546>
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	cfff69f3 	.word	0xcfff69f3
 8004760:	ffffcfff 	.word	0xffffcfff
 8004764:	40008000 	.word	0x40008000
 8004768:	11fff4ff 	.word	0x11fff4ff
 800476c:	40013800 	.word	0x40013800
 8004770:	40021000 	.word	0x40021000
 8004774:	40004400 	.word	0x40004400
 8004778:	40004800 	.word	0x40004800
 800477c:	40004c00 	.word	0x40004c00
 8004780:	00f42400 	.word	0x00f42400
 8004784:	0800611c 	.word	0x0800611c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004794:	4b92      	ldr	r3, [pc, #584]	; (80049e0 <UART_SetConfig+0x574>)
 8004796:	0052      	lsls	r2, r2, #1
 8004798:	5ad3      	ldrh	r3, [r2, r3]
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	69b8      	ldr	r0, [r7, #24]
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	f7fb fe34 	bl	8000414 <__aeabi_uldivmod>
 80047ac:	0002      	movs	r2, r0
 80047ae:	000b      	movs	r3, r1
 80047b0:	0e11      	lsrs	r1, r2, #24
 80047b2:	021d      	lsls	r5, r3, #8
 80047b4:	430d      	orrs	r5, r1
 80047b6:	0214      	lsls	r4, r2, #8
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68b8      	ldr	r0, [r7, #8]
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	1900      	adds	r0, r0, r4
 80047ca:	4169      	adcs	r1, r5
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f7fb fe1b 	bl	8000414 <__aeabi_uldivmod>
 80047de:	0002      	movs	r2, r0
 80047e0:	000b      	movs	r3, r1
 80047e2:	0013      	movs	r3, r2
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e8:	23c0      	movs	r3, #192	; 0xc0
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d309      	bcc.n	8004804 <UART_SetConfig+0x398>
 80047f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	035b      	lsls	r3, r3, #13
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d204      	bcs.n	8004804 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	e0d6      	b.n	80049b2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004804:	231a      	movs	r3, #26
 8004806:	2220      	movs	r2, #32
 8004808:	189b      	adds	r3, r3, r2
 800480a:	19db      	adds	r3, r3, r7
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e0cf      	b.n	80049b2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	429a      	cmp	r2, r3
 800481c:	d000      	beq.n	8004820 <UART_SetConfig+0x3b4>
 800481e:	e070      	b.n	8004902 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004820:	231b      	movs	r3, #27
 8004822:	2220      	movs	r2, #32
 8004824:	189b      	adds	r3, r3, r2
 8004826:	19db      	adds	r3, r3, r7
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b08      	cmp	r3, #8
 800482c:	d015      	beq.n	800485a <UART_SetConfig+0x3ee>
 800482e:	dc18      	bgt.n	8004862 <UART_SetConfig+0x3f6>
 8004830:	2b04      	cmp	r3, #4
 8004832:	d00d      	beq.n	8004850 <UART_SetConfig+0x3e4>
 8004834:	dc15      	bgt.n	8004862 <UART_SetConfig+0x3f6>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <UART_SetConfig+0x3d4>
 800483a:	2b02      	cmp	r3, #2
 800483c:	d005      	beq.n	800484a <UART_SetConfig+0x3de>
 800483e:	e010      	b.n	8004862 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7fe f962 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8004844:	0003      	movs	r3, r0
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004848:	e014      	b.n	8004874 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484a:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <UART_SetConfig+0x578>)
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800484e:	e011      	b.n	8004874 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004850:	f7fe f8ce 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8004854:	0003      	movs	r3, r0
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004858:	e00c      	b.n	8004874 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004860:	e008      	b.n	8004874 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004866:	231a      	movs	r3, #26
 8004868:	2220      	movs	r2, #32
 800486a:	189b      	adds	r3, r3, r2
 800486c:	19db      	adds	r3, r3, r7
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
        break;
 8004872:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	2b00      	cmp	r3, #0
 8004878:	d100      	bne.n	800487c <UART_SetConfig+0x410>
 800487a:	e09a      	b.n	80049b2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004880:	4b57      	ldr	r3, [pc, #348]	; (80049e0 <UART_SetConfig+0x574>)
 8004882:	0052      	lsls	r2, r2, #1
 8004884:	5ad3      	ldrh	r3, [r2, r3]
 8004886:	0019      	movs	r1, r3
 8004888:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800488a:	f7fb fc4d 	bl	8000128 <__udivsi3>
 800488e:	0003      	movs	r3, r0
 8004890:	005a      	lsls	r2, r3, #1
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	18d2      	adds	r2, r2, r3
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	0019      	movs	r1, r3
 80048a0:	0010      	movs	r0, r2
 80048a2:	f7fb fc41 	bl	8000128 <__udivsi3>
 80048a6:	0003      	movs	r3, r0
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d921      	bls.n	80048f4 <UART_SetConfig+0x488>
 80048b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	025b      	lsls	r3, r3, #9
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d21c      	bcs.n	80048f4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	b29a      	uxth	r2, r3
 80048be:	200e      	movs	r0, #14
 80048c0:	2420      	movs	r4, #32
 80048c2:	1903      	adds	r3, r0, r4
 80048c4:	19db      	adds	r3, r3, r7
 80048c6:	210f      	movs	r1, #15
 80048c8:	438a      	bics	r2, r1
 80048ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2207      	movs	r2, #7
 80048d4:	4013      	ands	r3, r2
 80048d6:	b299      	uxth	r1, r3
 80048d8:	1903      	adds	r3, r0, r4
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	1902      	adds	r2, r0, r4
 80048de:	19d2      	adds	r2, r2, r7
 80048e0:	8812      	ldrh	r2, [r2, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	1902      	adds	r2, r0, r4
 80048ec:	19d2      	adds	r2, r2, r7
 80048ee:	8812      	ldrh	r2, [r2, #0]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	e05e      	b.n	80049b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048f4:	231a      	movs	r3, #26
 80048f6:	2220      	movs	r2, #32
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	19db      	adds	r3, r3, r7
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e057      	b.n	80049b2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004902:	231b      	movs	r3, #27
 8004904:	2220      	movs	r2, #32
 8004906:	189b      	adds	r3, r3, r2
 8004908:	19db      	adds	r3, r3, r7
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d015      	beq.n	800493c <UART_SetConfig+0x4d0>
 8004910:	dc18      	bgt.n	8004944 <UART_SetConfig+0x4d8>
 8004912:	2b04      	cmp	r3, #4
 8004914:	d00d      	beq.n	8004932 <UART_SetConfig+0x4c6>
 8004916:	dc15      	bgt.n	8004944 <UART_SetConfig+0x4d8>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <UART_SetConfig+0x4b6>
 800491c:	2b02      	cmp	r3, #2
 800491e:	d005      	beq.n	800492c <UART_SetConfig+0x4c0>
 8004920:	e010      	b.n	8004944 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004922:	f7fe f8f1 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8004926:	0003      	movs	r3, r0
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800492a:	e014      	b.n	8004956 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <UART_SetConfig+0x578>)
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004930:	e011      	b.n	8004956 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fe f85d 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8004936:	0003      	movs	r3, r0
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800493a:	e00c      	b.n	8004956 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004942:	e008      	b.n	8004956 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004948:	231a      	movs	r3, #26
 800494a:	2220      	movs	r2, #32
 800494c:	189b      	adds	r3, r3, r2
 800494e:	19db      	adds	r3, r3, r7
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
        break;
 8004954:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02a      	beq.n	80049b2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004960:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <UART_SetConfig+0x574>)
 8004962:	0052      	lsls	r2, r2, #1
 8004964:	5ad3      	ldrh	r3, [r2, r3]
 8004966:	0019      	movs	r1, r3
 8004968:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800496a:	f7fb fbdd 	bl	8000128 <__udivsi3>
 800496e:	0003      	movs	r3, r0
 8004970:	001a      	movs	r2, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	18d2      	adds	r2, r2, r3
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	0019      	movs	r1, r3
 8004980:	0010      	movs	r0, r2
 8004982:	f7fb fbd1 	bl	8000128 <__udivsi3>
 8004986:	0003      	movs	r3, r0
 8004988:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d90a      	bls.n	80049a6 <UART_SetConfig+0x53a>
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	025b      	lsls	r3, r3, #9
 8004996:	429a      	cmp	r2, r3
 8004998:	d205      	bcs.n	80049a6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	b29a      	uxth	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80049a6:	231a      	movs	r3, #26
 80049a8:	2220      	movs	r2, #32
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	19db      	adds	r3, r3, r7
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	226a      	movs	r2, #106	; 0x6a
 80049b6:	2101      	movs	r1, #1
 80049b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2268      	movs	r2, #104	; 0x68
 80049be:	2101      	movs	r1, #1
 80049c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	2200      	movs	r2, #0
 80049c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	2200      	movs	r2, #0
 80049cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049ce:	231a      	movs	r3, #26
 80049d0:	2220      	movs	r2, #32
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	19db      	adds	r3, r3, r7
 80049d6:	781b      	ldrb	r3, [r3, #0]
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b010      	add	sp, #64	; 0x40
 80049de:	bdb0      	pop	{r4, r5, r7, pc}
 80049e0:	0800611c 	.word	0x0800611c
 80049e4:	00f42400 	.word	0x00f42400

080049e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	2201      	movs	r2, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a4a      	ldr	r2, [pc, #296]	; (8004b2c <UART_AdvFeatureConfig+0x144>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	2202      	movs	r2, #2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4a43      	ldr	r2, [pc, #268]	; (8004b30 <UART_AdvFeatureConfig+0x148>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	0019      	movs	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	2204      	movs	r2, #4
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d00b      	beq.n	8004a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a3b      	ldr	r2, [pc, #236]	; (8004b34 <UART_AdvFeatureConfig+0x14c>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	0019      	movs	r1, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4a34      	ldr	r2, [pc, #208]	; (8004b38 <UART_AdvFeatureConfig+0x150>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	2210      	movs	r2, #16
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <UART_AdvFeatureConfig+0x154>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	4a25      	ldr	r2, [pc, #148]	; (8004b40 <UART_AdvFeatureConfig+0x158>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	2240      	movs	r2, #64	; 0x40
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d01d      	beq.n	8004b02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <UART_AdvFeatureConfig+0x15c>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	035b      	lsls	r3, r3, #13
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d10b      	bne.n	8004b02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <UART_AdvFeatureConfig+0x160>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	2280      	movs	r2, #128	; 0x80
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <UART_AdvFeatureConfig+0x164>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b002      	add	sp, #8
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	fffdffff 	.word	0xfffdffff
 8004b30:	fffeffff 	.word	0xfffeffff
 8004b34:	fffbffff 	.word	0xfffbffff
 8004b38:	ffff7fff 	.word	0xffff7fff
 8004b3c:	ffffefff 	.word	0xffffefff
 8004b40:	ffffdfff 	.word	0xffffdfff
 8004b44:	ffefffff 	.word	0xffefffff
 8004b48:	ff9fffff 	.word	0xff9fffff
 8004b4c:	fff7ffff 	.word	0xfff7ffff

08004b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2290      	movs	r2, #144	; 0x90
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b60:	f7fc fcc6 	bl	80014f0 <HAL_GetTick>
 8004b64:	0003      	movs	r3, r0
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2208      	movs	r2, #8
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d10c      	bne.n	8004b90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	0391      	lsls	r1, r2, #14
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <UART_CheckIdleState+0x98>)
 8004b80:	9200      	str	r2, [sp, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f000 f832 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8004b88:	1e03      	subs	r3, r0, #0
 8004b8a:	d001      	beq.n	8004b90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e026      	b.n	8004bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2204      	movs	r2, #4
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d10c      	bne.n	8004bb8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	03d1      	lsls	r1, r2, #15
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <UART_CheckIdleState+0x98>)
 8004ba8:	9200      	str	r2, [sp, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f000 f81e 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8004bb0:	1e03      	subs	r3, r0, #0
 8004bb2:	d001      	beq.n	8004bb8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e012      	b.n	8004bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2288      	movs	r2, #136	; 0x88
 8004bbc:	2120      	movs	r1, #32
 8004bbe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	228c      	movs	r2, #140	; 0x8c
 8004bc4:	2120      	movs	r1, #32
 8004bc6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2284      	movs	r2, #132	; 0x84
 8004bd8:	2100      	movs	r1, #0
 8004bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b004      	add	sp, #16
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	01ffffff 	.word	0x01ffffff

08004bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b094      	sub	sp, #80	; 0x50
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfc:	e0a7      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c00:	3301      	adds	r3, #1
 8004c02:	d100      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004c04:	e0a3      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7fc fc73 	bl	80014f0 <HAL_GetTick>
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d302      	bcc.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d13f      	bne.n	8004c9c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
 8004c26:	2301      	movs	r3, #1
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	494e      	ldr	r1, [pc, #312]	; (8004d78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004c3e:	400a      	ands	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	f383 8810 	msr	PRIMASK, r3
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
 8004c58:	2301      	movs	r3, #1
 8004c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	438a      	bics	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2288      	movs	r2, #136	; 0x88
 8004c84:	2120      	movs	r1, #32
 8004c86:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	228c      	movs	r2, #140	; 0x8c
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2284      	movs	r2, #132	; 0x84
 8004c94:	2100      	movs	r1, #0
 8004c96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e069      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d052      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d148      	bne.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2280      	movs	r2, #128	; 0x80
 8004cc2:	0112      	lsls	r2, r2, #4
 8004cc4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cca:	613b      	str	r3, [r7, #16]
  return(result);
 8004ccc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f383 8810 	msr	PRIMASK, r3
}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4924      	ldr	r1, [pc, #144]	; (8004d78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004ce8:	400a      	ands	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d02:	2301      	movs	r3, #1
 8004d04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f383 8810 	msr	PRIMASK, r3
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2101      	movs	r1, #1
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	f383 8810 	msr	PRIMASK, r3
}
 8004d28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2288      	movs	r2, #136	; 0x88
 8004d2e:	2120      	movs	r1, #32
 8004d30:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	228c      	movs	r2, #140	; 0x8c
 8004d36:	2120      	movs	r1, #32
 8004d38:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2290      	movs	r2, #144	; 0x90
 8004d3e:	2120      	movs	r1, #32
 8004d40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2284      	movs	r2, #132	; 0x84
 8004d46:	2100      	movs	r1, #0
 8004d48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e010      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	425a      	negs	r2, r3
 8004d5e:	4153      	adcs	r3, r2
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	001a      	movs	r2, r3
 8004d64:	1dfb      	adds	r3, r7, #7
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d100      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x182>
 8004d6c:	e747      	b.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b014      	add	sp, #80	; 0x50
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	fffffe5f 	.word	0xfffffe5f

08004d7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b090      	sub	sp, #64	; 0x40
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	1dbb      	adds	r3, r7, #6
 8004d88:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1dba      	adds	r2, r7, #6
 8004d94:	215c      	movs	r1, #92	; 0x5c
 8004d96:	8812      	ldrh	r2, [r2, #0]
 8004d98:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2290      	movs	r2, #144	; 0x90
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	228c      	movs	r2, #140	; 0x8c
 8004da6:	2122      	movs	r1, #34	; 0x22
 8004da8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2280      	movs	r2, #128	; 0x80
 8004dae:	589b      	ldr	r3, [r3, r2]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02d      	beq.n	8004e10 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	589b      	ldr	r3, [r3, r2]
 8004dba:	4a40      	ldr	r2, [pc, #256]	; (8004ebc <UART_Start_Receive_DMA+0x140>)
 8004dbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2280      	movs	r2, #128	; 0x80
 8004dc2:	589b      	ldr	r3, [r3, r2]
 8004dc4:	4a3e      	ldr	r2, [pc, #248]	; (8004ec0 <UART_Start_Receive_DMA+0x144>)
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2280      	movs	r2, #128	; 0x80
 8004dcc:	589b      	ldr	r3, [r3, r2]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <UART_Start_Receive_DMA+0x148>)
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2280      	movs	r2, #128	; 0x80
 8004dd6:	589b      	ldr	r3, [r3, r2]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	5898      	ldr	r0, [r3, r2]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3324      	adds	r3, #36	; 0x24
 8004de8:	0019      	movs	r1, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dee:	001a      	movs	r2, r3
 8004df0:	1dbb      	adds	r3, r7, #6
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	f7fc fd12 	bl	800181c <HAL_DMA_Start_IT>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d009      	beq.n	8004e10 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2290      	movs	r2, #144	; 0x90
 8004e00:	2110      	movs	r1, #16
 8004e02:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	228c      	movs	r2, #140	; 0x8c
 8004e08:	2120      	movs	r1, #32
 8004e0a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e050      	b.n	8004eb2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d019      	beq.n	8004e4c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e18:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e22:	2301      	movs	r3, #1
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	0049      	lsls	r1, r1, #1
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e42:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	f383 8810 	msr	PRIMASK, r3
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e50:	613b      	str	r3, [r7, #16]
  return(result);
 8004e52:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e56:	2301      	movs	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f383 8810 	msr	PRIMASK, r3
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e82:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e84:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
 8004e88:	2301      	movs	r3, #1
 8004e8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2140      	movs	r1, #64	; 0x40
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b010      	add	sp, #64	; 0x40
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	08005015 	.word	0x08005015
 8004ec0:	08005145 	.word	0x08005145
 8004ec4:	08005187 	.word	0x08005187

08004ec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	2301      	movs	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f383 8810 	msr	PRIMASK, r3
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	21c0      	movs	r1, #192	; 0xc0
 8004ef2:	438a      	bics	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f383 8810 	msr	PRIMASK, r3
}
 8004f00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f02:	f3ef 8310 	mrs	r3, PRIMASK
 8004f06:	617b      	str	r3, [r7, #20]
  return(result);
 8004f08:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f383 8810 	msr	PRIMASK, r3
}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4908      	ldr	r1, [pc, #32]	; (8004f44 <UART_EndTxTransfer+0x7c>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f383 8810 	msr	PRIMASK, r3
}
 8004f32:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2288      	movs	r2, #136	; 0x88
 8004f38:	2120      	movs	r1, #32
 8004f3a:	5099      	str	r1, [r3, r2]
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b00a      	add	sp, #40	; 0x28
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	ff7fffff 	.word	0xff7fffff

08004f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08e      	sub	sp, #56	; 0x38
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f50:	f3ef 8310 	mrs	r3, PRIMASK
 8004f54:	617b      	str	r3, [r7, #20]
  return(result);
 8004f56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f383 8810 	msr	PRIMASK, r3
}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4926      	ldr	r1, [pc, #152]	; (800500c <UART_EndRxTransfer+0xc4>)
 8004f72:	400a      	ands	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f383 8810 	msr	PRIMASK, r3
}
 8004f80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f82:	f3ef 8310 	mrs	r3, PRIMASK
 8004f86:	623b      	str	r3, [r7, #32]
  return(result);
 8004f88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	f383 8810 	msr	PRIMASK, r3
}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	491b      	ldr	r1, [pc, #108]	; (8005010 <UART_EndRxTransfer+0xc8>)
 8004fa4:	400a      	ands	r2, r1
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	f383 8810 	msr	PRIMASK, r3
}
 8004fb2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d118      	bne.n	8004fee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f383 8810 	msr	PRIMASK, r3
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2110      	movs	r1, #16
 8004fde:	438a      	bics	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	228c      	movs	r2, #140	; 0x8c
 8004ff2:	2120      	movs	r1, #32
 8004ff4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b00e      	add	sp, #56	; 0x38
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	fffffedf 	.word	0xfffffedf
 8005010:	effffffe 	.word	0xeffffffe

08005014 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b094      	sub	sp, #80	; 0x50
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2220      	movs	r2, #32
 800502a:	4013      	ands	r3, r2
 800502c:	d16f      	bne.n	800510e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800502e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005030:	225e      	movs	r2, #94	; 0x5e
 8005032:	2100      	movs	r1, #0
 8005034:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	61bb      	str	r3, [r7, #24]
  return(result);
 800503c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005040:	2301      	movs	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f383 8810 	msr	PRIMASK, r3
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	493a      	ldr	r1, [pc, #232]	; (8005140 <UART_DMAReceiveCplt+0x12c>)
 8005058:	400a      	ands	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	647b      	str	r3, [r7, #68]	; 0x44
 8005072:	2301      	movs	r3, #1
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2101      	movs	r1, #1
 800508a:	438a      	bics	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
 800508e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509a:	f3ef 8310 	mrs	r3, PRIMASK
 800509e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40
 80050a4:	2301      	movs	r3, #1
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2140      	movs	r1, #64	; 0x40
 80050bc:	438a      	bics	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	f383 8810 	msr	PRIMASK, r3
}
 80050ca:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ce:	228c      	movs	r2, #140	; 0x8c
 80050d0:	2120      	movs	r1, #32
 80050d2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d118      	bne.n	800510e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050dc:	f3ef 8310 	mrs	r3, PRIMASK
 80050e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050e2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e6:	2301      	movs	r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2110      	movs	r1, #16
 80050fe:	438a      	bics	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f383 8810 	msr	PRIMASK, r3
}
 800510c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005110:	2200      	movs	r2, #0
 8005112:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d108      	bne.n	800512e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511e:	225c      	movs	r2, #92	; 0x5c
 8005120:	5a9a      	ldrh	r2, [r3, r2]
 8005122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005124:	0011      	movs	r1, r2
 8005126:	0018      	movs	r0, r3
 8005128:	f7fb fe32 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800512c:	e003      	b.n	8005136 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800512e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff f983 	bl	800443c <HAL_UART_RxCpltCallback>
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b014      	add	sp, #80	; 0x50
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	fffffeff 	.word	0xfffffeff

08005144 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10a      	bne.n	8005176 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	225c      	movs	r2, #92	; 0x5c
 8005164:	5a9b      	ldrh	r3, [r3, r2]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	0011      	movs	r1, r2
 800516e:	0018      	movs	r0, r3
 8005170:	f7fb fe0e 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005174:	e003      	b.n	800517e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	0018      	movs	r0, r3
 800517a:	f7ff f967 	bl	800444c <HAL_UART_RxHalfCpltCallback>
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b004      	add	sp, #16
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2288      	movs	r2, #136	; 0x88
 8005198:	589b      	ldr	r3, [r3, r2]
 800519a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	228c      	movs	r2, #140	; 0x8c
 80051a0:	589b      	ldr	r3, [r3, r2]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b80      	cmp	r3, #128	; 0x80
 80051b0:	d10a      	bne.n	80051c8 <UART_DMAError+0x42>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b21      	cmp	r3, #33	; 0x21
 80051b6:	d107      	bne.n	80051c8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2256      	movs	r2, #86	; 0x56
 80051bc:	2100      	movs	r1, #0
 80051be:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7ff fe80 	bl	8004ec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2240      	movs	r2, #64	; 0x40
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d10a      	bne.n	80051ec <UART_DMAError+0x66>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b22      	cmp	r3, #34	; 0x22
 80051da:	d107      	bne.n	80051ec <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	225e      	movs	r2, #94	; 0x5e
 80051e0:	2100      	movs	r1, #0
 80051e2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f7ff feae 	bl	8004f48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2290      	movs	r2, #144	; 0x90
 80051f0:	589b      	ldr	r3, [r3, r2]
 80051f2:	2210      	movs	r2, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2190      	movs	r1, #144	; 0x90
 80051fa:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff f92c 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b006      	add	sp, #24
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	225e      	movs	r2, #94	; 0x5e
 800521e:	2100      	movs	r1, #0
 8005220:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2256      	movs	r2, #86	; 0x56
 8005226:	2100      	movs	r1, #0
 8005228:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	0018      	movs	r0, r3
 800522e:	f7ff f915 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	46bd      	mov	sp, r7
 8005236:	b004      	add	sp, #16
 8005238:	bd80      	pop	{r7, pc}

0800523a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005242:	f3ef 8310 	mrs	r3, PRIMASK
 8005246:	60bb      	str	r3, [r7, #8]
  return(result);
 8005248:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	2301      	movs	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f383 8810 	msr	PRIMASK, r3
}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2140      	movs	r1, #64	; 0x40
 8005264:	438a      	bics	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f383 8810 	msr	PRIMASK, r3
}
 8005272:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2288      	movs	r2, #136	; 0x88
 8005278:	2120      	movs	r1, #32
 800527a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f7ff f8d1 	bl	800442c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b006      	add	sp, #24
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b002      	add	sp, #8
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b002      	add	sp, #8
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b002      	add	sp, #8
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2284      	movs	r2, #132	; 0x84
 80052d0:	5c9b      	ldrb	r3, [r3, r2]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_UARTEx_DisableFifoMode+0x16>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e027      	b.n	800532a <HAL_UARTEx_DisableFifoMode+0x66>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2284      	movs	r2, #132	; 0x84
 80052de:	2101      	movs	r1, #1
 80052e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2288      	movs	r2, #136	; 0x88
 80052e6:	2124      	movs	r1, #36	; 0x24
 80052e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2101      	movs	r1, #1
 80052fe:	438a      	bics	r2, r1
 8005300:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a0b      	ldr	r2, [pc, #44]	; (8005334 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005306:	4013      	ands	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2288      	movs	r2, #136	; 0x88
 800531c:	2120      	movs	r1, #32
 800531e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2284      	movs	r2, #132	; 0x84
 8005324:	2100      	movs	r1, #0
 8005326:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	0018      	movs	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	b004      	add	sp, #16
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	dfffffff 	.word	0xdfffffff

08005338 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2284      	movs	r2, #132	; 0x84
 8005346:	5c9b      	ldrb	r3, [r3, r2]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800534c:	2302      	movs	r3, #2
 800534e:	e02e      	b.n	80053ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2284      	movs	r2, #132	; 0x84
 8005354:	2101      	movs	r1, #1
 8005356:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2288      	movs	r2, #136	; 0x88
 800535c:	2124      	movs	r1, #36	; 0x24
 800535e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2101      	movs	r1, #1
 8005374:	438a      	bics	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	08d9      	lsrs	r1, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	0018      	movs	r0, r3
 8005390:	f000 f8bc 	bl	800550c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2288      	movs	r2, #136	; 0x88
 80053a0:	2120      	movs	r1, #32
 80053a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2284      	movs	r2, #132	; 0x84
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2284      	movs	r2, #132	; 0x84
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e02f      	b.n	8005430 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2284      	movs	r2, #132	; 0x84
 80053d4:	2101      	movs	r1, #1
 80053d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2288      	movs	r2, #136	; 0x88
 80053dc:	2124      	movs	r1, #36	; 0x24
 80053de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2101      	movs	r1, #1
 80053f4:	438a      	bics	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005400:	4013      	ands	r3, r2
 8005402:	0019      	movs	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 f87b 	bl	800550c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2288      	movs	r2, #136	; 0x88
 8005422:	2120      	movs	r1, #32
 8005424:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2284      	movs	r2, #132	; 0x84
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	b004      	add	sp, #16
 8005436:	bd80      	pop	{r7, pc}
 8005438:	f1ffffff 	.word	0xf1ffffff

0800543c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	1dbb      	adds	r3, r7, #6
 8005448:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	228c      	movs	r2, #140	; 0x8c
 800544e:	589b      	ldr	r3, [r3, r2]
 8005450:	2b20      	cmp	r3, #32
 8005452:	d156      	bne.n	8005502 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800545a:	1dbb      	adds	r3, r7, #6
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e04e      	b.n	8005504 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	015b      	lsls	r3, r3, #5
 800546e:	429a      	cmp	r2, r3
 8005470:	d109      	bne.n	8005486 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2201      	movs	r2, #1
 800547e:	4013      	ands	r3, r2
 8005480:	d001      	beq.n	8005486 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e03e      	b.n	8005504 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005492:	2527      	movs	r5, #39	; 0x27
 8005494:	197c      	adds	r4, r7, r5
 8005496:	1dbb      	adds	r3, r7, #6
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	0018      	movs	r0, r3
 80054a0:	f7ff fc6c 	bl	8004d7c <UART_Start_Receive_DMA>
 80054a4:	0003      	movs	r3, r0
 80054a6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80054a8:	197b      	adds	r3, r7, r5
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d124      	bne.n	80054fa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d11c      	bne.n	80054f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c0:	f3ef 8310 	mrs	r3, PRIMASK
 80054c4:	617b      	str	r3, [r7, #20]
  return(result);
 80054c6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	2301      	movs	r3, #1
 80054cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f383 8810 	msr	PRIMASK, r3
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2110      	movs	r1, #16
 80054e2:	430a      	orrs	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f383 8810 	msr	PRIMASK, r3
}
 80054f0:	e003      	b.n	80054fa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80054f2:	2327      	movs	r3, #39	; 0x27
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80054fa:	2327      	movs	r3, #39	; 0x27
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	e000      	b.n	8005504 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b00a      	add	sp, #40	; 0x28
 800550a:	bdb0      	pop	{r4, r5, r7, pc}

0800550c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005518:	2b00      	cmp	r3, #0
 800551a:	d108      	bne.n	800552e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	226a      	movs	r2, #106	; 0x6a
 8005520:	2101      	movs	r1, #1
 8005522:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2268      	movs	r2, #104	; 0x68
 8005528:	2101      	movs	r1, #1
 800552a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800552c:	e043      	b.n	80055b6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800552e:	260f      	movs	r6, #15
 8005530:	19bb      	adds	r3, r7, r6
 8005532:	2208      	movs	r2, #8
 8005534:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005536:	200e      	movs	r0, #14
 8005538:	183b      	adds	r3, r7, r0
 800553a:	2208      	movs	r2, #8
 800553c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	0e5b      	lsrs	r3, r3, #25
 8005546:	b2da      	uxtb	r2, r3
 8005548:	240d      	movs	r4, #13
 800554a:	193b      	adds	r3, r7, r4
 800554c:	2107      	movs	r1, #7
 800554e:	400a      	ands	r2, r1
 8005550:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	0f5b      	lsrs	r3, r3, #29
 800555a:	b2da      	uxtb	r2, r3
 800555c:	250c      	movs	r5, #12
 800555e:	197b      	adds	r3, r7, r5
 8005560:	2107      	movs	r1, #7
 8005562:	400a      	ands	r2, r1
 8005564:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005566:	183b      	adds	r3, r7, r0
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	197a      	adds	r2, r7, r5
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	4914      	ldr	r1, [pc, #80]	; (80055c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005570:	5c8a      	ldrb	r2, [r1, r2]
 8005572:	435a      	muls	r2, r3
 8005574:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005576:	197b      	adds	r3, r7, r5
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <UARTEx_SetNbDataToProcess+0xb8>)
 800557c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800557e:	0019      	movs	r1, r3
 8005580:	f7fa fe5c 	bl	800023c <__divsi3>
 8005584:	0003      	movs	r3, r0
 8005586:	b299      	uxth	r1, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	226a      	movs	r2, #106	; 0x6a
 800558c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800558e:	19bb      	adds	r3, r7, r6
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	193a      	adds	r2, r7, r4
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	490a      	ldr	r1, [pc, #40]	; (80055c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005598:	5c8a      	ldrb	r2, [r1, r2]
 800559a:	435a      	muls	r2, r3
 800559c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800559e:	193b      	adds	r3, r7, r4
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <UARTEx_SetNbDataToProcess+0xb8>)
 80055a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055a6:	0019      	movs	r1, r3
 80055a8:	f7fa fe48 	bl	800023c <__divsi3>
 80055ac:	0003      	movs	r3, r0
 80055ae:	b299      	uxth	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2268      	movs	r2, #104	; 0x68
 80055b4:	5299      	strh	r1, [r3, r2]
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b005      	add	sp, #20
 80055bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	08006134 	.word	0x08006134
 80055c4:	0800613c 	.word	0x0800613c

080055c8 <__errno>:
 80055c8:	4b01      	ldr	r3, [pc, #4]	; (80055d0 <__errno+0x8>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	4770      	bx	lr
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	20000060 	.word	0x20000060

080055d4 <__libc_init_array>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	2600      	movs	r6, #0
 80055d8:	4d0c      	ldr	r5, [pc, #48]	; (800560c <__libc_init_array+0x38>)
 80055da:	4c0d      	ldr	r4, [pc, #52]	; (8005610 <__libc_init_array+0x3c>)
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	42a6      	cmp	r6, r4
 80055e2:	d109      	bne.n	80055f8 <__libc_init_array+0x24>
 80055e4:	2600      	movs	r6, #0
 80055e6:	f000 fc9d 	bl	8005f24 <_init>
 80055ea:	4d0a      	ldr	r5, [pc, #40]	; (8005614 <__libc_init_array+0x40>)
 80055ec:	4c0a      	ldr	r4, [pc, #40]	; (8005618 <__libc_init_array+0x44>)
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	42a6      	cmp	r6, r4
 80055f4:	d105      	bne.n	8005602 <__libc_init_array+0x2e>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	00b3      	lsls	r3, r6, #2
 80055fa:	58eb      	ldr	r3, [r5, r3]
 80055fc:	4798      	blx	r3
 80055fe:	3601      	adds	r6, #1
 8005600:	e7ee      	b.n	80055e0 <__libc_init_array+0xc>
 8005602:	00b3      	lsls	r3, r6, #2
 8005604:	58eb      	ldr	r3, [r5, r3]
 8005606:	4798      	blx	r3
 8005608:	3601      	adds	r6, #1
 800560a:	e7f2      	b.n	80055f2 <__libc_init_array+0x1e>
 800560c:	08006180 	.word	0x08006180
 8005610:	08006180 	.word	0x08006180
 8005614:	08006180 	.word	0x08006180
 8005618:	08006184 	.word	0x08006184

0800561c <memset>:
 800561c:	0003      	movs	r3, r0
 800561e:	1882      	adds	r2, r0, r2
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	7019      	strb	r1, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <siprintf>:
 800562c:	b40e      	push	{r1, r2, r3}
 800562e:	b500      	push	{lr}
 8005630:	490b      	ldr	r1, [pc, #44]	; (8005660 <siprintf+0x34>)
 8005632:	b09c      	sub	sp, #112	; 0x70
 8005634:	ab1d      	add	r3, sp, #116	; 0x74
 8005636:	9002      	str	r0, [sp, #8]
 8005638:	9006      	str	r0, [sp, #24]
 800563a:	9107      	str	r1, [sp, #28]
 800563c:	9104      	str	r1, [sp, #16]
 800563e:	4809      	ldr	r0, [pc, #36]	; (8005664 <siprintf+0x38>)
 8005640:	4909      	ldr	r1, [pc, #36]	; (8005668 <siprintf+0x3c>)
 8005642:	cb04      	ldmia	r3!, {r2}
 8005644:	9105      	str	r1, [sp, #20]
 8005646:	6800      	ldr	r0, [r0, #0]
 8005648:	a902      	add	r1, sp, #8
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	f000 f882 	bl	8005754 <_svfiprintf_r>
 8005650:	2300      	movs	r3, #0
 8005652:	9a02      	ldr	r2, [sp, #8]
 8005654:	7013      	strb	r3, [r2, #0]
 8005656:	b01c      	add	sp, #112	; 0x70
 8005658:	bc08      	pop	{r3}
 800565a:	b003      	add	sp, #12
 800565c:	4718      	bx	r3
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	7fffffff 	.word	0x7fffffff
 8005664:	20000060 	.word	0x20000060
 8005668:	ffff0208 	.word	0xffff0208

0800566c <strncmp>:
 800566c:	b530      	push	{r4, r5, lr}
 800566e:	0005      	movs	r5, r0
 8005670:	1e10      	subs	r0, r2, #0
 8005672:	d008      	beq.n	8005686 <strncmp+0x1a>
 8005674:	2400      	movs	r4, #0
 8005676:	3a01      	subs	r2, #1
 8005678:	5d2b      	ldrb	r3, [r5, r4]
 800567a:	5d08      	ldrb	r0, [r1, r4]
 800567c:	4283      	cmp	r3, r0
 800567e:	d101      	bne.n	8005684 <strncmp+0x18>
 8005680:	4294      	cmp	r4, r2
 8005682:	d101      	bne.n	8005688 <strncmp+0x1c>
 8005684:	1a18      	subs	r0, r3, r0
 8005686:	bd30      	pop	{r4, r5, pc}
 8005688:	3401      	adds	r4, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f4      	bne.n	8005678 <strncmp+0xc>
 800568e:	e7f9      	b.n	8005684 <strncmp+0x18>

08005690 <__ssputs_r>:
 8005690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005692:	688e      	ldr	r6, [r1, #8]
 8005694:	b085      	sub	sp, #20
 8005696:	0007      	movs	r7, r0
 8005698:	000c      	movs	r4, r1
 800569a:	9203      	str	r2, [sp, #12]
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	429e      	cmp	r6, r3
 80056a0:	d83c      	bhi.n	800571c <__ssputs_r+0x8c>
 80056a2:	2390      	movs	r3, #144	; 0x90
 80056a4:	898a      	ldrh	r2, [r1, #12]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	421a      	tst	r2, r3
 80056aa:	d034      	beq.n	8005716 <__ssputs_r+0x86>
 80056ac:	6909      	ldr	r1, [r1, #16]
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	6960      	ldr	r0, [r4, #20]
 80056b2:	1a5b      	subs	r3, r3, r1
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	2303      	movs	r3, #3
 80056b8:	4343      	muls	r3, r0
 80056ba:	0fdd      	lsrs	r5, r3, #31
 80056bc:	18ed      	adds	r5, r5, r3
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	9802      	ldr	r0, [sp, #8]
 80056c2:	3301      	adds	r3, #1
 80056c4:	181b      	adds	r3, r3, r0
 80056c6:	106d      	asrs	r5, r5, #1
 80056c8:	42ab      	cmp	r3, r5
 80056ca:	d900      	bls.n	80056ce <__ssputs_r+0x3e>
 80056cc:	001d      	movs	r5, r3
 80056ce:	0553      	lsls	r3, r2, #21
 80056d0:	d532      	bpl.n	8005738 <__ssputs_r+0xa8>
 80056d2:	0029      	movs	r1, r5
 80056d4:	0038      	movs	r0, r7
 80056d6:	f000 fb53 	bl	8005d80 <_malloc_r>
 80056da:	1e06      	subs	r6, r0, #0
 80056dc:	d109      	bne.n	80056f2 <__ssputs_r+0x62>
 80056de:	230c      	movs	r3, #12
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	2340      	movs	r3, #64	; 0x40
 80056e4:	2001      	movs	r0, #1
 80056e6:	89a2      	ldrh	r2, [r4, #12]
 80056e8:	4240      	negs	r0, r0
 80056ea:	4313      	orrs	r3, r2
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	b005      	add	sp, #20
 80056f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f2:	9a02      	ldr	r2, [sp, #8]
 80056f4:	6921      	ldr	r1, [r4, #16]
 80056f6:	f000 faba 	bl	8005c6e <memcpy>
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	4a14      	ldr	r2, [pc, #80]	; (8005750 <__ssputs_r+0xc0>)
 80056fe:	401a      	ands	r2, r3
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	4313      	orrs	r3, r2
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	9b02      	ldr	r3, [sp, #8]
 8005708:	6126      	str	r6, [r4, #16]
 800570a:	18f6      	adds	r6, r6, r3
 800570c:	6026      	str	r6, [r4, #0]
 800570e:	6165      	str	r5, [r4, #20]
 8005710:	9e01      	ldr	r6, [sp, #4]
 8005712:	1aed      	subs	r5, r5, r3
 8005714:	60a5      	str	r5, [r4, #8]
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	429e      	cmp	r6, r3
 800571a:	d900      	bls.n	800571e <__ssputs_r+0x8e>
 800571c:	9e01      	ldr	r6, [sp, #4]
 800571e:	0032      	movs	r2, r6
 8005720:	9903      	ldr	r1, [sp, #12]
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	f000 faac 	bl	8005c80 <memmove>
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	2000      	movs	r0, #0
 800572c:	1b9b      	subs	r3, r3, r6
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	199e      	adds	r6, r3, r6
 8005734:	6026      	str	r6, [r4, #0]
 8005736:	e7da      	b.n	80056ee <__ssputs_r+0x5e>
 8005738:	002a      	movs	r2, r5
 800573a:	0038      	movs	r0, r7
 800573c:	f000 fb96 	bl	8005e6c <_realloc_r>
 8005740:	1e06      	subs	r6, r0, #0
 8005742:	d1e0      	bne.n	8005706 <__ssputs_r+0x76>
 8005744:	0038      	movs	r0, r7
 8005746:	6921      	ldr	r1, [r4, #16]
 8005748:	f000 faae 	bl	8005ca8 <_free_r>
 800574c:	e7c7      	b.n	80056de <__ssputs_r+0x4e>
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	fffffb7f 	.word	0xfffffb7f

08005754 <_svfiprintf_r>:
 8005754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005756:	b0a1      	sub	sp, #132	; 0x84
 8005758:	9003      	str	r0, [sp, #12]
 800575a:	001d      	movs	r5, r3
 800575c:	898b      	ldrh	r3, [r1, #12]
 800575e:	000f      	movs	r7, r1
 8005760:	0016      	movs	r6, r2
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	d511      	bpl.n	800578a <_svfiprintf_r+0x36>
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10e      	bne.n	800578a <_svfiprintf_r+0x36>
 800576c:	2140      	movs	r1, #64	; 0x40
 800576e:	f000 fb07 	bl	8005d80 <_malloc_r>
 8005772:	6038      	str	r0, [r7, #0]
 8005774:	6138      	str	r0, [r7, #16]
 8005776:	2800      	cmp	r0, #0
 8005778:	d105      	bne.n	8005786 <_svfiprintf_r+0x32>
 800577a:	230c      	movs	r3, #12
 800577c:	9a03      	ldr	r2, [sp, #12]
 800577e:	3801      	subs	r0, #1
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	b021      	add	sp, #132	; 0x84
 8005784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005786:	2340      	movs	r3, #64	; 0x40
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	2300      	movs	r3, #0
 800578c:	ac08      	add	r4, sp, #32
 800578e:	6163      	str	r3, [r4, #20]
 8005790:	3320      	adds	r3, #32
 8005792:	7663      	strb	r3, [r4, #25]
 8005794:	3310      	adds	r3, #16
 8005796:	76a3      	strb	r3, [r4, #26]
 8005798:	9507      	str	r5, [sp, #28]
 800579a:	0035      	movs	r5, r6
 800579c:	782b      	ldrb	r3, [r5, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <_svfiprintf_r+0x52>
 80057a2:	2b25      	cmp	r3, #37	; 0x25
 80057a4:	d147      	bne.n	8005836 <_svfiprintf_r+0xe2>
 80057a6:	1bab      	subs	r3, r5, r6
 80057a8:	9305      	str	r3, [sp, #20]
 80057aa:	42b5      	cmp	r5, r6
 80057ac:	d00c      	beq.n	80057c8 <_svfiprintf_r+0x74>
 80057ae:	0032      	movs	r2, r6
 80057b0:	0039      	movs	r1, r7
 80057b2:	9803      	ldr	r0, [sp, #12]
 80057b4:	f7ff ff6c 	bl	8005690 <__ssputs_r>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d100      	bne.n	80057be <_svfiprintf_r+0x6a>
 80057bc:	e0ae      	b.n	800591c <_svfiprintf_r+0x1c8>
 80057be:	6962      	ldr	r2, [r4, #20]
 80057c0:	9b05      	ldr	r3, [sp, #20]
 80057c2:	4694      	mov	ip, r2
 80057c4:	4463      	add	r3, ip
 80057c6:	6163      	str	r3, [r4, #20]
 80057c8:	782b      	ldrb	r3, [r5, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d100      	bne.n	80057d0 <_svfiprintf_r+0x7c>
 80057ce:	e0a5      	b.n	800591c <_svfiprintf_r+0x1c8>
 80057d0:	2201      	movs	r2, #1
 80057d2:	2300      	movs	r3, #0
 80057d4:	4252      	negs	r2, r2
 80057d6:	6062      	str	r2, [r4, #4]
 80057d8:	a904      	add	r1, sp, #16
 80057da:	3254      	adds	r2, #84	; 0x54
 80057dc:	1852      	adds	r2, r2, r1
 80057de:	1c6e      	adds	r6, r5, #1
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	60e3      	str	r3, [r4, #12]
 80057e4:	60a3      	str	r3, [r4, #8]
 80057e6:	7013      	strb	r3, [r2, #0]
 80057e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80057ea:	2205      	movs	r2, #5
 80057ec:	7831      	ldrb	r1, [r6, #0]
 80057ee:	4854      	ldr	r0, [pc, #336]	; (8005940 <_svfiprintf_r+0x1ec>)
 80057f0:	f000 fa32 	bl	8005c58 <memchr>
 80057f4:	1c75      	adds	r5, r6, #1
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d11f      	bne.n	800583a <_svfiprintf_r+0xe6>
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	06d3      	lsls	r3, r2, #27
 80057fe:	d504      	bpl.n	800580a <_svfiprintf_r+0xb6>
 8005800:	2353      	movs	r3, #83	; 0x53
 8005802:	a904      	add	r1, sp, #16
 8005804:	185b      	adds	r3, r3, r1
 8005806:	2120      	movs	r1, #32
 8005808:	7019      	strb	r1, [r3, #0]
 800580a:	0713      	lsls	r3, r2, #28
 800580c:	d504      	bpl.n	8005818 <_svfiprintf_r+0xc4>
 800580e:	2353      	movs	r3, #83	; 0x53
 8005810:	a904      	add	r1, sp, #16
 8005812:	185b      	adds	r3, r3, r1
 8005814:	212b      	movs	r1, #43	; 0x2b
 8005816:	7019      	strb	r1, [r3, #0]
 8005818:	7833      	ldrb	r3, [r6, #0]
 800581a:	2b2a      	cmp	r3, #42	; 0x2a
 800581c:	d016      	beq.n	800584c <_svfiprintf_r+0xf8>
 800581e:	0035      	movs	r5, r6
 8005820:	2100      	movs	r1, #0
 8005822:	200a      	movs	r0, #10
 8005824:	68e3      	ldr	r3, [r4, #12]
 8005826:	782a      	ldrb	r2, [r5, #0]
 8005828:	1c6e      	adds	r6, r5, #1
 800582a:	3a30      	subs	r2, #48	; 0x30
 800582c:	2a09      	cmp	r2, #9
 800582e:	d94e      	bls.n	80058ce <_svfiprintf_r+0x17a>
 8005830:	2900      	cmp	r1, #0
 8005832:	d111      	bne.n	8005858 <_svfiprintf_r+0x104>
 8005834:	e017      	b.n	8005866 <_svfiprintf_r+0x112>
 8005836:	3501      	adds	r5, #1
 8005838:	e7b0      	b.n	800579c <_svfiprintf_r+0x48>
 800583a:	4b41      	ldr	r3, [pc, #260]	; (8005940 <_svfiprintf_r+0x1ec>)
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	1ac0      	subs	r0, r0, r3
 8005840:	2301      	movs	r3, #1
 8005842:	4083      	lsls	r3, r0
 8005844:	4313      	orrs	r3, r2
 8005846:	002e      	movs	r6, r5
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	e7ce      	b.n	80057ea <_svfiprintf_r+0x96>
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	1d19      	adds	r1, r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	9107      	str	r1, [sp, #28]
 8005854:	2b00      	cmp	r3, #0
 8005856:	db01      	blt.n	800585c <_svfiprintf_r+0x108>
 8005858:	930b      	str	r3, [sp, #44]	; 0x2c
 800585a:	e004      	b.n	8005866 <_svfiprintf_r+0x112>
 800585c:	425b      	negs	r3, r3
 800585e:	60e3      	str	r3, [r4, #12]
 8005860:	2302      	movs	r3, #2
 8005862:	4313      	orrs	r3, r2
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	782b      	ldrb	r3, [r5, #0]
 8005868:	2b2e      	cmp	r3, #46	; 0x2e
 800586a:	d10a      	bne.n	8005882 <_svfiprintf_r+0x12e>
 800586c:	786b      	ldrb	r3, [r5, #1]
 800586e:	2b2a      	cmp	r3, #42	; 0x2a
 8005870:	d135      	bne.n	80058de <_svfiprintf_r+0x18a>
 8005872:	9b07      	ldr	r3, [sp, #28]
 8005874:	3502      	adds	r5, #2
 8005876:	1d1a      	adds	r2, r3, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	9207      	str	r2, [sp, #28]
 800587c:	2b00      	cmp	r3, #0
 800587e:	db2b      	blt.n	80058d8 <_svfiprintf_r+0x184>
 8005880:	9309      	str	r3, [sp, #36]	; 0x24
 8005882:	4e30      	ldr	r6, [pc, #192]	; (8005944 <_svfiprintf_r+0x1f0>)
 8005884:	2203      	movs	r2, #3
 8005886:	0030      	movs	r0, r6
 8005888:	7829      	ldrb	r1, [r5, #0]
 800588a:	f000 f9e5 	bl	8005c58 <memchr>
 800588e:	2800      	cmp	r0, #0
 8005890:	d006      	beq.n	80058a0 <_svfiprintf_r+0x14c>
 8005892:	2340      	movs	r3, #64	; 0x40
 8005894:	1b80      	subs	r0, r0, r6
 8005896:	4083      	lsls	r3, r0
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	3501      	adds	r5, #1
 800589c:	4313      	orrs	r3, r2
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	7829      	ldrb	r1, [r5, #0]
 80058a2:	2206      	movs	r2, #6
 80058a4:	4828      	ldr	r0, [pc, #160]	; (8005948 <_svfiprintf_r+0x1f4>)
 80058a6:	1c6e      	adds	r6, r5, #1
 80058a8:	7621      	strb	r1, [r4, #24]
 80058aa:	f000 f9d5 	bl	8005c58 <memchr>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d03c      	beq.n	800592c <_svfiprintf_r+0x1d8>
 80058b2:	4b26      	ldr	r3, [pc, #152]	; (800594c <_svfiprintf_r+0x1f8>)
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d125      	bne.n	8005904 <_svfiprintf_r+0x1b0>
 80058b8:	2207      	movs	r2, #7
 80058ba:	9b07      	ldr	r3, [sp, #28]
 80058bc:	3307      	adds	r3, #7
 80058be:	4393      	bics	r3, r2
 80058c0:	3308      	adds	r3, #8
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	6963      	ldr	r3, [r4, #20]
 80058c6:	9a04      	ldr	r2, [sp, #16]
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	6163      	str	r3, [r4, #20]
 80058cc:	e765      	b.n	800579a <_svfiprintf_r+0x46>
 80058ce:	4343      	muls	r3, r0
 80058d0:	0035      	movs	r5, r6
 80058d2:	2101      	movs	r1, #1
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	e7a6      	b.n	8005826 <_svfiprintf_r+0xd2>
 80058d8:	2301      	movs	r3, #1
 80058da:	425b      	negs	r3, r3
 80058dc:	e7d0      	b.n	8005880 <_svfiprintf_r+0x12c>
 80058de:	2300      	movs	r3, #0
 80058e0:	200a      	movs	r0, #10
 80058e2:	001a      	movs	r2, r3
 80058e4:	3501      	adds	r5, #1
 80058e6:	6063      	str	r3, [r4, #4]
 80058e8:	7829      	ldrb	r1, [r5, #0]
 80058ea:	1c6e      	adds	r6, r5, #1
 80058ec:	3930      	subs	r1, #48	; 0x30
 80058ee:	2909      	cmp	r1, #9
 80058f0:	d903      	bls.n	80058fa <_svfiprintf_r+0x1a6>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0c5      	beq.n	8005882 <_svfiprintf_r+0x12e>
 80058f6:	9209      	str	r2, [sp, #36]	; 0x24
 80058f8:	e7c3      	b.n	8005882 <_svfiprintf_r+0x12e>
 80058fa:	4342      	muls	r2, r0
 80058fc:	0035      	movs	r5, r6
 80058fe:	2301      	movs	r3, #1
 8005900:	1852      	adds	r2, r2, r1
 8005902:	e7f1      	b.n	80058e8 <_svfiprintf_r+0x194>
 8005904:	ab07      	add	r3, sp, #28
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	003a      	movs	r2, r7
 800590a:	0021      	movs	r1, r4
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <_svfiprintf_r+0x1fc>)
 800590e:	9803      	ldr	r0, [sp, #12]
 8005910:	e000      	b.n	8005914 <_svfiprintf_r+0x1c0>
 8005912:	bf00      	nop
 8005914:	9004      	str	r0, [sp, #16]
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	3301      	adds	r3, #1
 800591a:	d1d3      	bne.n	80058c4 <_svfiprintf_r+0x170>
 800591c:	89bb      	ldrh	r3, [r7, #12]
 800591e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005920:	065b      	lsls	r3, r3, #25
 8005922:	d400      	bmi.n	8005926 <_svfiprintf_r+0x1d2>
 8005924:	e72d      	b.n	8005782 <_svfiprintf_r+0x2e>
 8005926:	2001      	movs	r0, #1
 8005928:	4240      	negs	r0, r0
 800592a:	e72a      	b.n	8005782 <_svfiprintf_r+0x2e>
 800592c:	ab07      	add	r3, sp, #28
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	003a      	movs	r2, r7
 8005932:	0021      	movs	r1, r4
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <_svfiprintf_r+0x1fc>)
 8005936:	9803      	ldr	r0, [sp, #12]
 8005938:	f000 f87c 	bl	8005a34 <_printf_i>
 800593c:	e7ea      	b.n	8005914 <_svfiprintf_r+0x1c0>
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	08006144 	.word	0x08006144
 8005944:	0800614a 	.word	0x0800614a
 8005948:	0800614e 	.word	0x0800614e
 800594c:	00000000 	.word	0x00000000
 8005950:	08005691 	.word	0x08005691

08005954 <_printf_common>:
 8005954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005956:	0015      	movs	r5, r2
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	688a      	ldr	r2, [r1, #8]
 800595c:	690b      	ldr	r3, [r1, #16]
 800595e:	000c      	movs	r4, r1
 8005960:	9000      	str	r0, [sp, #0]
 8005962:	4293      	cmp	r3, r2
 8005964:	da00      	bge.n	8005968 <_printf_common+0x14>
 8005966:	0013      	movs	r3, r2
 8005968:	0022      	movs	r2, r4
 800596a:	602b      	str	r3, [r5, #0]
 800596c:	3243      	adds	r2, #67	; 0x43
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	2a00      	cmp	r2, #0
 8005972:	d001      	beq.n	8005978 <_printf_common+0x24>
 8005974:	3301      	adds	r3, #1
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	069b      	lsls	r3, r3, #26
 800597c:	d502      	bpl.n	8005984 <_printf_common+0x30>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	3302      	adds	r3, #2
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	6822      	ldr	r2, [r4, #0]
 8005986:	2306      	movs	r3, #6
 8005988:	0017      	movs	r7, r2
 800598a:	401f      	ands	r7, r3
 800598c:	421a      	tst	r2, r3
 800598e:	d027      	beq.n	80059e0 <_printf_common+0x8c>
 8005990:	0023      	movs	r3, r4
 8005992:	3343      	adds	r3, #67	; 0x43
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	1e5a      	subs	r2, r3, #1
 8005998:	4193      	sbcs	r3, r2
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	0692      	lsls	r2, r2, #26
 800599e:	d430      	bmi.n	8005a02 <_printf_common+0xae>
 80059a0:	0022      	movs	r2, r4
 80059a2:	9901      	ldr	r1, [sp, #4]
 80059a4:	9800      	ldr	r0, [sp, #0]
 80059a6:	9e08      	ldr	r6, [sp, #32]
 80059a8:	3243      	adds	r2, #67	; 0x43
 80059aa:	47b0      	blx	r6
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d025      	beq.n	80059fc <_printf_common+0xa8>
 80059b0:	2306      	movs	r3, #6
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	682a      	ldr	r2, [r5, #0]
 80059b6:	68e1      	ldr	r1, [r4, #12]
 80059b8:	2500      	movs	r5, #0
 80059ba:	4003      	ands	r3, r0
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d103      	bne.n	80059c8 <_printf_common+0x74>
 80059c0:	1a8d      	subs	r5, r1, r2
 80059c2:	43eb      	mvns	r3, r5
 80059c4:	17db      	asrs	r3, r3, #31
 80059c6:	401d      	ands	r5, r3
 80059c8:	68a3      	ldr	r3, [r4, #8]
 80059ca:	6922      	ldr	r2, [r4, #16]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	dd01      	ble.n	80059d4 <_printf_common+0x80>
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	18ed      	adds	r5, r5, r3
 80059d4:	2700      	movs	r7, #0
 80059d6:	42bd      	cmp	r5, r7
 80059d8:	d120      	bne.n	8005a1c <_printf_common+0xc8>
 80059da:	2000      	movs	r0, #0
 80059dc:	e010      	b.n	8005a00 <_printf_common+0xac>
 80059de:	3701      	adds	r7, #1
 80059e0:	68e3      	ldr	r3, [r4, #12]
 80059e2:	682a      	ldr	r2, [r5, #0]
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	42bb      	cmp	r3, r7
 80059e8:	ddd2      	ble.n	8005990 <_printf_common+0x3c>
 80059ea:	0022      	movs	r2, r4
 80059ec:	2301      	movs	r3, #1
 80059ee:	9901      	ldr	r1, [sp, #4]
 80059f0:	9800      	ldr	r0, [sp, #0]
 80059f2:	9e08      	ldr	r6, [sp, #32]
 80059f4:	3219      	adds	r2, #25
 80059f6:	47b0      	blx	r6
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d1f0      	bne.n	80059de <_printf_common+0x8a>
 80059fc:	2001      	movs	r0, #1
 80059fe:	4240      	negs	r0, r0
 8005a00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a02:	2030      	movs	r0, #48	; 0x30
 8005a04:	18e1      	adds	r1, r4, r3
 8005a06:	3143      	adds	r1, #67	; 0x43
 8005a08:	7008      	strb	r0, [r1, #0]
 8005a0a:	0021      	movs	r1, r4
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	3145      	adds	r1, #69	; 0x45
 8005a10:	7809      	ldrb	r1, [r1, #0]
 8005a12:	18a2      	adds	r2, r4, r2
 8005a14:	3243      	adds	r2, #67	; 0x43
 8005a16:	3302      	adds	r3, #2
 8005a18:	7011      	strb	r1, [r2, #0]
 8005a1a:	e7c1      	b.n	80059a0 <_printf_common+0x4c>
 8005a1c:	0022      	movs	r2, r4
 8005a1e:	2301      	movs	r3, #1
 8005a20:	9901      	ldr	r1, [sp, #4]
 8005a22:	9800      	ldr	r0, [sp, #0]
 8005a24:	9e08      	ldr	r6, [sp, #32]
 8005a26:	321a      	adds	r2, #26
 8005a28:	47b0      	blx	r6
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d0e6      	beq.n	80059fc <_printf_common+0xa8>
 8005a2e:	3701      	adds	r7, #1
 8005a30:	e7d1      	b.n	80059d6 <_printf_common+0x82>
	...

08005a34 <_printf_i>:
 8005a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a36:	b08b      	sub	sp, #44	; 0x2c
 8005a38:	9206      	str	r2, [sp, #24]
 8005a3a:	000a      	movs	r2, r1
 8005a3c:	3243      	adds	r2, #67	; 0x43
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	9005      	str	r0, [sp, #20]
 8005a42:	9204      	str	r2, [sp, #16]
 8005a44:	7e0a      	ldrb	r2, [r1, #24]
 8005a46:	000c      	movs	r4, r1
 8005a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a4a:	2a78      	cmp	r2, #120	; 0x78
 8005a4c:	d807      	bhi.n	8005a5e <_printf_i+0x2a>
 8005a4e:	2a62      	cmp	r2, #98	; 0x62
 8005a50:	d809      	bhi.n	8005a66 <_printf_i+0x32>
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d100      	bne.n	8005a58 <_printf_i+0x24>
 8005a56:	e0c1      	b.n	8005bdc <_printf_i+0x1a8>
 8005a58:	2a58      	cmp	r2, #88	; 0x58
 8005a5a:	d100      	bne.n	8005a5e <_printf_i+0x2a>
 8005a5c:	e08c      	b.n	8005b78 <_printf_i+0x144>
 8005a5e:	0026      	movs	r6, r4
 8005a60:	3642      	adds	r6, #66	; 0x42
 8005a62:	7032      	strb	r2, [r6, #0]
 8005a64:	e022      	b.n	8005aac <_printf_i+0x78>
 8005a66:	0010      	movs	r0, r2
 8005a68:	3863      	subs	r0, #99	; 0x63
 8005a6a:	2815      	cmp	r0, #21
 8005a6c:	d8f7      	bhi.n	8005a5e <_printf_i+0x2a>
 8005a6e:	f7fa fb51 	bl	8000114 <__gnu_thumb1_case_shi>
 8005a72:	0016      	.short	0x0016
 8005a74:	fff6001f 	.word	0xfff6001f
 8005a78:	fff6fff6 	.word	0xfff6fff6
 8005a7c:	001ffff6 	.word	0x001ffff6
 8005a80:	fff6fff6 	.word	0xfff6fff6
 8005a84:	fff6fff6 	.word	0xfff6fff6
 8005a88:	003600a8 	.word	0x003600a8
 8005a8c:	fff6009a 	.word	0xfff6009a
 8005a90:	00b9fff6 	.word	0x00b9fff6
 8005a94:	0036fff6 	.word	0x0036fff6
 8005a98:	fff6fff6 	.word	0xfff6fff6
 8005a9c:	009e      	.short	0x009e
 8005a9e:	0026      	movs	r6, r4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	3642      	adds	r6, #66	; 0x42
 8005aa4:	1d11      	adds	r1, r2, #4
 8005aa6:	6019      	str	r1, [r3, #0]
 8005aa8:	6813      	ldr	r3, [r2, #0]
 8005aaa:	7033      	strb	r3, [r6, #0]
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0a7      	b.n	8005c00 <_printf_i+0x1cc>
 8005ab0:	6808      	ldr	r0, [r1, #0]
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	1d0a      	adds	r2, r1, #4
 8005ab6:	0605      	lsls	r5, r0, #24
 8005ab8:	d50b      	bpl.n	8005ad2 <_printf_i+0x9e>
 8005aba:	680d      	ldr	r5, [r1, #0]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	da03      	bge.n	8005aca <_printf_i+0x96>
 8005ac2:	232d      	movs	r3, #45	; 0x2d
 8005ac4:	9a04      	ldr	r2, [sp, #16]
 8005ac6:	426d      	negs	r5, r5
 8005ac8:	7013      	strb	r3, [r2, #0]
 8005aca:	4b61      	ldr	r3, [pc, #388]	; (8005c50 <_printf_i+0x21c>)
 8005acc:	270a      	movs	r7, #10
 8005ace:	9303      	str	r3, [sp, #12]
 8005ad0:	e01b      	b.n	8005b0a <_printf_i+0xd6>
 8005ad2:	680d      	ldr	r5, [r1, #0]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	0641      	lsls	r1, r0, #25
 8005ad8:	d5f1      	bpl.n	8005abe <_printf_i+0x8a>
 8005ada:	b22d      	sxth	r5, r5
 8005adc:	e7ef      	b.n	8005abe <_printf_i+0x8a>
 8005ade:	680d      	ldr	r5, [r1, #0]
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	1d08      	adds	r0, r1, #4
 8005ae4:	6018      	str	r0, [r3, #0]
 8005ae6:	062e      	lsls	r6, r5, #24
 8005ae8:	d501      	bpl.n	8005aee <_printf_i+0xba>
 8005aea:	680d      	ldr	r5, [r1, #0]
 8005aec:	e003      	b.n	8005af6 <_printf_i+0xc2>
 8005aee:	066d      	lsls	r5, r5, #25
 8005af0:	d5fb      	bpl.n	8005aea <_printf_i+0xb6>
 8005af2:	680d      	ldr	r5, [r1, #0]
 8005af4:	b2ad      	uxth	r5, r5
 8005af6:	4b56      	ldr	r3, [pc, #344]	; (8005c50 <_printf_i+0x21c>)
 8005af8:	2708      	movs	r7, #8
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	2a6f      	cmp	r2, #111	; 0x6f
 8005afe:	d000      	beq.n	8005b02 <_printf_i+0xce>
 8005b00:	3702      	adds	r7, #2
 8005b02:	0023      	movs	r3, r4
 8005b04:	2200      	movs	r2, #0
 8005b06:	3343      	adds	r3, #67	; 0x43
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	6863      	ldr	r3, [r4, #4]
 8005b0c:	60a3      	str	r3, [r4, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	db03      	blt.n	8005b1a <_printf_i+0xe6>
 8005b12:	2204      	movs	r2, #4
 8005b14:	6821      	ldr	r1, [r4, #0]
 8005b16:	4391      	bics	r1, r2
 8005b18:	6021      	str	r1, [r4, #0]
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	d102      	bne.n	8005b24 <_printf_i+0xf0>
 8005b1e:	9e04      	ldr	r6, [sp, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <_printf_i+0x10a>
 8005b24:	9e04      	ldr	r6, [sp, #16]
 8005b26:	0028      	movs	r0, r5
 8005b28:	0039      	movs	r1, r7
 8005b2a:	f7fa fb83 	bl	8000234 <__aeabi_uidivmod>
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	3e01      	subs	r6, #1
 8005b32:	5c5b      	ldrb	r3, [r3, r1]
 8005b34:	7033      	strb	r3, [r6, #0]
 8005b36:	002b      	movs	r3, r5
 8005b38:	0005      	movs	r5, r0
 8005b3a:	429f      	cmp	r7, r3
 8005b3c:	d9f3      	bls.n	8005b26 <_printf_i+0xf2>
 8005b3e:	2f08      	cmp	r7, #8
 8005b40:	d109      	bne.n	8005b56 <_printf_i+0x122>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	07db      	lsls	r3, r3, #31
 8005b46:	d506      	bpl.n	8005b56 <_printf_i+0x122>
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	6922      	ldr	r2, [r4, #16]
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	dc02      	bgt.n	8005b56 <_printf_i+0x122>
 8005b50:	2330      	movs	r3, #48	; 0x30
 8005b52:	3e01      	subs	r6, #1
 8005b54:	7033      	strb	r3, [r6, #0]
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	1b9b      	subs	r3, r3, r6
 8005b5a:	6123      	str	r3, [r4, #16]
 8005b5c:	9b07      	ldr	r3, [sp, #28]
 8005b5e:	0021      	movs	r1, r4
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	9805      	ldr	r0, [sp, #20]
 8005b64:	9b06      	ldr	r3, [sp, #24]
 8005b66:	aa09      	add	r2, sp, #36	; 0x24
 8005b68:	f7ff fef4 	bl	8005954 <_printf_common>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d14c      	bne.n	8005c0a <_printf_i+0x1d6>
 8005b70:	2001      	movs	r0, #1
 8005b72:	4240      	negs	r0, r0
 8005b74:	b00b      	add	sp, #44	; 0x2c
 8005b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b78:	3145      	adds	r1, #69	; 0x45
 8005b7a:	700a      	strb	r2, [r1, #0]
 8005b7c:	4a34      	ldr	r2, [pc, #208]	; (8005c50 <_printf_i+0x21c>)
 8005b7e:	9203      	str	r2, [sp, #12]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	6821      	ldr	r1, [r4, #0]
 8005b84:	ca20      	ldmia	r2!, {r5}
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	0608      	lsls	r0, r1, #24
 8005b8a:	d516      	bpl.n	8005bba <_printf_i+0x186>
 8005b8c:	07cb      	lsls	r3, r1, #31
 8005b8e:	d502      	bpl.n	8005b96 <_printf_i+0x162>
 8005b90:	2320      	movs	r3, #32
 8005b92:	4319      	orrs	r1, r3
 8005b94:	6021      	str	r1, [r4, #0]
 8005b96:	2710      	movs	r7, #16
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	d1b2      	bne.n	8005b02 <_printf_i+0xce>
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	439a      	bics	r2, r3
 8005ba2:	6022      	str	r2, [r4, #0]
 8005ba4:	e7ad      	b.n	8005b02 <_printf_i+0xce>
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	6809      	ldr	r1, [r1, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	6022      	str	r2, [r4, #0]
 8005bae:	0022      	movs	r2, r4
 8005bb0:	2178      	movs	r1, #120	; 0x78
 8005bb2:	3245      	adds	r2, #69	; 0x45
 8005bb4:	7011      	strb	r1, [r2, #0]
 8005bb6:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <_printf_i+0x220>)
 8005bb8:	e7e1      	b.n	8005b7e <_printf_i+0x14a>
 8005bba:	0648      	lsls	r0, r1, #25
 8005bbc:	d5e6      	bpl.n	8005b8c <_printf_i+0x158>
 8005bbe:	b2ad      	uxth	r5, r5
 8005bc0:	e7e4      	b.n	8005b8c <_printf_i+0x158>
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	680d      	ldr	r5, [r1, #0]
 8005bc6:	1d10      	adds	r0, r2, #4
 8005bc8:	6949      	ldr	r1, [r1, #20]
 8005bca:	6018      	str	r0, [r3, #0]
 8005bcc:	6813      	ldr	r3, [r2, #0]
 8005bce:	062e      	lsls	r6, r5, #24
 8005bd0:	d501      	bpl.n	8005bd6 <_printf_i+0x1a2>
 8005bd2:	6019      	str	r1, [r3, #0]
 8005bd4:	e002      	b.n	8005bdc <_printf_i+0x1a8>
 8005bd6:	066d      	lsls	r5, r5, #25
 8005bd8:	d5fb      	bpl.n	8005bd2 <_printf_i+0x19e>
 8005bda:	8019      	strh	r1, [r3, #0]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9e04      	ldr	r6, [sp, #16]
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	e7bb      	b.n	8005b5c <_printf_i+0x128>
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	1d11      	adds	r1, r2, #4
 8005be8:	6019      	str	r1, [r3, #0]
 8005bea:	6816      	ldr	r6, [r2, #0]
 8005bec:	2100      	movs	r1, #0
 8005bee:	0030      	movs	r0, r6
 8005bf0:	6862      	ldr	r2, [r4, #4]
 8005bf2:	f000 f831 	bl	8005c58 <memchr>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d001      	beq.n	8005bfe <_printf_i+0x1ca>
 8005bfa:	1b80      	subs	r0, r0, r6
 8005bfc:	6060      	str	r0, [r4, #4]
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	2300      	movs	r3, #0
 8005c04:	9a04      	ldr	r2, [sp, #16]
 8005c06:	7013      	strb	r3, [r2, #0]
 8005c08:	e7a8      	b.n	8005b5c <_printf_i+0x128>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	0032      	movs	r2, r6
 8005c0e:	9906      	ldr	r1, [sp, #24]
 8005c10:	9805      	ldr	r0, [sp, #20]
 8005c12:	9d07      	ldr	r5, [sp, #28]
 8005c14:	47a8      	blx	r5
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	d0aa      	beq.n	8005b70 <_printf_i+0x13c>
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	079b      	lsls	r3, r3, #30
 8005c1e:	d415      	bmi.n	8005c4c <_printf_i+0x218>
 8005c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c22:	68e0      	ldr	r0, [r4, #12]
 8005c24:	4298      	cmp	r0, r3
 8005c26:	daa5      	bge.n	8005b74 <_printf_i+0x140>
 8005c28:	0018      	movs	r0, r3
 8005c2a:	e7a3      	b.n	8005b74 <_printf_i+0x140>
 8005c2c:	0022      	movs	r2, r4
 8005c2e:	2301      	movs	r3, #1
 8005c30:	9906      	ldr	r1, [sp, #24]
 8005c32:	9805      	ldr	r0, [sp, #20]
 8005c34:	9e07      	ldr	r6, [sp, #28]
 8005c36:	3219      	adds	r2, #25
 8005c38:	47b0      	blx	r6
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d098      	beq.n	8005b70 <_printf_i+0x13c>
 8005c3e:	3501      	adds	r5, #1
 8005c40:	68e3      	ldr	r3, [r4, #12]
 8005c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	42ab      	cmp	r3, r5
 8005c48:	dcf0      	bgt.n	8005c2c <_printf_i+0x1f8>
 8005c4a:	e7e9      	b.n	8005c20 <_printf_i+0x1ec>
 8005c4c:	2500      	movs	r5, #0
 8005c4e:	e7f7      	b.n	8005c40 <_printf_i+0x20c>
 8005c50:	08006155 	.word	0x08006155
 8005c54:	08006166 	.word	0x08006166

08005c58 <memchr>:
 8005c58:	b2c9      	uxtb	r1, r1
 8005c5a:	1882      	adds	r2, r0, r2
 8005c5c:	4290      	cmp	r0, r2
 8005c5e:	d101      	bne.n	8005c64 <memchr+0xc>
 8005c60:	2000      	movs	r0, #0
 8005c62:	4770      	bx	lr
 8005c64:	7803      	ldrb	r3, [r0, #0]
 8005c66:	428b      	cmp	r3, r1
 8005c68:	d0fb      	beq.n	8005c62 <memchr+0xa>
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	e7f6      	b.n	8005c5c <memchr+0x4>

08005c6e <memcpy>:
 8005c6e:	2300      	movs	r3, #0
 8005c70:	b510      	push	{r4, lr}
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d100      	bne.n	8005c78 <memcpy+0xa>
 8005c76:	bd10      	pop	{r4, pc}
 8005c78:	5ccc      	ldrb	r4, [r1, r3]
 8005c7a:	54c4      	strb	r4, [r0, r3]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e7f8      	b.n	8005c72 <memcpy+0x4>

08005c80 <memmove>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4288      	cmp	r0, r1
 8005c84:	d902      	bls.n	8005c8c <memmove+0xc>
 8005c86:	188b      	adds	r3, r1, r2
 8005c88:	4298      	cmp	r0, r3
 8005c8a:	d303      	bcc.n	8005c94 <memmove+0x14>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e007      	b.n	8005ca0 <memmove+0x20>
 8005c90:	5c8b      	ldrb	r3, [r1, r2]
 8005c92:	5483      	strb	r3, [r0, r2]
 8005c94:	3a01      	subs	r2, #1
 8005c96:	d2fb      	bcs.n	8005c90 <memmove+0x10>
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	5ccc      	ldrb	r4, [r1, r3]
 8005c9c:	54c4      	strb	r4, [r0, r3]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d1fa      	bne.n	8005c9a <memmove+0x1a>
 8005ca4:	e7f8      	b.n	8005c98 <memmove+0x18>
	...

08005ca8 <_free_r>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	0005      	movs	r5, r0
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d010      	beq.n	8005cd2 <_free_r+0x2a>
 8005cb0:	1f0c      	subs	r4, r1, #4
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da00      	bge.n	8005cba <_free_r+0x12>
 8005cb8:	18e4      	adds	r4, r4, r3
 8005cba:	0028      	movs	r0, r5
 8005cbc:	f000 f918 	bl	8005ef0 <__malloc_lock>
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <_free_r+0x90>)
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <_free_r+0x2c>
 8005cc8:	6063      	str	r3, [r4, #4]
 8005cca:	6014      	str	r4, [r2, #0]
 8005ccc:	0028      	movs	r0, r5
 8005cce:	f000 f917 	bl	8005f00 <__malloc_unlock>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d908      	bls.n	8005cea <_free_r+0x42>
 8005cd8:	6821      	ldr	r1, [r4, #0]
 8005cda:	1860      	adds	r0, r4, r1
 8005cdc:	4283      	cmp	r3, r0
 8005cde:	d1f3      	bne.n	8005cc8 <_free_r+0x20>
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	1841      	adds	r1, r0, r1
 8005ce6:	6021      	str	r1, [r4, #0]
 8005ce8:	e7ee      	b.n	8005cc8 <_free_r+0x20>
 8005cea:	001a      	movs	r2, r3
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <_free_r+0x4e>
 8005cf2:	42a3      	cmp	r3, r4
 8005cf4:	d9f9      	bls.n	8005cea <_free_r+0x42>
 8005cf6:	6811      	ldr	r1, [r2, #0]
 8005cf8:	1850      	adds	r0, r2, r1
 8005cfa:	42a0      	cmp	r0, r4
 8005cfc:	d10b      	bne.n	8005d16 <_free_r+0x6e>
 8005cfe:	6820      	ldr	r0, [r4, #0]
 8005d00:	1809      	adds	r1, r1, r0
 8005d02:	1850      	adds	r0, r2, r1
 8005d04:	6011      	str	r1, [r2, #0]
 8005d06:	4283      	cmp	r3, r0
 8005d08:	d1e0      	bne.n	8005ccc <_free_r+0x24>
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	1841      	adds	r1, r0, r1
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	6053      	str	r3, [r2, #4]
 8005d14:	e7da      	b.n	8005ccc <_free_r+0x24>
 8005d16:	42a0      	cmp	r0, r4
 8005d18:	d902      	bls.n	8005d20 <_free_r+0x78>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	e7d5      	b.n	8005ccc <_free_r+0x24>
 8005d20:	6821      	ldr	r1, [r4, #0]
 8005d22:	1860      	adds	r0, r4, r1
 8005d24:	4283      	cmp	r3, r0
 8005d26:	d103      	bne.n	8005d30 <_free_r+0x88>
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	1841      	adds	r1, r0, r1
 8005d2e:	6021      	str	r1, [r4, #0]
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	6054      	str	r4, [r2, #4]
 8005d34:	e7ca      	b.n	8005ccc <_free_r+0x24>
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	200004dc 	.word	0x200004dc

08005d3c <sbrk_aligned>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4e0f      	ldr	r6, [pc, #60]	; (8005d7c <sbrk_aligned+0x40>)
 8005d40:	000d      	movs	r5, r1
 8005d42:	6831      	ldr	r1, [r6, #0]
 8005d44:	0004      	movs	r4, r0
 8005d46:	2900      	cmp	r1, #0
 8005d48:	d102      	bne.n	8005d50 <sbrk_aligned+0x14>
 8005d4a:	f000 f8bf 	bl	8005ecc <_sbrk_r>
 8005d4e:	6030      	str	r0, [r6, #0]
 8005d50:	0029      	movs	r1, r5
 8005d52:	0020      	movs	r0, r4
 8005d54:	f000 f8ba 	bl	8005ecc <_sbrk_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d00a      	beq.n	8005d72 <sbrk_aligned+0x36>
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	1cc5      	adds	r5, r0, #3
 8005d60:	439d      	bics	r5, r3
 8005d62:	42a8      	cmp	r0, r5
 8005d64:	d007      	beq.n	8005d76 <sbrk_aligned+0x3a>
 8005d66:	1a29      	subs	r1, r5, r0
 8005d68:	0020      	movs	r0, r4
 8005d6a:	f000 f8af 	bl	8005ecc <_sbrk_r>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	d101      	bne.n	8005d76 <sbrk_aligned+0x3a>
 8005d72:	2501      	movs	r5, #1
 8005d74:	426d      	negs	r5, r5
 8005d76:	0028      	movs	r0, r5
 8005d78:	bd70      	pop	{r4, r5, r6, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	200004e0 	.word	0x200004e0

08005d80 <_malloc_r>:
 8005d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d82:	2203      	movs	r2, #3
 8005d84:	1ccb      	adds	r3, r1, #3
 8005d86:	4393      	bics	r3, r2
 8005d88:	3308      	adds	r3, #8
 8005d8a:	0006      	movs	r6, r0
 8005d8c:	001f      	movs	r7, r3
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d232      	bcs.n	8005df8 <_malloc_r+0x78>
 8005d92:	270c      	movs	r7, #12
 8005d94:	42b9      	cmp	r1, r7
 8005d96:	d831      	bhi.n	8005dfc <_malloc_r+0x7c>
 8005d98:	0030      	movs	r0, r6
 8005d9a:	f000 f8a9 	bl	8005ef0 <__malloc_lock>
 8005d9e:	4d32      	ldr	r5, [pc, #200]	; (8005e68 <_malloc_r+0xe8>)
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	001c      	movs	r4, r3
 8005da4:	2c00      	cmp	r4, #0
 8005da6:	d12e      	bne.n	8005e06 <_malloc_r+0x86>
 8005da8:	0039      	movs	r1, r7
 8005daa:	0030      	movs	r0, r6
 8005dac:	f7ff ffc6 	bl	8005d3c <sbrk_aligned>
 8005db0:	0004      	movs	r4, r0
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	d11e      	bne.n	8005df4 <_malloc_r+0x74>
 8005db6:	682c      	ldr	r4, [r5, #0]
 8005db8:	0025      	movs	r5, r4
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	d14a      	bne.n	8005e54 <_malloc_r+0xd4>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	0029      	movs	r1, r5
 8005dc2:	18e3      	adds	r3, r4, r3
 8005dc4:	0030      	movs	r0, r6
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	f000 f880 	bl	8005ecc <_sbrk_r>
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	4283      	cmp	r3, r0
 8005dd0:	d143      	bne.n	8005e5a <_malloc_r+0xda>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	3703      	adds	r7, #3
 8005dd6:	1aff      	subs	r7, r7, r3
 8005dd8:	2303      	movs	r3, #3
 8005dda:	439f      	bics	r7, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	2f0c      	cmp	r7, #12
 8005de0:	d200      	bcs.n	8005de4 <_malloc_r+0x64>
 8005de2:	270c      	movs	r7, #12
 8005de4:	0039      	movs	r1, r7
 8005de6:	0030      	movs	r0, r6
 8005de8:	f7ff ffa8 	bl	8005d3c <sbrk_aligned>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d034      	beq.n	8005e5a <_malloc_r+0xda>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	19df      	adds	r7, r3, r7
 8005df4:	6027      	str	r7, [r4, #0]
 8005df6:	e013      	b.n	8005e20 <_malloc_r+0xa0>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	dacb      	bge.n	8005d94 <_malloc_r+0x14>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	2500      	movs	r5, #0
 8005e00:	6033      	str	r3, [r6, #0]
 8005e02:	0028      	movs	r0, r5
 8005e04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	1bd1      	subs	r1, r2, r7
 8005e0a:	d420      	bmi.n	8005e4e <_malloc_r+0xce>
 8005e0c:	290b      	cmp	r1, #11
 8005e0e:	d917      	bls.n	8005e40 <_malloc_r+0xc0>
 8005e10:	19e2      	adds	r2, r4, r7
 8005e12:	6027      	str	r7, [r4, #0]
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d111      	bne.n	8005e3c <_malloc_r+0xbc>
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	6863      	ldr	r3, [r4, #4]
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	6053      	str	r3, [r2, #4]
 8005e20:	0030      	movs	r0, r6
 8005e22:	0025      	movs	r5, r4
 8005e24:	f000 f86c 	bl	8005f00 <__malloc_unlock>
 8005e28:	2207      	movs	r2, #7
 8005e2a:	350b      	adds	r5, #11
 8005e2c:	1d23      	adds	r3, r4, #4
 8005e2e:	4395      	bics	r5, r2
 8005e30:	1aea      	subs	r2, r5, r3
 8005e32:	429d      	cmp	r5, r3
 8005e34:	d0e5      	beq.n	8005e02 <_malloc_r+0x82>
 8005e36:	1b5b      	subs	r3, r3, r5
 8005e38:	50a3      	str	r3, [r4, r2]
 8005e3a:	e7e2      	b.n	8005e02 <_malloc_r+0x82>
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	e7ec      	b.n	8005e1a <_malloc_r+0x9a>
 8005e40:	6862      	ldr	r2, [r4, #4]
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	d101      	bne.n	8005e4a <_malloc_r+0xca>
 8005e46:	602a      	str	r2, [r5, #0]
 8005e48:	e7ea      	b.n	8005e20 <_malloc_r+0xa0>
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	e7e8      	b.n	8005e20 <_malloc_r+0xa0>
 8005e4e:	0023      	movs	r3, r4
 8005e50:	6864      	ldr	r4, [r4, #4]
 8005e52:	e7a7      	b.n	8005da4 <_malloc_r+0x24>
 8005e54:	002c      	movs	r4, r5
 8005e56:	686d      	ldr	r5, [r5, #4]
 8005e58:	e7af      	b.n	8005dba <_malloc_r+0x3a>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	0030      	movs	r0, r6
 8005e5e:	6033      	str	r3, [r6, #0]
 8005e60:	f000 f84e 	bl	8005f00 <__malloc_unlock>
 8005e64:	e7cd      	b.n	8005e02 <_malloc_r+0x82>
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	200004dc 	.word	0x200004dc

08005e6c <_realloc_r>:
 8005e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e6e:	0007      	movs	r7, r0
 8005e70:	000e      	movs	r6, r1
 8005e72:	0014      	movs	r4, r2
 8005e74:	2900      	cmp	r1, #0
 8005e76:	d105      	bne.n	8005e84 <_realloc_r+0x18>
 8005e78:	0011      	movs	r1, r2
 8005e7a:	f7ff ff81 	bl	8005d80 <_malloc_r>
 8005e7e:	0005      	movs	r5, r0
 8005e80:	0028      	movs	r0, r5
 8005e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e84:	2a00      	cmp	r2, #0
 8005e86:	d103      	bne.n	8005e90 <_realloc_r+0x24>
 8005e88:	f7ff ff0e 	bl	8005ca8 <_free_r>
 8005e8c:	0025      	movs	r5, r4
 8005e8e:	e7f7      	b.n	8005e80 <_realloc_r+0x14>
 8005e90:	f000 f83e 	bl	8005f10 <_malloc_usable_size_r>
 8005e94:	9001      	str	r0, [sp, #4]
 8005e96:	4284      	cmp	r4, r0
 8005e98:	d803      	bhi.n	8005ea2 <_realloc_r+0x36>
 8005e9a:	0035      	movs	r5, r6
 8005e9c:	0843      	lsrs	r3, r0, #1
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	d3ee      	bcc.n	8005e80 <_realloc_r+0x14>
 8005ea2:	0021      	movs	r1, r4
 8005ea4:	0038      	movs	r0, r7
 8005ea6:	f7ff ff6b 	bl	8005d80 <_malloc_r>
 8005eaa:	1e05      	subs	r5, r0, #0
 8005eac:	d0e8      	beq.n	8005e80 <_realloc_r+0x14>
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	0022      	movs	r2, r4
 8005eb2:	429c      	cmp	r4, r3
 8005eb4:	d900      	bls.n	8005eb8 <_realloc_r+0x4c>
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	0031      	movs	r1, r6
 8005eba:	0028      	movs	r0, r5
 8005ebc:	f7ff fed7 	bl	8005c6e <memcpy>
 8005ec0:	0031      	movs	r1, r6
 8005ec2:	0038      	movs	r0, r7
 8005ec4:	f7ff fef0 	bl	8005ca8 <_free_r>
 8005ec8:	e7da      	b.n	8005e80 <_realloc_r+0x14>
	...

08005ecc <_sbrk_r>:
 8005ecc:	2300      	movs	r3, #0
 8005ece:	b570      	push	{r4, r5, r6, lr}
 8005ed0:	4d06      	ldr	r5, [pc, #24]	; (8005eec <_sbrk_r+0x20>)
 8005ed2:	0004      	movs	r4, r0
 8005ed4:	0008      	movs	r0, r1
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	f7fb fa28 	bl	800132c <_sbrk>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d103      	bne.n	8005ee8 <_sbrk_r+0x1c>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d000      	beq.n	8005ee8 <_sbrk_r+0x1c>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	200004e4 	.word	0x200004e4

08005ef0 <__malloc_lock>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	4802      	ldr	r0, [pc, #8]	; (8005efc <__malloc_lock+0xc>)
 8005ef4:	f000 f814 	bl	8005f20 <__retarget_lock_acquire_recursive>
 8005ef8:	bd10      	pop	{r4, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	200004e8 	.word	0x200004e8

08005f00 <__malloc_unlock>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	4802      	ldr	r0, [pc, #8]	; (8005f0c <__malloc_unlock+0xc>)
 8005f04:	f000 f80d 	bl	8005f22 <__retarget_lock_release_recursive>
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	200004e8 	.word	0x200004e8

08005f10 <_malloc_usable_size_r>:
 8005f10:	1f0b      	subs	r3, r1, #4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	1f18      	subs	r0, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da01      	bge.n	8005f1e <_malloc_usable_size_r+0xe>
 8005f1a:	580b      	ldr	r3, [r1, r0]
 8005f1c:	18c0      	adds	r0, r0, r3
 8005f1e:	4770      	bx	lr

08005f20 <__retarget_lock_acquire_recursive>:
 8005f20:	4770      	bx	lr

08005f22 <__retarget_lock_release_recursive>:
 8005f22:	4770      	bx	lr

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr
