
Test_Swarm_001_G07RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c0  080058c0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080058c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200000a4  0800596c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800596c  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001358c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ec  00000000  00000000  00033658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00035e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d63  00000000  00000000  00037dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134b8  00000000  00000000  00051b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a75ef  00000000  00000000  00064fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c5ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  0010c61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a4 	.word	0x200000a4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005790 	.word	0x08005790

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a8 	.word	0x200000a8
 8000100:	08005790 	.word	0x08005790

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fd6e 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f872 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9ea 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f9ca 	bl	80009e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f97a 	bl	800094c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f8c0 	bl	80007dc <MX_RTC_Init>
  MX_USART1_UART_Init();
 800065c:	f000 f928 	bl	80008b0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000660:	f000 f8ea 	bl	8000838 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <main+0xb8>)
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff fd4c 	bl	8000104 <strlen>
 800066c:	0003      	movs	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	4921      	ldr	r1, [pc, #132]	; (80006f8 <main+0xb8>)
 8000672:	4822      	ldr	r0, [pc, #136]	; (80006fc <main+0xbc>)
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	f002 ff4d 	bl	8003514 <HAL_UART_Transmit>
 800067a:	0003      	movs	r3, r0
 800067c:	001a      	movs	r2, r3
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <main+0xc0>)
 8000680:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000682:	23fa      	movs	r3, #250	; 0xfa
 8000684:	005a      	lsls	r2, r3, #1
 8000686:	491f      	ldr	r1, [pc, #124]	; (8000704 <main+0xc4>)
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <main+0xc8>)
 800068a:	0018      	movs	r0, r3
 800068c:	f004 fb0c 	bl	8004ca8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <main+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2202      	movs	r2, #2
 8000696:	4252      	negs	r2, r2
 8000698:	611a      	str	r2, [r3, #16]
  //send2swarm_rt_0 () ; // RT unsolicitied off
  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 1 ) ;
 800069a:	491d      	ldr	r1, [pc, #116]	; (8000710 <main+0xd0>)
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <main+0xd4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fa67 	bl	8000b74 <send2swarm_at_command>
  if ( checklist == 1 )
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <main+0xd8>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d105      	bne.n	80006ba <main+0x7a>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 2 ) ; // Query RT rate
 80006ae:	491b      	ldr	r1, [pc, #108]	; (800071c <main+0xdc>)
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <main+0xe0>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fa5d 	bl	8000b74 <send2swarm_at_command>
  if ( checklist == 2 )
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <main+0xd8>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d105      	bne.n	80006ce <main+0x8e>
	  send2swarm_at_command ( dt_mostrecent_at_comm , dt_answer , 3 ) ; // Query most accurate datetime
 80006c2:	4918      	ldr	r1, [pc, #96]	; (8000724 <main+0xe4>)
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <main+0xe8>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fa53 	bl	8000b74 <send2swarm_at_command>
  if ( checklist == 3 )
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <main+0xd8>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d10e      	bne.n	80006f4 <main+0xb4>
	  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) good , strlen ( good ) , UART_TX_TIMEOUT ) ;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0xec>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fd13 	bl	8000104 <strlen>
 80006de:	0003      	movs	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4912      	ldr	r1, [pc, #72]	; (800072c <main+0xec>)
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <main+0xbc>)
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	f002 ff14 	bl	8003514 <HAL_UART_Transmit>
 80006ec:	0003      	movs	r3, r0
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <main+0xc0>)
 80006f2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while ( 1 )
  {
	  __NOP () ;
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	e7fd      	b.n	80006f4 <main+0xb4>
 80006f8:	20000000 	.word	0x20000000
 80006fc:	200001cc 	.word	0x200001cc
 8000700:	200002bf 	.word	0x200002bf
 8000704:	200002c0 	.word	0x200002c0
 8000708:	20000138 	.word	0x20000138
 800070c:	200000ec 	.word	0x200000ec
 8000710:	080057dc 	.word	0x080057dc
 8000714:	080057cc 	.word	0x080057cc
 8000718:	200002bc 	.word	0x200002bc
 800071c:	080057e8 	.word	0x080057e8
 8000720:	080057c4 	.word	0x080057c4
 8000724:	080057f4 	.word	0x080057f4
 8000728:	080057d4 	.word	0x080057d4
 800072c:	20000020 	.word	0x20000020

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b093      	sub	sp, #76	; 0x4c
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	2410      	movs	r4, #16
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2338      	movs	r3, #56	; 0x38
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f004 fba1 	bl	8004e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000746:	003b      	movs	r3, r7
 8000748:	0018      	movs	r0, r3
 800074a:	2310      	movs	r3, #16
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f004 fb9a 	bl	8004e88 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fb33 	bl	8001dc4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800075e:	f001 fb23 	bl	8001da8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <SystemClock_Config+0xa8>)
 8000764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <SystemClock_Config+0xa8>)
 8000768:	2118      	movs	r1, #24
 800076a:	438a      	bics	r2, r1
 800076c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2206      	movs	r2, #6
 8000772:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2201      	movs	r2, #1
 8000778:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2240      	movs	r2, #64	; 0x40
 800078c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	193b      	adds	r3, r7, r4
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fb60 	bl	8001e5c <HAL_RCC_OscConfig>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007a0:	f000 faa6 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	003b      	movs	r3, r7
 80007a6:	2207      	movs	r2, #7
 80007a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	003b      	movs	r3, r7
 80007be:	2100      	movs	r1, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fe65 	bl	8002490 <HAL_RCC_ClockConfig>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 fa91 	bl	8000cf0 <Error_Handler>
  }
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b013      	add	sp, #76	; 0x4c
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_RTC_Init+0x54>)
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <MX_RTC_Init+0x58>)
 80007e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_RTC_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_RTC_Init+0x54>)
 80007ee:	227f      	movs	r2, #127	; 0x7f
 80007f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_RTC_Init+0x54>)
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_RTC_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_RTC_Init+0x54>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_RTC_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_RTC_Init+0x54>)
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	05d2      	lsls	r2, r2, #23
 8000810:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_RTC_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_RTC_Init+0x54>)
 800081a:	0018      	movs	r0, r3
 800081c:	f002 f99a 	bl	8002b54 <HAL_RTC_Init>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000824:	f000 fa64 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	200000c0 	.word	0x200000c0
 8000834:	40002800 	.word	0x40002800

08000838 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	0018      	movs	r0, r3
 8000842:	230c      	movs	r3, #12
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f004 fb1e 	bl	8004e88 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_TIM6_Init+0x6c>)
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_TIM6_Init+0x70>)
 8000850:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_TIM6_Init+0x6c>)
 8000854:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_TIM6_Init+0x74>)
 8000856:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_TIM6_Init+0x6c>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250-1;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_TIM6_Init+0x6c>)
 8000860:	22f9      	movs	r2, #249	; 0xf9
 8000862:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_TIM6_Init+0x6c>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_TIM6_Init+0x6c>)
 800086c:	0018      	movs	r0, r3
 800086e:	f002 fac1 	bl	8002df4 <HAL_TIM_Base_Init>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000876:	f000 fa3b 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000886:	1d3a      	adds	r2, r7, #4
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_TIM6_Init+0x6c>)
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f002 fd65 	bl	800335c <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000896:	f000 fa2b 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b004      	add	sp, #16
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	200000ec 	.word	0x200000ec
 80008a8:	40001000 	.word	0x40001000
 80008ac:	00003e7f 	.word	0x00003e7f

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008b6:	4a24      	ldr	r2, [pc, #144]	; (8000948 <MX_USART1_UART_Init+0x98>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008bc:	22e1      	movs	r2, #225	; 0xe1
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fdb4 	bl	8003468 <HAL_UART_Init>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000904:	f000 f9f4 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART1_UART_Init+0x94>)
 800090a:	2100      	movs	r1, #0
 800090c:	0018      	movs	r0, r3
 800090e:	f004 f949 	bl	8004ba4 <HAL_UARTEx_SetTxFifoThreshold>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f9eb 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_USART1_UART_Init+0x94>)
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f004 f980 	bl	8004c24 <HAL_UARTEx_SetRxFifoThreshold>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f9e2 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_USART1_UART_Init+0x94>)
 800092e:	0018      	movs	r0, r3
 8000930:	f004 f8fe 	bl	8004b30 <HAL_UARTEx_DisableFifoMode>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f9da 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000138 	.word	0x20000138
 8000948:	40013800 	.word	0x40013800

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000952:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <MX_USART2_UART_Init+0x98>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000958:	22e1      	movs	r2, #225	; 0xe1
 800095a:	0252      	lsls	r2, r2, #9
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000996:	0018      	movs	r0, r3
 8000998:	f002 fd66 	bl	8003468 <HAL_UART_Init>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f9a6 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f004 f8fb 	bl	8004ba4 <HAL_UARTEx_SetTxFifoThreshold>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f99d 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f004 f932 	bl	8004c24 <HAL_UARTEx_SetRxFifoThreshold>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f994 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f004 f8b0 	bl	8004b30 <HAL_UARTEx_DisableFifoMode>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f98c 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200001cc 	.word	0x200001cc
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_DMA_Init+0x38>)
 80009f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_DMA_Init+0x38>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_DMA_Init+0x38>)
 80009fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2009      	movs	r0, #9
 8000a0c:	f000 fcbc 	bl	8001388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a10:	2009      	movs	r0, #9
 8000a12:	f000 fcce 	bl	80013b2 <HAL_NVIC_EnableIRQ>

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40021000 	.word	0x40021000

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	240c      	movs	r4, #12
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2314      	movs	r3, #20
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f004 fa27 	bl	8004e88 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a40:	2104      	movs	r1, #4
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a58:	2120      	movs	r1, #32
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2220      	movs	r2, #32
 8000a64:	4013      	ands	r3, r2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_GPIO_Init+0xd0>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2200      	movs	r2, #0
 8000a88:	2120      	movs	r1, #32
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 f930 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0192      	lsls	r2, r2, #6
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2288      	movs	r2, #136	; 0x88
 8000a9c:	0352      	lsls	r2, r2, #13
 8000a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_GPIO_Init+0xd4>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f000 ffbb 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000ab2:	0021      	movs	r1, r4
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2202      	movs	r2, #2
 8000aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000acc:	187a      	adds	r2, r7, r1
 8000ace:	23a0      	movs	r3, #160	; 0xa0
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 ffa7 	bl	8001a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2007      	movs	r0, #7
 8000ae0:	f000 fc52 	bl	8001388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ae4:	2007      	movs	r0, #7
 8000ae6:	f000 fc64 	bl	80013b2 <HAL_NVIC_EnableIRQ>

}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b009      	add	sp, #36	; 0x24
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40021000 	.word	0x40021000
 8000af8:	50000800 	.word	0x50000800

08000afc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	000a      	movs	r2, r1
 8000b06:	1cbb      	adds	r3, r7, #2
 8000b08:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <HAL_UARTEx_RxEventCallback+0x60>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d118      	bne.n	8000b46 <HAL_UARTEx_RxEventCallback+0x4a>
    {
    	if ( rx_buff[0] != 0 )
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d014      	beq.n	8000b46 <HAL_UARTEx_RxEventCallback+0x4a>
    	{
    		// Jeśli dostałem potwierdzenie $RT = 0, to ustawiam odpowiednią zmienną
    		if ( strncmp ( (char*) rx_buff , rt_0_answer , strlen ( rt_0_answer ) ) == 0 )
 8000b1c:	4911      	ldr	r1, [pc, #68]	; (8000b64 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b20:	2208      	movs	r2, #8
 8000b22:	0018      	movs	r0, r3
 8000b24:	f004 f9d8 	bl	8004ed8 <strncmp>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d103      	bne.n	8000b34 <HAL_UARTEx_RxEventCallback+0x38>
    		{
    			rt_unsolicited = 0 ;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
    			__NOP () ;
 8000b32:	46c0      	nop			; (mov r8, r8)
    		}
    		if ( strncmp ( (char*) rx_buff , rt_ok_answer , strlen ( rt_ok_answer ) ) == 0 )
 8000b34:	490d      	ldr	r1, [pc, #52]	; (8000b6c <HAL_UARTEx_RxEventCallback+0x70>)
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b38:	2209      	movs	r2, #9
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f004 f9cc 	bl	8004ed8 <strncmp>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d100      	bne.n	8000b46 <HAL_UARTEx_RxEventCallback+0x4a>
    		{
    			__NOP () ;
 8000b44:	46c0      	nop			; (mov r8, r8)
    		}
    		//rx_buff[0] = 0 ;
    	}
    }
    HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000b46:	23fa      	movs	r3, #250	; 0xfa
 8000b48:	005a      	lsls	r2, r3, #1
 8000b4a:	4905      	ldr	r1, [pc, #20]	; (8000b60 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_UARTEx_RxEventCallback+0x74>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f004 f8aa 	bl	8004ca8 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	200002c0 	.word	0x200002c0
 8000b64:	080057e8 	.word	0x080057e8
 8000b68:	20000033 	.word	0x20000033
 8000b6c:	080057dc 	.word	0x080057dc
 8000b70:	20000138 	.word	0x20000138

08000b74 <send2swarm_at_command>:
			break ;
		}
	}
}
void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	1dbb      	adds	r3, r7, #6
 8000b80:	801a      	strh	r2, [r3, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff fabd 	bl	8000104 <strlen>
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	251f      	movs	r5, #31
 8000b8e:	197c      	adds	r4, r7, r5
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 f85d 	bl	8000c54 <nmea_checksum>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	7023      	strb	r3, [r4, #0]
	char uart_tx_buff[10] ;

	sprintf ( (char*) uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000b9e:	197b      	adds	r3, r7, r5
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4917      	ldr	r1, [pc, #92]	; (8000c04 <send2swarm_at_command+0x90>)
 8000ba6:	2414      	movs	r4, #20
 8000ba8:	1938      	adds	r0, r7, r4
 8000baa:	f004 f975 	bl	8004e98 <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) uart_tx_buff ,  strlen ( (char*) uart_tx_buff ) , UART_TX_TIMEOUT ) ;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff faa7 	bl	8000104 <strlen>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	1939      	adds	r1, r7, r4
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <send2swarm_at_command+0x94>)
 8000bbe:	2364      	movs	r3, #100	; 0x64
 8000bc0:	f002 fca8 	bl	8003514 <HAL_UART_Transmit>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <send2swarm_at_command+0x98>)
 8000bca:	701a      	strb	r2, [r3, #0]
	waiting_for_answer = 1 ;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <send2swarm_at_command+0x9c>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
	//__HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ; //https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <send2swarm_at_command+0xa0>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 f965 	bl	8002ea4 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000bda:	e00a      	b.n	8000bf2 <send2swarm_at_command+0x7e>
	{
		if ( check_answer ( answer ) )
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 f81c 	bl	8000c1c <check_answer>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d004      	beq.n	8000bf2 <send2swarm_at_command+0x7e>
		{
			checklist = step ;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <send2swarm_at_command+0xa4>)
 8000bea:	1dba      	adds	r2, r7, #6
 8000bec:	8812      	ldrh	r2, [r2, #0]
 8000bee:	801a      	strh	r2, [r3, #0]
			break ;
 8000bf0:	e004      	b.n	8000bfc <send2swarm_at_command+0x88>
	while ( waiting_for_answer )
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <send2swarm_at_command+0x9c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f0      	bne.n	8000bdc <send2swarm_at_command+0x68>
		}
	}
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b008      	add	sp, #32
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	080057a8 	.word	0x080057a8
 8000c08:	20000138 	.word	0x20000138
 8000c0c:	200002bf 	.word	0x200002bf
 8000c10:	200002be 	.word	0x200002be
 8000c14:	200000ec 	.word	0x200000ec
 8000c18:	200002bc 	.word	0x200002bc

08000c1c <check_answer>:
uint8_t check_answer ( const char* answer )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fa6c 	bl	8000104 <strlen>
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <check_answer+0x34>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f004 f950 	bl	8004ed8 <strncmp>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d104      	bne.n	8000c46 <check_answer+0x2a>
	{
		rx_buff[0] = 0 ;
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <check_answer+0x34>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
		return 1 ;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <check_answer+0x2c>
	}
	else
		return 0 ;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200002c0 	.word	0x200002c0

08000c54 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b24      	cmp	r3, #36	; 0x24
 8000c68:	d102      	bne.n	8000c70 <nmea_checksum+0x1c>
		i++ ;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000c70:	230b      	movs	r3, #11
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e00c      	b.n	8000c94 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	18d3      	adds	r3, r2, r3
 8000c80:	7819      	ldrb	r1, [r3, #0]
 8000c82:	220b      	movs	r2, #11
 8000c84:	18bb      	adds	r3, r7, r2
 8000c86:	18ba      	adds	r2, r7, r2
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	404a      	eors	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d205      	bcs.n	8000ca8 <nmea_checksum+0x54>
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1e8      	bne.n	8000c7a <nmea_checksum+0x26>
	return cs;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d107      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		waiting_for_answer = 0 ;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f002 f942 	bl	8002f5c <HAL_TIM_Base_Stop_IT>
		//NVIC_SystemReset () ;
		__NOP () ;
 8000cd8:	46c0      	nop			; (mov r8, r8)
	}
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40001000 	.word	0x40001000
 8000ce8:	200002be 	.word	0x200002be
 8000cec:	200000ec 	.word	0x200000ec

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x44>)
 8000d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_MspInit+0x44>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x44>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x44>)
 8000d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_MspInit+0x44>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0549      	lsls	r1, r1, #21
 8000d24:	430a      	orrs	r2, r1
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_MspInit+0x44>)
 8000d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	055b      	lsls	r3, r3, #21
 8000d30:	4013      	ands	r3, r2
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b091      	sub	sp, #68	; 0x44
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	240c      	movs	r4, #12
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	2334      	movs	r3, #52	; 0x34
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f004 f896 	bl	8004e88 <memset>
  if(hrtc->Instance==RTC)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <HAL_RTC_MspInit+0x74>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d124      	bne.n	8000db0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	0292      	lsls	r2, r2, #10
 8000d6c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0052      	lsls	r2, r2, #1
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f001 fd33 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d82:	f7ff ffb5 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_RTC_MspInit+0x78>)
 8000d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_RTC_MspInit+0x78>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0209      	lsls	r1, r1, #8
 8000d90:	430a      	orrs	r2, r1
 8000d92:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_RTC_MspInit+0x78>)
 8000d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_RTC_MspInit+0x78>)
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	00c9      	lsls	r1, r1, #3
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_RTC_MspInit+0x78>)
 8000da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4013      	ands	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b011      	add	sp, #68	; 0x44
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	40002800 	.word	0x40002800
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_TIM_Base_MspInit+0x44>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d113      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_TIM_Base_MspInit+0x48>)
 8000dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_TIM_Base_MspInit+0x48>)
 8000dd8:	2110      	movs	r1, #16
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de2:	2210      	movs	r2, #16
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2011      	movs	r0, #17
 8000df0:	f000 faca 	bl	8001388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000df4:	2011      	movs	r0, #17
 8000df6:	f000 fadc 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40001000 	.word	0x40001000
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b099      	sub	sp, #100	; 0x64
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	234c      	movs	r3, #76	; 0x4c
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f004 f832 	bl	8004e88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	2418      	movs	r4, #24
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	0018      	movs	r0, r3
 8000e2a:	2334      	movs	r3, #52	; 0x34
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f004 f82a 	bl	8004e88 <memset>
  if(huart->Instance==USART1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a5e      	ldr	r2, [pc, #376]	; (8000fb4 <HAL_UART_MspInit+0x1a8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d170      	bne.n	8000f20 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 fcc9 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e56:	f7ff ff4b 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5a:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5e:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	01c9      	lsls	r1, r1, #7
 8000e64:	430a      	orrs	r2, r1
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
 8000e68:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	01db      	lsls	r3, r3, #7
 8000e70:	4013      	ands	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7a:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	2204      	movs	r2, #4
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e8e:	214c      	movs	r1, #76	; 0x4c
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2230      	movs	r2, #48	; 0x30
 8000e94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2202      	movs	r2, #2
 8000e9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	4a42      	ldr	r2, [pc, #264]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	f000 fdb7 	bl	8001a28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ebc:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <HAL_UART_MspInit+0x1b8>)
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ec2:	2232      	movs	r2, #50	; 0x32
 8000ec4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fa7a 	bl	80013ec <HAL_DMA_Init>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000efc:	f7ff fef8 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	4a2e      	ldr	r2, [pc, #184]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000f06:	505a      	str	r2, [r3, r1]
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	201b      	movs	r0, #27
 8000f14:	f000 fa38 	bl	8001388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f18:	201b      	movs	r0, #27
 8000f1a:	f000 fa4a 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f1e:	e044      	b.n	8000faa <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <HAL_UART_MspInit+0x1bc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d13f      	bne.n	8000faa <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f2a:	2118      	movs	r1, #24
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2202      	movs	r2, #2
 8000f30:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f001 fc52 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8000f44:	f7ff fed4 	bl	8000cf0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	0289      	lsls	r1, r1, #10
 8000f52:	430a      	orrs	r2, r1
 8000f54:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	029b      	lsls	r3, r3, #10
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f74:	2201      	movs	r2, #1
 8000f76:	4013      	ands	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000f7c:	214c      	movs	r1, #76	; 0x4c
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	220c      	movs	r2, #12
 8000f82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2202      	movs	r2, #2
 8000f88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2201      	movs	r2, #1
 8000f9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	187a      	adds	r2, r7, r1
 8000f9e:	23a0      	movs	r3, #160	; 0xa0
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 fd3f 	bl	8001a28 <HAL_GPIO_Init>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b019      	add	sp, #100	; 0x64
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	50000800 	.word	0x50000800
 8000fc0:	20000260 	.word	0x20000260
 8000fc4:	40020008 	.word	0x40020008
 8000fc8:	40004400 	.word	0x40004400

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f902 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	019b      	lsls	r3, r3, #6
 8001002:	0018      	movs	r0, r3
 8001004:	f000 fe92 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <DMA1_Channel1_IRQHandler+0x14>)
 8001016:	0018      	movs	r0, r3
 8001018:	f000 fbc4 	bl	80017a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000260 	.word	0x20000260

08001028 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800102e:	0018      	movs	r0, r3
 8001030:	f001 ffc2 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	200000ec 	.word	0x200000ec

08001040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <USART1_IRQHandler+0x14>)
 8001046:	0018      	movs	r0, r3
 8001048:	f002 fb00 	bl	800364c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	20000138 	.word	0x20000138

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	18d3      	adds	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f003 fed4 	bl	8004e34 <__errno>
 800108c:	0003      	movs	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	2301      	movs	r3, #1
 8001094:	425b      	negs	r3, r3
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	18d2      	adds	r2, r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b006      	add	sp, #24
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20009000 	.word	0x20009000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	200004b4 	.word	0x200004b4
 80010c0:	200004d0 	.word	0x200004d0

080010c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d4:	f7ff fff6 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <LoopForever+0x6>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LoopForever+0xe>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <LoopForever+0x16>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010fe:	f003 fe9f 	bl	8004e40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001102:	f7ff fa9d 	bl	8000640 <main>

08001106 <LoopForever>:

LoopForever:
  b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   r0, =_estack
 8001108:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001114:	080058c8 	.word	0x080058c8
  ldr r2, =_sbss
 8001118:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800111c:	200004cc 	.word	0x200004cc

08001120 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_COMP_IRQHandler>
	...

08001124 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x3c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Init+0x3c>)
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	0049      	lsls	r1, r1, #1
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f810 	bl	8001164 <HAL_InitTick>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d003      	beq.n	8001150 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e001      	b.n	8001154 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fdd4 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	230f      	movs	r3, #15
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_InitTick+0x88>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d02b      	beq.n	80011d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_InitTick+0x8c>)
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_InitTick+0x88>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	0019      	movs	r1, r3
 8001186:	23fa      	movs	r3, #250	; 0xfa
 8001188:	0098      	lsls	r0, r3, #2
 800118a:	f7fe ffcd 	bl	8000128 <__udivsi3>
 800118e:	0003      	movs	r3, r0
 8001190:	0019      	movs	r1, r3
 8001192:	0020      	movs	r0, r4
 8001194:	f7fe ffc8 	bl	8000128 <__udivsi3>
 8001198:	0003      	movs	r3, r0
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f919 	bl	80013d2 <HAL_SYSTICK_Config>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d112      	bne.n	80011ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d80a      	bhi.n	80011c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	2301      	movs	r3, #1
 80011ae:	425b      	negs	r3, r3
 80011b0:	2200      	movs	r2, #0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f8e8 	bl	8001388 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_InitTick+0x90>)
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e00d      	b.n	80011dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e008      	b.n	80011dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e003      	b.n	80011dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	781b      	ldrb	r3, [r3, #0]
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b005      	add	sp, #20
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	2000003c 	.word	0x2000003c
 80011f0:	20000034 	.word	0x20000034
 80011f4:	20000038 	.word	0x20000038

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	001a      	movs	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	18d2      	adds	r2, r2, r3
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_IncTick+0x20>)
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	2000003c 	.word	0x2000003c
 8001218:	200004b8 	.word	0x200004b8

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	200004b8 	.word	0x200004b8

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	0002      	movs	r2, r0
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b7f      	cmp	r3, #127	; 0x7f
 8001242:	d809      	bhi.n	8001258 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	001a      	movs	r2, r3
 800124a:	231f      	movs	r3, #31
 800124c:	401a      	ands	r2, r3
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_EnableIRQ+0x30>)
 8001250:	2101      	movs	r1, #1
 8001252:	4091      	lsls	r1, r2
 8001254:	000a      	movs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	0002      	movs	r2, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b7f      	cmp	r3, #127	; 0x7f
 8001278:	d828      	bhi.n	80012cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <__NVIC_SetPriority+0xd4>)
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b25b      	sxtb	r3, r3
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	33c0      	adds	r3, #192	; 0xc0
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	589b      	ldr	r3, [r3, r2]
 800128a:	1dfa      	adds	r2, r7, #7
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	0011      	movs	r1, r2
 8001290:	2203      	movs	r2, #3
 8001292:	400a      	ands	r2, r1
 8001294:	00d2      	lsls	r2, r2, #3
 8001296:	21ff      	movs	r1, #255	; 0xff
 8001298:	4091      	lsls	r1, r2
 800129a:	000a      	movs	r2, r1
 800129c:	43d2      	mvns	r2, r2
 800129e:	401a      	ands	r2, r3
 80012a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	019b      	lsls	r3, r3, #6
 80012a6:	22ff      	movs	r2, #255	; 0xff
 80012a8:	401a      	ands	r2, r3
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	0018      	movs	r0, r3
 80012b0:	2303      	movs	r3, #3
 80012b2:	4003      	ands	r3, r0
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b8:	481f      	ldr	r0, [pc, #124]	; (8001338 <__NVIC_SetPriority+0xd4>)
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	430a      	orrs	r2, r1
 80012c4:	33c0      	adds	r3, #192	; 0xc0
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ca:	e031      	b.n	8001330 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <__NVIC_SetPriority+0xd8>)
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0019      	movs	r1, r3
 80012d4:	230f      	movs	r3, #15
 80012d6:	400b      	ands	r3, r1
 80012d8:	3b08      	subs	r3, #8
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3306      	adds	r3, #6
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	18d3      	adds	r3, r2, r3
 80012e2:	3304      	adds	r3, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	1dfa      	adds	r2, r7, #7
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	0011      	movs	r1, r2
 80012ec:	2203      	movs	r2, #3
 80012ee:	400a      	ands	r2, r1
 80012f0:	00d2      	lsls	r2, r2, #3
 80012f2:	21ff      	movs	r1, #255	; 0xff
 80012f4:	4091      	lsls	r1, r2
 80012f6:	000a      	movs	r2, r1
 80012f8:	43d2      	mvns	r2, r2
 80012fa:	401a      	ands	r2, r3
 80012fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	019b      	lsls	r3, r3, #6
 8001302:	22ff      	movs	r2, #255	; 0xff
 8001304:	401a      	ands	r2, r3
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	0018      	movs	r0, r3
 800130c:	2303      	movs	r3, #3
 800130e:	4003      	ands	r3, r0
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <__NVIC_SetPriority+0xd8>)
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	001c      	movs	r4, r3
 800131c:	230f      	movs	r3, #15
 800131e:	4023      	ands	r3, r4
 8001320:	3b08      	subs	r3, #8
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	430a      	orrs	r2, r1
 8001326:	3306      	adds	r3, #6
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	18c3      	adds	r3, r0, r3
 800132c:	3304      	adds	r3, #4
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b003      	add	sp, #12
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	045b      	lsls	r3, r3, #17
 8001350:	429a      	cmp	r2, r3
 8001352:	d301      	bcc.n	8001358 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001354:	2301      	movs	r3, #1
 8001356:	e010      	b.n	800137a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <SysTick_Config+0x44>)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	3a01      	subs	r2, #1
 800135e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001360:	2301      	movs	r3, #1
 8001362:	425b      	negs	r3, r3
 8001364:	2103      	movs	r1, #3
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff ff7c 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x44>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x44>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	210f      	movs	r1, #15
 8001394:	187b      	adds	r3, r7, r1
 8001396:	1c02      	adds	r2, r0, #0
 8001398:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	187b      	adds	r3, r7, r1
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	0011      	movs	r1, r2
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b004      	add	sp, #16
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	0002      	movs	r2, r0
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff ff33 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ffaf 	bl	8001340 <SysTick_Config>
 80013e2:	0003      	movs	r3, r0
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e077      	b.n	80014ee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a3d      	ldr	r2, [pc, #244]	; (80014f8 <HAL_DMA_Init+0x10c>)
 8001404:	4694      	mov	ip, r2
 8001406:	4463      	add	r3, ip
 8001408:	2114      	movs	r1, #20
 800140a:	0018      	movs	r0, r3
 800140c:	f7fe fe8c 	bl	8000128 <__udivsi3>
 8001410:	0003      	movs	r3, r0
 8001412:	009a      	lsls	r2, r3, #2
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2225      	movs	r2, #37	; 0x25
 800141c:	2102      	movs	r1, #2
 800141e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4934      	ldr	r1, [pc, #208]	; (80014fc <HAL_DMA_Init+0x110>)
 800142c:	400a      	ands	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0018      	movs	r0, r3
 800146a:	f000 fa8d 	bl	8001988 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	01db      	lsls	r3, r3, #7
 8001476:	429a      	cmp	r2, r3
 8001478:	d102      	bne.n	8001480 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	213f      	movs	r1, #63	; 0x3f
 800148a:	400a      	ands	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001496:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d011      	beq.n	80014c4 <HAL_DMA_Init+0xd8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d80d      	bhi.n	80014c4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 fa98 	bl	80019e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	e008      	b.n	80014d6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2225      	movs	r2, #37	; 0x25
 80014e0:	2101      	movs	r1, #1
 80014e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2224      	movs	r2, #36	; 0x24
 80014e8:	2100      	movs	r1, #0
 80014ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	bffdfff8 	.word	0xbffdfff8
 80014fc:	ffff800f 	.word	0xffff800f

08001500 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2317      	movs	r3, #23
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2224      	movs	r2, #36	; 0x24
 800151a:	5c9b      	ldrb	r3, [r3, r2]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_DMA_Start_IT+0x24>
 8001520:	2302      	movs	r3, #2
 8001522:	e06f      	b.n	8001604 <HAL_DMA_Start_IT+0x104>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	2101      	movs	r1, #1
 800152a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2225      	movs	r2, #37	; 0x25
 8001530:	5c9b      	ldrb	r3, [r3, r2]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d157      	bne.n	80015e8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2225      	movs	r2, #37	; 0x25
 800153c:	2102      	movs	r1, #2
 800153e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	438a      	bics	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 f9d3 	bl	8001908 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	210e      	movs	r1, #14
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e00f      	b.n	800159c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2104      	movs	r1, #4
 8001588:	438a      	bics	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	210a      	movs	r1, #10
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	4013      	ands	r3, r2
 80015a8:	d008      	beq.n	80015bc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0049      	lsls	r1, r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0049      	lsls	r1, r1, #1
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e00a      	b.n	80015fe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2224      	movs	r2, #36	; 0x24
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80015f6:	2317      	movs	r3, #23
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015fe:	2317      	movs	r3, #23
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	781b      	ldrb	r3, [r3, #0]
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b006      	add	sp, #24
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e050      	b.n	80016c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2225      	movs	r2, #37	; 0x25
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d008      	beq.n	800163c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2204      	movs	r2, #4
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	; 0x24
 8001634:	2100      	movs	r1, #0
 8001636:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e041      	b.n	80016c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	210e      	movs	r1, #14
 8001648:	438a      	bics	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	491c      	ldr	r1, [pc, #112]	; (80016c8 <HAL_DMA_Abort+0xbc>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2101      	movs	r1, #1
 8001668:	438a      	bics	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_DMA_Abort+0xc0>)
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	221c      	movs	r2, #28
 8001676:	4013      	ands	r3, r2
 8001678:	2201      	movs	r2, #1
 800167a:	409a      	lsls	r2, r3
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_DMA_Abort+0xc0>)
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800168a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00c      	beq.n	80016ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800169e:	490a      	ldr	r1, [pc, #40]	; (80016c8 <HAL_DMA_Abort+0xbc>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80016ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2225      	movs	r2, #37	; 0x25
 80016b2:	2101      	movs	r1, #1
 80016b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2224      	movs	r2, #36	; 0x24
 80016ba:	2100      	movs	r1, #0
 80016bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	fffffeff 	.word	0xfffffeff
 80016cc:	40020000 	.word	0x40020000

080016d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	210f      	movs	r1, #15
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2225      	movs	r2, #37	; 0x25
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d006      	beq.n	80016fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2204      	movs	r2, #4
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e049      	b.n	800178e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	210e      	movs	r1, #14
 8001706:	438a      	bics	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	438a      	bics	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	491d      	ldr	r1, [pc, #116]	; (800179c <HAL_DMA_Abort_IT+0xcc>)
 8001726:	400a      	ands	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_DMA_Abort_IT+0xd0>)
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	221c      	movs	r2, #28
 8001734:	4013      	ands	r3, r2
 8001736:	2201      	movs	r2, #1
 8001738:	409a      	lsls	r2, r3
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_DMA_Abort_IT+0xd0>)
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001748:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175c:	490f      	ldr	r1, [pc, #60]	; (800179c <HAL_DMA_Abort_IT+0xcc>)
 800175e:	400a      	ands	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800176a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2225      	movs	r2, #37	; 0x25
 8001770:	2101      	movs	r1, #1
 8001772:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	0010      	movs	r0, r2
 800178c:	4798      	blx	r3
    }
  }
  return status;
 800178e:	230f      	movs	r3, #15
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	781b      	ldrb	r3, [r3, #0]
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}
 800179c:	fffffeff 	.word	0xfffffeff
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80017ac:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_DMA_IRQHandler+0x160>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	221c      	movs	r2, #28
 80017c0:	4013      	ands	r3, r2
 80017c2:	2204      	movs	r2, #4
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	d027      	beq.n	800181e <HAL_DMA_IRQHandler+0x7a>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2204      	movs	r2, #4
 80017d2:	4013      	ands	r3, r2
 80017d4:	d023      	beq.n	800181e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2220      	movs	r2, #32
 80017de:	4013      	ands	r3, r2
 80017e0:	d107      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2104      	movs	r1, #4
 80017ee:	438a      	bics	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_DMA_IRQHandler+0x160>)
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	221c      	movs	r2, #28
 80017fc:	4013      	ands	r3, r2
 80017fe:	2204      	movs	r2, #4
 8001800:	409a      	lsls	r2, r3
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <HAL_DMA_IRQHandler+0x160>)
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	2b00      	cmp	r3, #0
 800180e:	d100      	bne.n	8001812 <HAL_DMA_IRQHandler+0x6e>
 8001810:	e073      	b.n	80018fa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	0010      	movs	r0, r2
 800181a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800181c:	e06d      	b.n	80018fa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	221c      	movs	r2, #28
 8001824:	4013      	ands	r3, r2
 8001826:	2202      	movs	r2, #2
 8001828:	409a      	lsls	r2, r3
 800182a:	0013      	movs	r3, r2
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4013      	ands	r3, r2
 8001830:	d02e      	beq.n	8001890 <HAL_DMA_IRQHandler+0xec>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2202      	movs	r2, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d02a      	beq.n	8001890 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2220      	movs	r2, #32
 8001842:	4013      	ands	r3, r2
 8001844:	d10b      	bne.n	800185e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	210a      	movs	r1, #10
 8001852:	438a      	bics	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2225      	movs	r2, #37	; 0x25
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <HAL_DMA_IRQHandler+0x160>)
 8001860:	6859      	ldr	r1, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	221c      	movs	r2, #28
 8001868:	4013      	ands	r3, r2
 800186a:	2202      	movs	r2, #2
 800186c:	409a      	lsls	r2, r3
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_DMA_IRQHandler+0x160>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2224      	movs	r2, #36	; 0x24
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d03a      	beq.n	80018fa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	0010      	movs	r0, r2
 800188c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800188e:	e034      	b.n	80018fa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	221c      	movs	r2, #28
 8001896:	4013      	ands	r3, r2
 8001898:	2208      	movs	r2, #8
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	d02b      	beq.n	80018fc <HAL_DMA_IRQHandler+0x158>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2208      	movs	r2, #8
 80018a8:	4013      	ands	r3, r2
 80018aa:	d027      	beq.n	80018fc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	210e      	movs	r1, #14
 80018b8:	438a      	bics	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_DMA_IRQHandler+0x160>)
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	221c      	movs	r2, #28
 80018c6:	4013      	ands	r3, r2
 80018c8:	2201      	movs	r2, #1
 80018ca:	409a      	lsls	r2, r3
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_DMA_IRQHandler+0x160>)
 80018ce:	430a      	orrs	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2225      	movs	r2, #37	; 0x25
 80018dc:	2101      	movs	r1, #1
 80018de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2224      	movs	r2, #36	; 0x24
 80018e4:	2100      	movs	r1, #0
 80018e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	0010      	movs	r0, r2
 80018f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46c0      	nop			; (mov r8, r8)
}
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40020000 	.word	0x40020000

08001908 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800191e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001930:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <DMA_SetConfig+0x7c>)
 8001934:	6859      	ldr	r1, [r3, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	221c      	movs	r2, #28
 800193c:	4013      	ands	r3, r2
 800193e:	2201      	movs	r2, #1
 8001940:	409a      	lsls	r2, r3
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <DMA_SetConfig+0x7c>)
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d108      	bne.n	800196a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001968:	e007      	b.n	800197a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	60da      	str	r2, [r3, #12]
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	40020000 	.word	0x40020000

08001988 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001998:	4694      	mov	ip, r2
 800199a:	4463      	add	r3, ip
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	001a      	movs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	001a      	movs	r2, r3
 80019aa:	23ff      	movs	r3, #255	; 0xff
 80019ac:	4013      	ands	r3, r2
 80019ae:	3b08      	subs	r3, #8
 80019b0:	2114      	movs	r1, #20
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7fe fbb8 	bl	8000128 <__udivsi3>
 80019b8:	0003      	movs	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80019c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	221f      	movs	r2, #31
 80019c6:	4013      	ands	r3, r2
 80019c8:	2201      	movs	r2, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b004      	add	sp, #16
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	10008200 	.word	0x10008200
 80019dc:	40020880 	.word	0x40020880

080019e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	223f      	movs	r2, #63	; 0x3f
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019f6:	4694      	mov	ip, r2
 80019f8:	4463      	add	r3, ip
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	001a      	movs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	1000823f 	.word	0x1000823f
 8001a24:	40020940 	.word	0x40020940

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e147      	b.n	8001cc8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4091      	lsls	r1, r2
 8001a42:	000a      	movs	r2, r1
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d100      	bne.n	8001a50 <HAL_GPIO_Init+0x28>
 8001a4e:	e138      	b.n	8001cc2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x40>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4013      	ands	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2107      	movs	r1, #7
 8001b3e:	400b      	ands	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	6939      	ldr	r1, [r7, #16]
 8001b58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2203      	movs	r2, #3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x174>
 8001b9a:	e092      	b.n	8001cc2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b9c:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	589b      	ldr	r3, [r3, r2]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4013      	ands	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	23a0      	movs	r3, #160	; 0xa0
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x1ca>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a45      	ldr	r2, [pc, #276]	; (8001ce4 <HAL_GPIO_Init+0x2bc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x1c6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a44      	ldr	r2, [pc, #272]	; (8001ce8 <HAL_GPIO_Init+0x2c0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x1c2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a43      	ldr	r2, [pc, #268]	; (8001cec <HAL_GPIO_Init+0x2c4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x1be>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	00d2      	lsls	r2, r2, #3
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c04:	4936      	ldr	r1, [pc, #216]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c12:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	035b      	lsls	r3, r3, #13
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43da      	mvns	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	4013      	ands	r3, r2
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c68:	2384      	movs	r3, #132	; 0x84
 8001c6a:	58d3      	ldr	r3, [r2, r3]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c8c:	4914      	ldr	r1, [pc, #80]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	2284      	movs	r2, #132	; 0x84
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	58d3      	ldr	r3, [r2, r3]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cba:	4909      	ldr	r1, [pc, #36]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	40da      	lsrs	r2, r3
 8001cd0:	1e13      	subs	r3, r2, #0
 8001cd2:	d000      	beq.n	8001cd6 <HAL_GPIO_Init+0x2ae>
 8001cd4:	e6b0      	b.n	8001a38 <HAL_GPIO_Init+0x10>
  }
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b006      	add	sp, #24
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	50000400 	.word	0x50000400
 8001ce8:	50000800 	.word	0x50000800
 8001cec:	50000c00 	.word	0x50000c00

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	0008      	movs	r0, r1
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	1cbb      	adds	r3, r7, #2
 8001cfe:	1c02      	adds	r2, r0, #0
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	1c7b      	adds	r3, r7, #1
 8001d04:	1c0a      	adds	r2, r1, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d08:	1c7b      	adds	r3, r7, #1
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d10:	1cbb      	adds	r3, r7, #2
 8001d12:	881a      	ldrh	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1a:	1cbb      	adds	r3, r7, #2
 8001d1c:	881a      	ldrh	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	0002      	movs	r2, r0
 8001d34:	1dbb      	adds	r3, r7, #6
 8001d36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	1dba      	adds	r2, r7, #6
 8001d3e:	8812      	ldrh	r2, [r2, #0]
 8001d40:	4013      	ands	r3, r2
 8001d42:	d008      	beq.n	8001d56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d46:	1dba      	adds	r2, r7, #6
 8001d48:	8812      	ldrh	r2, [r2, #0]
 8001d4a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001d4c:	1dbb      	adds	r3, r7, #6
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 f815 	bl	8001d80 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	1dba      	adds	r2, r7, #6
 8001d5c:	8812      	ldrh	r2, [r2, #0]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d008      	beq.n	8001d74 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d64:	1dba      	adds	r2, r7, #6
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001d6a:	1dbb      	adds	r3, r7, #6
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f810 	bl	8001d94 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021800 	.word	0x40021800

08001d80 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	0002      	movs	r2, r0
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	1dbb      	adds	r3, r7, #6
 8001d9e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0049      	lsls	r1, r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d11f      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	0013      	movs	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	189b      	adds	r3, r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4912      	ldr	r1, [pc, #72]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7fe f996 	bl	8000128 <__udivsi3>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e02:	e008      	b.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e001      	b.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e009      	b.n	8001e2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	401a      	ands	r2, r3
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d0ed      	beq.n	8001e04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	40007000 	.word	0x40007000
 8001e38:	fffff9ff 	.word	0xfffff9ff
 8001e3c:	20000034 	.word	0x20000034
 8001e40:	000f4240 	.word	0x000f4240

08001e44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	23e0      	movs	r3, #224	; 0xe0
 8001e4e:	01db      	lsls	r3, r3, #7
 8001e50:	4013      	ands	r3, r2
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e2fe      	b.n	800246c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	d100      	bne.n	8001e7a <HAL_RCC_OscConfig+0x1e>
 8001e78:	e07c      	b.n	8001f74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7a:	4bc3      	ldr	r3, [pc, #780]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2238      	movs	r2, #56	; 0x38
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	4bc0      	ldr	r3, [pc, #768]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3e>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	4bb9      	ldr	r3, [pc, #740]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d062      	beq.n	8001f72 <HAL_RCC_OscConfig+0x116>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d15e      	bne.n	8001f72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e2d9      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x78>
 8001ec4:	4bb0      	ldr	r3, [pc, #704]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4baf      	ldr	r3, [pc, #700]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	0249      	lsls	r1, r1, #9
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e020      	b.n	8001f16 <HAL_RCC_OscConfig+0xba>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	23a0      	movs	r3, #160	; 0xa0
 8001eda:	02db      	lsls	r3, r3, #11
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d10e      	bne.n	8001efe <HAL_RCC_OscConfig+0xa2>
 8001ee0:	4ba9      	ldr	r3, [pc, #676]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4ba8      	ldr	r3, [pc, #672]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	02c9      	lsls	r1, r1, #11
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	4ba6      	ldr	r3, [pc, #664]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4ba5      	ldr	r3, [pc, #660]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	0249      	lsls	r1, r1, #9
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e00b      	b.n	8001f16 <HAL_RCC_OscConfig+0xba>
 8001efe:	4ba2      	ldr	r3, [pc, #648]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4ba1      	ldr	r3, [pc, #644]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f04:	49a1      	ldr	r1, [pc, #644]	; (800218c <HAL_RCC_OscConfig+0x330>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	4b9f      	ldr	r3, [pc, #636]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b9e      	ldr	r3, [pc, #632]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f10:	499f      	ldr	r1, [pc, #636]	; (8002190 <HAL_RCC_OscConfig+0x334>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d014      	beq.n	8001f48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f97d 	bl	800121c <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f978 	bl	800121c <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e298      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3a:	4b93      	ldr	r3, [pc, #588]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	029b      	lsls	r3, r3, #10
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xcc>
 8001f46:	e015      	b.n	8001f74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f968 	bl	800121c <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f52:	f7ff f963 	bl	800121c <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e283      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f64:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0xf6>
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d100      	bne.n	8001f80 <HAL_RCC_OscConfig+0x124>
 8001f7e:	e099      	b.n	80020b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f80:	4b81      	ldr	r3, [pc, #516]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2238      	movs	r2, #56	; 0x38
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8a:	4b7f      	ldr	r3, [pc, #508]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x144>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d002      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d135      	bne.n	8002012 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa6:	4b78      	ldr	r3, [pc, #480]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d005      	beq.n	8001fbe <HAL_RCC_OscConfig+0x162>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e256      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbe:	4b72      	ldr	r3, [pc, #456]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a74      	ldr	r2, [pc, #464]	; (8002194 <HAL_RCC_OscConfig+0x338>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	021a      	lsls	r2, r3, #8
 8001fce:	4b6e      	ldr	r3, [pc, #440]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d112      	bne.n	8002000 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fda:	4b6b      	ldr	r3, [pc, #428]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <HAL_RCC_OscConfig+0x33c>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fee:	4b66      	ldr	r3, [pc, #408]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0adb      	lsrs	r3, r3, #11
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	4a68      	ldr	r2, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x340>)
 8001ffa:	40da      	lsrs	r2, r3
 8001ffc:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x344>)
 8001ffe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x348>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff f8ad 	bl	8001164 <HAL_InitTick>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d051      	beq.n	80020b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e22c      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d030      	beq.n	800207c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800201a:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a5e      	ldr	r2, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x33c>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b55      	ldr	r3, [pc, #340]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	0049      	lsls	r1, r1, #1
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff f8ee 	bl	800121c <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff f8e9 	bl	800121c <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e209      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4013      	ands	r3, r2
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b48      	ldr	r3, [pc, #288]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a4a      	ldr	r2, [pc, #296]	; (8002194 <HAL_RCC_OscConfig+0x338>)
 800206a:	4013      	ands	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	021a      	lsls	r2, r3, #8
 8002074:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e01b      	b.n	80020b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800207c:	4b42      	ldr	r3, [pc, #264]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002082:	4949      	ldr	r1, [pc, #292]	; (80021a8 <HAL_RCC_OscConfig+0x34c>)
 8002084:	400a      	ands	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f8c8 	bl	800121c <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002092:	f7ff f8c3 	bl	800121c <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e1e3      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4013      	ands	r3, r2
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x236>
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	d047      	beq.n	800214e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2238      	movs	r2, #56	; 0x38
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b18      	cmp	r3, #24
 80020c8:	d10a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80020ca:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	2202      	movs	r2, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	d03c      	beq.n	800214e <HAL_RCC_OscConfig+0x2f2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d138      	bne.n	800214e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e1c5      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d019      	beq.n	800211c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff f892 	bl	800121c <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff f88d 	bl	800121c <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e1ad      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	2202      	movs	r2, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d0f1      	beq.n	80020fe <HAL_RCC_OscConfig+0x2a2>
 800211a:	e018      	b.n	800214e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 800211e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002122:	2101      	movs	r1, #1
 8002124:	438a      	bics	r2, r1
 8002126:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f878 	bl	800121c <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002132:	f7ff f873 	bl	800121c <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e193      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d1f1      	bne.n	8002132 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2204      	movs	r2, #4
 8002154:	4013      	ands	r3, r2
 8002156:	d100      	bne.n	800215a <HAL_RCC_OscConfig+0x2fe>
 8002158:	e0c6      	b.n	80022e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	231f      	movs	r3, #31
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2238      	movs	r2, #56	; 0x38
 8002168:	4013      	ands	r3, r2
 800216a:	2b20      	cmp	r3, #32
 800216c:	d11e      	bne.n	80021ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_OscConfig+0x32c>)
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d100      	bne.n	800217a <HAL_RCC_OscConfig+0x31e>
 8002178:	e0b6      	b.n	80022e8 <HAL_RCC_OscConfig+0x48c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d000      	beq.n	8002184 <HAL_RCC_OscConfig+0x328>
 8002182:	e0b1      	b.n	80022e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e171      	b.n	800246c <HAL_RCC_OscConfig+0x610>
 8002188:	40021000 	.word	0x40021000
 800218c:	fffeffff 	.word	0xfffeffff
 8002190:	fffbffff 	.word	0xfffbffff
 8002194:	ffff80ff 	.word	0xffff80ff
 8002198:	ffffc7ff 	.word	0xffffc7ff
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	20000034 	.word	0x20000034
 80021a4:	20000038 	.word	0x20000038
 80021a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ac:	4bb1      	ldr	r3, [pc, #708]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80021ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	055b      	lsls	r3, r3, #21
 80021b4:	4013      	ands	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x360>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x362>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d011      	beq.n	80021e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4bac      	ldr	r3, [pc, #688]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80021c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c6:	4bab      	ldr	r3, [pc, #684]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0549      	lsls	r1, r1, #21
 80021cc:	430a      	orrs	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80021d0:	4ba8      	ldr	r3, [pc, #672]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80021d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021de:	231f      	movs	r3, #31
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e6:	4ba4      	ldr	r3, [pc, #656]	; (8002478 <HAL_RCC_OscConfig+0x61c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d11a      	bne.n	8002228 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f2:	4ba1      	ldr	r3, [pc, #644]	; (8002478 <HAL_RCC_OscConfig+0x61c>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4ba0      	ldr	r3, [pc, #640]	; (8002478 <HAL_RCC_OscConfig+0x61c>)
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0049      	lsls	r1, r1, #1
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002200:	f7ff f80c 	bl	800121c <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7ff f807 	bl	800121c <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e127      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	4b96      	ldr	r3, [pc, #600]	; (8002478 <HAL_RCC_OscConfig+0x61c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4013      	ands	r3, r2
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x3e2>
 8002230:	4b90      	ldr	r3, [pc, #576]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002234:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x41c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x404>
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800224a:	4b8a      	ldr	r3, [pc, #552]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 800224c:	2104      	movs	r1, #4
 800224e:	430a      	orrs	r2, r1
 8002250:	65da      	str	r2, [r3, #92]	; 0x5c
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002256:	4b87      	ldr	r3, [pc, #540]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x41c>
 8002260:	4b84      	ldr	r3, [pc, #528]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002264:	4b83      	ldr	r3, [pc, #524]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002266:	2101      	movs	r1, #1
 8002268:	438a      	bics	r2, r1
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c
 800226c:	4b81      	ldr	r3, [pc, #516]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 800226e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002270:	4b80      	ldr	r3, [pc, #512]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002272:	2104      	movs	r1, #4
 8002274:	438a      	bics	r2, r1
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d014      	beq.n	80022aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe ffcc 	bl	800121c <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002288:	e009      	b.n	800229e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe ffc7 	bl	800121c <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a79      	ldr	r2, [pc, #484]	; (800247c <HAL_RCC_OscConfig+0x620>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0e6      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229e:	4b75      	ldr	r3, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x42e>
 80022a8:	e013      	b.n	80022d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7fe ffb7 	bl	800121c <HAL_GetTick>
 80022ae:	0003      	movs	r3, r0
 80022b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b2:	e009      	b.n	80022c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7fe ffb2 	bl	800121c <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	4a6f      	ldr	r2, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x620>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0d1      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022d2:	231f      	movs	r3, #31
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80022de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e0:	4b64      	ldr	r3, [pc, #400]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80022e2:	4967      	ldr	r1, [pc, #412]	; (8002480 <HAL_RCC_OscConfig+0x624>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d100      	bne.n	80022f2 <HAL_RCC_OscConfig+0x496>
 80022f0:	e0bb      	b.n	800246a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f2:	4b60      	ldr	r3, [pc, #384]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2238      	movs	r2, #56	; 0x38
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d100      	bne.n	8002300 <HAL_RCC_OscConfig+0x4a4>
 80022fe:	e07b      	b.n	80023f8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d156      	bne.n	80023b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 800230e:	495d      	ldr	r1, [pc, #372]	; (8002484 <HAL_RCC_OscConfig+0x628>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe ff82 	bl	800121c <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe ff7d 	bl	800121c <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e09d      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	049b      	lsls	r3, r3, #18
 8002338:	4013      	ands	r3, r2
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b4d      	ldr	r3, [pc, #308]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_RCC_OscConfig+0x62c>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	431a      	orrs	r2, r3
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	0449      	lsls	r1, r1, #17
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0549      	lsls	r1, r1, #21
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe ff46 	bl	800121c <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe ff41 	bl	800121c <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e061      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	049b      	lsls	r3, r3, #18
 80023b0:	4013      	ands	r3, r2
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x53a>
 80023b4:	e059      	b.n	800246a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80023bc:	4931      	ldr	r1, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x628>)
 80023be:	400a      	ands	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe ff2b 	bl	800121c <HAL_GetTick>
 80023c6:	0003      	movs	r3, r0
 80023c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe ff26 	bl	800121c <HAL_GetTick>
 80023d0:	0002      	movs	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e046      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	049b      	lsls	r3, r3, #18
 80023e6:	4013      	ands	r3, r2
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 80023f0:	4926      	ldr	r1, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x630>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e038      	b.n	800246a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e033      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x618>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2203      	movs	r2, #3
 800240e:	401a      	ands	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d126      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2270      	movs	r2, #112	; 0x70
 800241c:	401a      	ands	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d11f      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	23fe      	movs	r3, #254	; 0xfe
 800242a:	01db      	lsls	r3, r3, #7
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d116      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	23f8      	movs	r3, #248	; 0xf8
 800243c:	039b      	lsls	r3, r3, #14
 800243e:	401a      	ands	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d10e      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	23e0      	movs	r3, #224	; 0xe0
 800244c:	051b      	lsls	r3, r3, #20
 800244e:	401a      	ands	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	0f5b      	lsrs	r3, r3, #29
 800245c:	075a      	lsls	r2, r3, #29
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b008      	add	sp, #32
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	00001388 	.word	0x00001388
 8002480:	efffffff 	.word	0xefffffff
 8002484:	feffffff 	.word	0xfeffffff
 8002488:	11c1808c 	.word	0x11c1808c
 800248c:	eefefffc 	.word	0xeefefffc

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0e9      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2207      	movs	r2, #7
 80024aa:	4013      	ands	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d91e      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2207      	movs	r2, #7
 80024b8:	4393      	bics	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c4:	f7fe feaa 	bl	800121c <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024cc:	e009      	b.n	80024e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ce:	f7fe fea5 	bl	800121c <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	4a6a      	ldr	r2, [pc, #424]	; (8002684 <HAL_RCC_ClockConfig+0x1f4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0ca      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2207      	movs	r2, #7
 80024e8:	4013      	ands	r3, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1ee      	bne.n	80024ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d006      	beq.n	8002512 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002504:	4b60      	ldr	r3, [pc, #384]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	21e0      	movs	r1, #224	; 0xe0
 800250c:	01c9      	lsls	r1, r1, #7
 800250e:	430a      	orrs	r2, r1
 8002510:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4a5d      	ldr	r2, [pc, #372]	; (800268c <HAL_RCC_ClockConfig+0x1fc>)
 8002518:	4013      	ands	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	4013      	ands	r3, r2
 800252e:	d057      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	4013      	ands	r3, r2
 8002542:	d12b      	bne.n	800259c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e097      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d107      	bne.n	8002560 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002550:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	049b      	lsls	r3, r3, #18
 8002558:	4013      	ands	r3, r2
 800255a:	d11f      	bne.n	800259c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e08b      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002568:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4013      	ands	r3, r2
 8002572:	d113      	bne.n	800259c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e07f      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d106      	bne.n	800258e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002580:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d108      	bne.n	800259c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e074      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258e:	4b3e      	ldr	r3, [pc, #248]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e06d      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2207      	movs	r2, #7
 80025a2:	4393      	bics	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 80025ac:	430a      	orrs	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7fe fe34 	bl	800121c <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b8:	e009      	b.n	80025ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ba:	f7fe fe2f 	bl	800121c <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	4a2f      	ldr	r2, [pc, #188]	; (8002684 <HAL_RCC_ClockConfig+0x1f4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e054      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2238      	movs	r2, #56	; 0x38
 80025d4:	401a      	ands	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	429a      	cmp	r2, r3
 80025de:	d1ec      	bne.n	80025ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2207      	movs	r2, #7
 80025e6:	4013      	ands	r3, r2
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d21e      	bcs.n	800262c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2207      	movs	r2, #7
 80025f4:	4393      	bics	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002600:	f7fe fe0c 	bl	800121c <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002608:	e009      	b.n	800261e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260a:	f7fe fe07 	bl	800121c <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <HAL_RCC_ClockConfig+0x1f4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e02c      	b.n	8002678 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2207      	movs	r2, #7
 8002624:	4013      	ands	r3, r2
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d1ee      	bne.n	800260a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2204      	movs	r2, #4
 8002632:	4013      	ands	r3, r2
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_RCC_ClockConfig+0x200>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800264a:	f000 f829 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800264e:	0001      	movs	r1, r0
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	220f      	movs	r2, #15
 8002658:	401a      	ands	r2, r3
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCC_ClockConfig+0x204>)
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	58d3      	ldr	r3, [r2, r3]
 8002660:	221f      	movs	r2, #31
 8002662:	4013      	ands	r3, r2
 8002664:	000a      	movs	r2, r1
 8002666:	40da      	lsrs	r2, r3
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x208>)
 800266a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x20c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0018      	movs	r0, r3
 8002672:	f7fe fd77 	bl	8001164 <HAL_InitTick>
 8002676:	0003      	movs	r3, r0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40022000 	.word	0x40022000
 8002684:	00001388 	.word	0x00001388
 8002688:	40021000 	.word	0x40021000
 800268c:	fffff0ff 	.word	0xfffff0ff
 8002690:	ffff8fff 	.word	0xffff8fff
 8002694:	080057fc 	.word	0x080057fc
 8002698:	20000034 	.word	0x20000034
 800269c:	20000038 	.word	0x20000038

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2238      	movs	r2, #56	; 0x38
 80026ac:	4013      	ands	r3, r2
 80026ae:	d10f      	bne.n	80026d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026b0:	4b39      	ldr	r3, [pc, #228]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0adb      	lsrs	r3, r3, #11
 80026b6:	2207      	movs	r2, #7
 80026b8:	4013      	ands	r3, r2
 80026ba:	2201      	movs	r2, #1
 80026bc:	409a      	lsls	r2, r3
 80026be:	0013      	movs	r3, r2
 80026c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	4835      	ldr	r0, [pc, #212]	; (800279c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026c6:	f7fd fd2f 	bl	8000128 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	e05d      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2238      	movs	r2, #56	; 0x38
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026dc:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e054      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2238      	movs	r2, #56	; 0x38
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d138      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2203      	movs	r2, #3
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	2207      	movs	r2, #7
 8002700:	4013      	ands	r3, r2
 8002702:	3301      	adds	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	4824      	ldr	r0, [pc, #144]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002710:	f7fd fd0a 	bl	8000128 <__udivsi3>
 8002714:	0003      	movs	r3, r0
 8002716:	0019      	movs	r1, r3
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	227f      	movs	r2, #127	; 0x7f
 8002720:	4013      	ands	r3, r2
 8002722:	434b      	muls	r3, r1
 8002724:	617b      	str	r3, [r7, #20]
        break;
 8002726:	e00d      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	481c      	ldr	r0, [pc, #112]	; (800279c <HAL_RCC_GetSysClockFreq+0xfc>)
 800272c:	f7fd fcfc 	bl	8000128 <__udivsi3>
 8002730:	0003      	movs	r3, r0
 8002732:	0019      	movs	r1, r3
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	227f      	movs	r2, #127	; 0x7f
 800273c:	4013      	ands	r3, r2
 800273e:	434b      	muls	r3, r1
 8002740:	617b      	str	r3, [r7, #20]
        break;
 8002742:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0f5b      	lsrs	r3, r3, #29
 800274a:	2207      	movs	r2, #7
 800274c:	4013      	ands	r3, r2
 800274e:	3301      	adds	r3, #1
 8002750:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	6978      	ldr	r0, [r7, #20]
 8002756:	f7fd fce7 	bl	8000128 <__udivsi3>
 800275a:	0003      	movs	r3, r0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e015      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2238      	movs	r2, #56	; 0x38
 8002766:	4013      	ands	r3, r2
 8002768:	2b20      	cmp	r3, #32
 800276a:	d103      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e00b      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2238      	movs	r2, #56	; 0x38
 800277a:	4013      	ands	r3, r2
 800277c:	2b18      	cmp	r3, #24
 800277e:	d103      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002780:	23fa      	movs	r3, #250	; 0xfa
 8002782:	01db      	lsls	r3, r3, #7
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	e001      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800278c:	693b      	ldr	r3, [r7, #16]
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	40021000 	.word	0x40021000
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	007a1200 	.word	0x007a1200

080027a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	20000034 	.word	0x20000034

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b5b0      	push	{r4, r5, r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027bc:	f7ff fff2 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c0:	0004      	movs	r4, r0
 80027c2:	f7ff fb3f 	bl	8001e44 <LL_RCC_GetAPB1Prescaler>
 80027c6:	0003      	movs	r3, r0
 80027c8:	0b1a      	lsrs	r2, r3, #12
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	58d3      	ldr	r3, [r2, r3]
 80027d0:	221f      	movs	r2, #31
 80027d2:	4013      	ands	r3, r2
 80027d4:	40dc      	lsrs	r4, r3
 80027d6:	0023      	movs	r3, r4
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdb0      	pop	{r4, r5, r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	0800583c 	.word	0x0800583c

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027ec:	2313      	movs	r3, #19
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f4:	2312      	movs	r3, #18
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	4013      	ands	r3, r2
 8002806:	d100      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002808:	e0a3      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2011      	movs	r0, #17
 800280c:	183b      	adds	r3, r7, r0
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002812:	4bc3      	ldr	r3, [pc, #780]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	055b      	lsls	r3, r3, #21
 800281a:	4013      	ands	r3, r2
 800281c:	d110      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4bc0      	ldr	r3, [pc, #768]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002822:	4bbf      	ldr	r3, [pc, #764]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0549      	lsls	r1, r1, #21
 8002828:	430a      	orrs	r2, r1
 800282a:	63da      	str	r2, [r3, #60]	; 0x3c
 800282c:	4bbc      	ldr	r3, [pc, #752]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800282e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	055b      	lsls	r3, r3, #21
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283a:	183b      	adds	r3, r7, r0
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002840:	4bb8      	ldr	r3, [pc, #736]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4bb7      	ldr	r3, [pc, #732]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002846:	2180      	movs	r1, #128	; 0x80
 8002848:	0049      	lsls	r1, r1, #1
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800284e:	f7fe fce5 	bl	800121c <HAL_GetTick>
 8002852:	0003      	movs	r3, r0
 8002854:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002856:	e00b      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7fe fce0 	bl	800121c <HAL_GetTick>
 800285c:	0002      	movs	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d904      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002866:	2313      	movs	r3, #19
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2203      	movs	r2, #3
 800286c:	701a      	strb	r2, [r3, #0]
        break;
 800286e:	e005      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002870:	4bac      	ldr	r3, [pc, #688]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d0ed      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800287c:	2313      	movs	r3, #19
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d154      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002886:	4ba6      	ldr	r3, [pc, #664]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800288a:	23c0      	movs	r3, #192	; 0xc0
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4013      	ands	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d019      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d014      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a2:	4b9f      	ldr	r3, [pc, #636]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	4aa0      	ldr	r2, [pc, #640]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ac:	4b9c      	ldr	r3, [pc, #624]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028b0:	4b9b      	ldr	r3, [pc, #620]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	0249      	lsls	r1, r1, #9
 80028b6:	430a      	orrs	r2, r1
 80028b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ba:	4b99      	ldr	r3, [pc, #612]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c0:	499a      	ldr	r1, [pc, #616]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c6:	4b96      	ldr	r3, [pc, #600]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2201      	movs	r2, #1
 80028d0:	4013      	ands	r3, r2
 80028d2:	d016      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fca2 	bl	800121c <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028dc:	e00c      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fc9d 	bl	800121c <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	4a91      	ldr	r2, [pc, #580]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d904      	bls.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80028ee:	2313      	movs	r3, #19
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2203      	movs	r2, #3
 80028f4:	701a      	strb	r2, [r3, #0]
            break;
 80028f6:	e004      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f8:	4b89      	ldr	r3, [pc, #548]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d0ed      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002902:	2313      	movs	r3, #19
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290c:	4b84      	ldr	r3, [pc, #528]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	4a85      	ldr	r2, [pc, #532]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291a:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800291c:	430a      	orrs	r2, r1
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002920:	e00c      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002922:	2312      	movs	r3, #18
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2213      	movs	r2, #19
 8002928:	18ba      	adds	r2, r7, r2
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e005      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002930:	2312      	movs	r3, #18
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2213      	movs	r2, #19
 8002936:	18ba      	adds	r2, r7, r2
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800293c:	2311      	movs	r3, #17
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294a:	4b75      	ldr	r3, [pc, #468]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800294c:	4979      	ldr	r1, [pc, #484]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800294e:	400a      	ands	r2, r1
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	d009      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295c:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	2203      	movs	r2, #3
 8002962:	4393      	bics	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800296c:	430a      	orrs	r2, r1
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2202      	movs	r2, #2
 8002976:	4013      	ands	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297a:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	220c      	movs	r2, #12
 8002980:	4393      	bics	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298a:	430a      	orrs	r2, r1
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	4013      	ands	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002998:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	4a66      	ldr	r2, [pc, #408]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4013      	ands	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	4a5f      	ldr	r2, [pc, #380]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c8:	430a      	orrs	r2, r1
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4013      	ands	r3, r2
 80029d6:	d009      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029d8:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029de:	4013      	ands	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2220      	movs	r2, #32
 80029f2:	4013      	ands	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	01db      	lsls	r3, r3, #7
 8002a12:	4013      	ands	r3, r2
 8002a14:	d015      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a16:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	0899      	lsrs	r1, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	05db      	lsls	r3, r3, #23
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d106      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	0249      	lsls	r1, r1, #9
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	031b      	lsls	r3, r3, #12
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	4393      	bics	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	039b      	lsls	r3, r3, #14
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	4a35      	ldr	r2, [pc, #212]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	03db      	lsls	r3, r3, #15
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0449      	lsls	r1, r1, #17
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	03db      	lsls	r3, r3, #15
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d016      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	045b      	lsls	r3, r3, #17
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	0449      	lsls	r1, r1, #17
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	01db      	lsls	r3, r3, #7
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d106      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	0249      	lsls	r1, r1, #9
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b10:	2312      	movs	r3, #18
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	781b      	ldrb	r3, [r3, #0]
}
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b006      	add	sp, #24
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	fffffcff 	.word	0xfffffcff
 8002b2c:	fffeffff 	.word	0xfffeffff
 8002b30:	00001388 	.word	0x00001388
 8002b34:	efffffff 	.word	0xefffffff
 8002b38:	fffff3ff 	.word	0xfffff3ff
 8002b3c:	fff3ffff 	.word	0xfff3ffff
 8002b40:	ffcfffff 	.word	0xffcfffff
 8002b44:	ffffcfff 	.word	0xffffcfff
 8002b48:	ffbfffff 	.word	0xffbfffff
 8002b4c:	feffffff 	.word	0xfeffffff
 8002b50:	ffff3fff 	.word	0xffff3fff

08002b54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d100      	bne.n	8002b6c <HAL_RTC_Init+0x18>
 8002b6a:	e08c      	b.n	8002c86 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2229      	movs	r2, #41	; 0x29
 8002b70:	5c9b      	ldrb	r3, [r3, r2]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2228      	movs	r2, #40	; 0x28
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2288      	movs	r2, #136	; 0x88
 8002b84:	0212      	lsls	r2, r2, #8
 8002b86:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7fe f8da 	bl	8000d44 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2229      	movs	r2, #41	; 0x29
 8002b94:	2102      	movs	r1, #2
 8002b96:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d062      	beq.n	8002c6c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	22ca      	movs	r2, #202	; 0xca
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2253      	movs	r2, #83	; 0x53
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002bb6:	250f      	movs	r5, #15
 8002bb8:	197c      	adds	r4, r7, r5
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 f892 	bl	8002ce6 <RTC_EnterInitMode>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002bc6:	0028      	movs	r0, r5
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d12c      	bne.n	8002c2a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	492e      	ldr	r1, [pc, #184]	; (8002c94 <HAL_RTC_Init+0x140>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6912      	ldr	r2, [r2, #16]
 8002c06:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6919      	ldr	r1, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	041a      	lsls	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002c1c:	183c      	adds	r4, r7, r0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 f8a3 	bl	8002d6c <RTC_ExitInitMode>
 8002c26:	0003      	movs	r3, r0
 8002c28:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d116      	bne.n	8002c62 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	00d2      	lsls	r2, r2, #3
 8002c40:	08d2      	lsrs	r2, r2, #3
 8002c42:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6999      	ldr	r1, [r3, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	22ff      	movs	r2, #255	; 0xff
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6a:	e003      	b.n	8002c74 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002c74:	230f      	movs	r3, #15
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2229      	movs	r2, #41	; 0x29
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002c86:	230f      	movs	r3, #15
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bdb0      	pop	{r4, r5, r7, pc}
 8002c94:	fb8fffbf 	.word	0xfb8fffbf

08002c98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	21a0      	movs	r1, #160	; 0xa0
 8002cac:	438a      	bics	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002cb0:	f7fe fab4 	bl	800121c <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cba:	f7fe faaf 	bl	800121c <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	23fa      	movs	r3, #250	; 0xfa
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d901      	bls.n	8002cd0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e006      	b.n	8002cde <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d0ee      	beq.n	8002cba <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002cee:	230f      	movs	r3, #15
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d12c      	bne.n	8002d5c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d12:	f7fe fa83 	bl	800121c <HAL_GetTick>
 8002d16:	0003      	movs	r3, r0
 8002d18:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d1a:	e014      	b.n	8002d46 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d1c:	f7fe fa7e 	bl	800121c <HAL_GetTick>
 8002d20:	0002      	movs	r2, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1ad2      	subs	r2, r2, r3
 8002d26:	200f      	movs	r0, #15
 8002d28:	183b      	adds	r3, r7, r0
 8002d2a:	1839      	adds	r1, r7, r0
 8002d2c:	7809      	ldrb	r1, [r1, #0]
 8002d2e:	7019      	strb	r1, [r3, #0]
 8002d30:	23fa      	movs	r3, #250	; 0xfa
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d906      	bls.n	8002d46 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002d38:	183b      	adds	r3, r7, r0
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2229      	movs	r2, #41	; 0x29
 8002d42:	2103      	movs	r1, #3
 8002d44:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2240      	movs	r2, #64	; 0x40
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d104      	bne.n	8002d5c <RTC_EnterInitMode+0x76>
 8002d52:	230f      	movs	r3, #15
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d1df      	bne.n	8002d1c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d74:	240f      	movs	r4, #15
 8002d76:	193b      	adds	r3, r7, r4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <RTC_ExitInitMode+0x84>)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <RTC_ExitInitMode+0x84>)
 8002d82:	2180      	movs	r1, #128	; 0x80
 8002d84:	438a      	bics	r2, r1
 8002d86:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <RTC_ExitInitMode+0x84>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d10d      	bne.n	8002dae <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7ff ff7f 	bl	8002c98 <HAL_RTC_WaitForSynchro>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d021      	beq.n	8002de2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2229      	movs	r2, #41	; 0x29
 8002da2:	2103      	movs	r1, #3
 8002da4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	2203      	movs	r2, #3
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e019      	b.n	8002de2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <RTC_ExitInitMode+0x84>)
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <RTC_ExitInitMode+0x84>)
 8002db4:	2120      	movs	r1, #32
 8002db6:	438a      	bics	r2, r1
 8002db8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7ff ff6b 	bl	8002c98 <HAL_RTC_WaitForSynchro>
 8002dc2:	1e03      	subs	r3, r0, #0
 8002dc4:	d007      	beq.n	8002dd6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2229      	movs	r2, #41	; 0x29
 8002dca:	2103      	movs	r1, #3
 8002dcc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002dce:	230f      	movs	r3, #15
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <RTC_ExitInitMode+0x84>)
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <RTC_ExitInitMode+0x84>)
 8002ddc:	2120      	movs	r1, #32
 8002dde:	430a      	orrs	r2, r1
 8002de0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002de2:	230f      	movs	r3, #15
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	781b      	ldrb	r3, [r3, #0]
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b005      	add	sp, #20
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	40002800 	.word	0x40002800

08002df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e04a      	b.n	8002e9c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	223d      	movs	r2, #61	; 0x3d
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	223c      	movs	r2, #60	; 0x3c
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7fd ffcf 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	223d      	movs	r2, #61	; 0x3d
 8002e26:	2102      	movs	r1, #2
 8002e28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	0019      	movs	r1, r3
 8002e34:	0010      	movs	r0, r2
 8002e36:	f000 fa11 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2248      	movs	r2, #72	; 0x48
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223e      	movs	r2, #62	; 0x3e
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223f      	movs	r2, #63	; 0x3f
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2240      	movs	r2, #64	; 0x40
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2241      	movs	r2, #65	; 0x41
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2242      	movs	r2, #66	; 0x42
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2243      	movs	r2, #67	; 0x43
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2244      	movs	r2, #68	; 0x44
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2245      	movs	r2, #69	; 0x45
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2246      	movs	r2, #70	; 0x46
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2247      	movs	r2, #71	; 0x47
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223d      	movs	r2, #61	; 0x3d
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	223d      	movs	r2, #61	; 0x3d
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e042      	b.n	8002f42 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223d      	movs	r2, #61	; 0x3d
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <HAL_TIM_Base_Start_IT+0xa8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00f      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x5a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x5a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <HAL_TIM_Base_Start_IT+0xac>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x5a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_TIM_Base_Start_IT+0xb0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d116      	bne.n	8002f2c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d016      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x9a>
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d011      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	e008      	b.n	8002f3e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e000      	b.n	8002f40 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40014000 	.word	0x40014000
 8002f58:	00010007 	.word	0x00010007

08002f5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	438a      	bics	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <HAL_TIM_Base_Stop_IT+0x54>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d10d      	bne.n	8002f9c <HAL_TIM_Base_Stop_IT+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_TIM_Base_Stop_IT+0x58>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d107      	bne.n	8002f9c <HAL_TIM_Base_Stop_IT+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2101      	movs	r1, #1
 8002f98:	438a      	bics	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	223d      	movs	r2, #61	; 0x3d
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	00001111 	.word	0x00001111
 8002fb4:	00000444 	.word	0x00000444

08002fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d124      	bne.n	8003018 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d11d      	bne.n	8003018 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4252      	negs	r2, r2
 8002fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 f916 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 8003000:	e007      	b.n	8003012 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f909 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f915 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2204      	movs	r2, #4
 8003020:	4013      	ands	r3, r2
 8003022:	2b04      	cmp	r3, #4
 8003024:	d125      	bne.n	8003072 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2204      	movs	r2, #4
 800302e:	4013      	ands	r3, r2
 8003030:	2b04      	cmp	r3, #4
 8003032:	d11e      	bne.n	8003072 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2205      	movs	r2, #5
 800303a:	4252      	negs	r2, r2
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2202      	movs	r2, #2
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	23c0      	movs	r3, #192	; 0xc0
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4013      	ands	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 f8e9 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 800305a:	e007      	b.n	800306c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f000 f8dc 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	0018      	movs	r0, r3
 8003068:	f000 f8e8 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2208      	movs	r2, #8
 800307a:	4013      	ands	r3, r2
 800307c:	2b08      	cmp	r3, #8
 800307e:	d124      	bne.n	80030ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2208      	movs	r2, #8
 8003088:	4013      	ands	r3, r2
 800308a:	2b08      	cmp	r3, #8
 800308c:	d11d      	bne.n	80030ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2209      	movs	r2, #9
 8003094:	4252      	negs	r2, r2
 8003096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2204      	movs	r2, #4
 800309c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2203      	movs	r2, #3
 80030a6:	4013      	ands	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f8bd 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f8b0 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 f8bc 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2210      	movs	r2, #16
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d125      	bne.n	8003124 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2210      	movs	r2, #16
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d11e      	bne.n	8003124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2211      	movs	r2, #17
 80030ec:	4252      	negs	r2, r2
 80030ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2208      	movs	r2, #8
 80030f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	23c0      	movs	r3, #192	; 0xc0
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4013      	ands	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f890 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 800310c:	e007      	b.n	800311e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 f883 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f88f 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10f      	bne.n	8003152 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2202      	movs	r2, #2
 8003146:	4252      	negs	r2, r2
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fdb3 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	4013      	ands	r3, r2
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d10f      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	4013      	ands	r3, r2
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d108      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2281      	movs	r2, #129	; 0x81
 8003174:	4252      	negs	r2, r2
 8003176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	0018      	movs	r0, r3
 800317c:	f000 f964 	bl	8003448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	401a      	ands	r2, r3
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	429a      	cmp	r2, r3
 8003192:	d10e      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	4013      	ands	r3, r2
 800319e:	2b80      	cmp	r3, #128	; 0x80
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <HAL_TIM_IRQHandler+0x260>)
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f953 	bl	8003458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2240      	movs	r2, #64	; 0x40
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d10f      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d108      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2241      	movs	r2, #65	; 0x41
 80031d4:	4252      	negs	r2, r2
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f836 	bl	800324c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2220      	movs	r2, #32
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d10f      	bne.n	800320e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d108      	bne.n	800320e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2221      	movs	r2, #33	; 0x21
 8003202:	4252      	negs	r2, r2
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	0018      	movs	r0, r3
 800320a:	f000 f915 	bl	8003438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	fffffeff 	.word	0xfffffeff

0800321c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b002      	add	sp, #8
 800325a:	bd80      	pop	{r7, pc}

0800325c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a34      	ldr	r2, [pc, #208]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d008      	beq.n	8003286 <TIM_Base_SetConfig+0x2a>
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	05db      	lsls	r3, r3, #23
 800327a:	429a      	cmp	r2, r3
 800327c:	d003      	beq.n	8003286 <TIM_Base_SetConfig+0x2a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a30      	ldr	r2, [pc, #192]	; (8003344 <TIM_Base_SetConfig+0xe8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d108      	bne.n	8003298 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2270      	movs	r2, #112	; 0x70
 800328a:	4393      	bics	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a29      	ldr	r2, [pc, #164]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <TIM_Base_SetConfig+0x76>
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d013      	beq.n	80032d2 <TIM_Base_SetConfig+0x76>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a25      	ldr	r2, [pc, #148]	; (8003344 <TIM_Base_SetConfig+0xe8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <TIM_Base_SetConfig+0x76>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a24      	ldr	r2, [pc, #144]	; (8003348 <TIM_Base_SetConfig+0xec>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0x76>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <TIM_Base_SetConfig+0xf0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0x76>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <TIM_Base_SetConfig+0xf4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0x76>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a21      	ldr	r2, [pc, #132]	; (8003354 <TIM_Base_SetConfig+0xf8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <TIM_Base_SetConfig+0xfc>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	4393      	bics	r3, r2
 80032ea:	001a      	movs	r2, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <TIM_Base_SetConfig+0xce>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <TIM_Base_SetConfig+0xf0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_Base_SetConfig+0xce>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <TIM_Base_SetConfig+0xf4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_Base_SetConfig+0xce>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <TIM_Base_SetConfig+0xf8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d103      	bne.n	8003332 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	615a      	str	r2, [r3, #20]
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b004      	add	sp, #16
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40000400 	.word	0x40000400
 8003348:	40002000 	.word	0x40002000
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800
 8003358:	fffffcff 	.word	0xfffffcff

0800335c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	223c      	movs	r2, #60	; 0x3c
 800336a:	5c9b      	ldrb	r3, [r3, r2]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003370:	2302      	movs	r3, #2
 8003372:	e055      	b.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	223c      	movs	r2, #60	; 0x3c
 8003378:	2101      	movs	r1, #1
 800337a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	223d      	movs	r2, #61	; 0x3d
 8003380:	2102      	movs	r1, #2
 8003382:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a22      	ldr	r2, [pc, #136]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2270      	movs	r2, #112	; 0x70
 80033b4:	4393      	bics	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a16      	ldr	r2, [pc, #88]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00f      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	429a      	cmp	r2, r3
 80033de:	d009      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a12      	ldr	r2, [pc, #72]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a11      	ldr	r2, [pc, #68]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10c      	bne.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	4393      	bics	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223d      	movs	r2, #61	; 0x3d
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223c      	movs	r2, #60	; 0x3c
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40012c00 	.word	0x40012c00
 800342c:	ff0fffff 	.word	0xff0fffff
 8003430:	40000400 	.word	0x40000400
 8003434:	40014000 	.word	0x40014000

08003438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e046      	b.n	8003508 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2288      	movs	r2, #136	; 0x88
 800347e:	589b      	ldr	r3, [r3, r2]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2284      	movs	r2, #132	; 0x84
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd fcbc 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2288      	movs	r2, #136	; 0x88
 8003498:	2124      	movs	r1, #36	; 0x24
 800349a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	438a      	bics	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 fc12 	bl	8003cd8 <UART_SetConfig>
 80034b4:	0003      	movs	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e024      	b.n	8003508 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 fec3 	bl	8004254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	490d      	ldr	r1, [pc, #52]	; (8003510 <HAL_UART_Init+0xa8>)
 80034da:	400a      	ands	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	212a      	movs	r1, #42	; 0x2a
 80034ea:	438a      	bics	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f000 ff5b 	bl	80043bc <UART_CheckIdleState>
 8003506:	0003      	movs	r3, r0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}
 8003510:	ffffb7ff 	.word	0xffffb7ff

08003514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	1dbb      	adds	r3, r7, #6
 8003522:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2288      	movs	r2, #136	; 0x88
 8003528:	589b      	ldr	r3, [r3, r2]
 800352a:	2b20      	cmp	r3, #32
 800352c:	d000      	beq.n	8003530 <HAL_UART_Transmit+0x1c>
 800352e:	e088      	b.n	8003642 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_UART_Transmit+0x2a>
 8003536:	1dbb      	adds	r3, r7, #6
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e080      	b.n	8003644 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	015b      	lsls	r3, r3, #5
 800354a:	429a      	cmp	r2, r3
 800354c:	d109      	bne.n	8003562 <HAL_UART_Transmit+0x4e>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d001      	beq.n	8003562 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e070      	b.n	8003644 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2290      	movs	r2, #144	; 0x90
 8003566:	2100      	movs	r1, #0
 8003568:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2288      	movs	r2, #136	; 0x88
 800356e:	2121      	movs	r1, #33	; 0x21
 8003570:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003572:	f7fd fe53 	bl	800121c <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1dba      	adds	r2, r7, #6
 800357e:	2154      	movs	r1, #84	; 0x54
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1dba      	adds	r2, r7, #6
 8003588:	2156      	movs	r1, #86	; 0x56
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	015b      	lsls	r3, r3, #5
 8003596:	429a      	cmp	r2, r3
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0x98>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035b4:	e02c      	b.n	8003610 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	0013      	movs	r3, r2
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	f000 ff48 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e039      	b.n	8003644 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	001a      	movs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	05d2      	lsls	r2, r2, #23
 80035e2:	0dd2      	lsrs	r2, r2, #23
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3302      	adds	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e007      	b.n	80035fe <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2256      	movs	r2, #86	; 0x56
 8003602:	5a9b      	ldrh	r3, [r3, r2]
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b299      	uxth	r1, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2256      	movs	r2, #86	; 0x56
 800360e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2256      	movs	r2, #86	; 0x56
 8003614:	5a9b      	ldrh	r3, [r3, r2]
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1cc      	bne.n	80035b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	0013      	movs	r3, r2
 8003626:	2200      	movs	r2, #0
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	f000 ff15 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d001      	beq.n	8003636 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e006      	b.n	8003644 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2288      	movs	r2, #136	; 0x88
 800363a:	2120      	movs	r1, #32
 800363c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b008      	add	sp, #32
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800364c:	b5b0      	push	{r4, r5, r7, lr}
 800364e:	b0aa      	sub	sp, #168	; 0xa8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	22a4      	movs	r2, #164	; 0xa4
 800365c:	18b9      	adds	r1, r7, r2
 800365e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	20a0      	movs	r0, #160	; 0xa0
 8003668:	1839      	adds	r1, r7, r0
 800366a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	249c      	movs	r4, #156	; 0x9c
 8003674:	1939      	adds	r1, r7, r4
 8003676:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003678:	0011      	movs	r1, r2
 800367a:	18bb      	adds	r3, r7, r2
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4aa2      	ldr	r2, [pc, #648]	; (8003908 <HAL_UART_IRQHandler+0x2bc>)
 8003680:	4013      	ands	r3, r2
 8003682:	2298      	movs	r2, #152	; 0x98
 8003684:	18bd      	adds	r5, r7, r2
 8003686:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003688:	18bb      	adds	r3, r7, r2
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11a      	bne.n	80036c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003690:	187b      	adds	r3, r7, r1
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2220      	movs	r2, #32
 8003696:	4013      	ands	r3, r2
 8003698:	d015      	beq.n	80036c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800369a:	183b      	adds	r3, r7, r0
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2220      	movs	r2, #32
 80036a0:	4013      	ands	r3, r2
 80036a2:	d105      	bne.n	80036b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	055b      	lsls	r3, r3, #21
 80036ac:	4013      	ands	r3, r2
 80036ae:	d00a      	beq.n	80036c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d100      	bne.n	80036ba <HAL_UART_IRQHandler+0x6e>
 80036b8:	e2dc      	b.n	8003c74 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	0010      	movs	r0, r2
 80036c2:	4798      	blx	r3
      }
      return;
 80036c4:	e2d6      	b.n	8003c74 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036c6:	2398      	movs	r3, #152	; 0x98
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d100      	bne.n	80036d2 <HAL_UART_IRQHandler+0x86>
 80036d0:	e122      	b.n	8003918 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80036d2:	239c      	movs	r3, #156	; 0x9c
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a8c      	ldr	r2, [pc, #560]	; (800390c <HAL_UART_IRQHandler+0x2c0>)
 80036da:	4013      	ands	r3, r2
 80036dc:	d106      	bne.n	80036ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80036de:	23a0      	movs	r3, #160	; 0xa0
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a8a      	ldr	r2, [pc, #552]	; (8003910 <HAL_UART_IRQHandler+0x2c4>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	d100      	bne.n	80036ec <HAL_UART_IRQHandler+0xa0>
 80036ea:	e115      	b.n	8003918 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036ec:	23a4      	movs	r3, #164	; 0xa4
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2201      	movs	r2, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	d012      	beq.n	800371e <HAL_UART_IRQHandler+0xd2>
 80036f8:	23a0      	movs	r3, #160	; 0xa0
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d00b      	beq.n	800371e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2290      	movs	r2, #144	; 0x90
 8003712:	589b      	ldr	r3, [r3, r2]
 8003714:	2201      	movs	r2, #1
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2190      	movs	r1, #144	; 0x90
 800371c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800371e:	23a4      	movs	r3, #164	; 0xa4
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2202      	movs	r2, #2
 8003726:	4013      	ands	r3, r2
 8003728:	d011      	beq.n	800374e <HAL_UART_IRQHandler+0x102>
 800372a:	239c      	movs	r3, #156	; 0x9c
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d00b      	beq.n	800374e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2202      	movs	r2, #2
 800373c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2290      	movs	r2, #144	; 0x90
 8003742:	589b      	ldr	r3, [r3, r2]
 8003744:	2204      	movs	r2, #4
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2190      	movs	r1, #144	; 0x90
 800374c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800374e:	23a4      	movs	r3, #164	; 0xa4
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2204      	movs	r2, #4
 8003756:	4013      	ands	r3, r2
 8003758:	d011      	beq.n	800377e <HAL_UART_IRQHandler+0x132>
 800375a:	239c      	movs	r3, #156	; 0x9c
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2201      	movs	r2, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d00b      	beq.n	800377e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2204      	movs	r2, #4
 800376c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2290      	movs	r2, #144	; 0x90
 8003772:	589b      	ldr	r3, [r3, r2]
 8003774:	2202      	movs	r2, #2
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2190      	movs	r1, #144	; 0x90
 800377c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800377e:	23a4      	movs	r3, #164	; 0xa4
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2208      	movs	r2, #8
 8003786:	4013      	ands	r3, r2
 8003788:	d017      	beq.n	80037ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800378a:	23a0      	movs	r3, #160	; 0xa0
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2220      	movs	r2, #32
 8003792:	4013      	ands	r3, r2
 8003794:	d105      	bne.n	80037a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003796:	239c      	movs	r3, #156	; 0x9c
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a5b      	ldr	r2, [pc, #364]	; (800390c <HAL_UART_IRQHandler+0x2c0>)
 800379e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037a0:	d00b      	beq.n	80037ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2208      	movs	r2, #8
 80037a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2290      	movs	r2, #144	; 0x90
 80037ae:	589b      	ldr	r3, [r3, r2]
 80037b0:	2208      	movs	r2, #8
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2190      	movs	r1, #144	; 0x90
 80037b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037ba:	23a4      	movs	r3, #164	; 0xa4
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4013      	ands	r3, r2
 80037c6:	d013      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1a4>
 80037c8:	23a0      	movs	r3, #160	; 0xa0
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	04db      	lsls	r3, r3, #19
 80037d2:	4013      	ands	r3, r2
 80037d4:	d00c      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2290      	movs	r2, #144	; 0x90
 80037e4:	589b      	ldr	r3, [r3, r2]
 80037e6:	2220      	movs	r2, #32
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2190      	movs	r1, #144	; 0x90
 80037ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2290      	movs	r2, #144	; 0x90
 80037f4:	589b      	ldr	r3, [r3, r2]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d100      	bne.n	80037fc <HAL_UART_IRQHandler+0x1b0>
 80037fa:	e23d      	b.n	8003c78 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037fc:	23a4      	movs	r3, #164	; 0xa4
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2220      	movs	r2, #32
 8003804:	4013      	ands	r3, r2
 8003806:	d015      	beq.n	8003834 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003808:	23a0      	movs	r3, #160	; 0xa0
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	4013      	ands	r3, r2
 8003812:	d106      	bne.n	8003822 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003814:	239c      	movs	r3, #156	; 0x9c
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	055b      	lsls	r3, r3, #21
 800381e:	4013      	ands	r3, r2
 8003820:	d008      	beq.n	8003834 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	0010      	movs	r0, r2
 8003832:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2290      	movs	r2, #144	; 0x90
 8003838:	589b      	ldr	r3, [r3, r2]
 800383a:	2194      	movs	r1, #148	; 0x94
 800383c:	187a      	adds	r2, r7, r1
 800383e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	4013      	ands	r3, r2
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d004      	beq.n	8003858 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800384e:	187b      	adds	r3, r7, r1
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2228      	movs	r2, #40	; 0x28
 8003854:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003856:	d04c      	beq.n	80038f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f000 ffaa 	bl	80047b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	4013      	ands	r3, r2
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d13c      	bne.n	80038e8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386e:	f3ef 8310 	mrs	r3, PRIMASK
 8003872:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	2090      	movs	r0, #144	; 0x90
 8003878:	183a      	adds	r2, r7, r0
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	2301      	movs	r3, #1
 800387e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003882:	f383 8810 	msr	PRIMASK, r3
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2140      	movs	r1, #64	; 0x40
 8003894:	438a      	bics	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	183b      	adds	r3, r7, r0
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038a0:	f383 8810 	msr	PRIMASK, r3
}
 80038a4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	589b      	ldr	r3, [r3, r2]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d016      	beq.n	80038de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	589b      	ldr	r3, [r3, r2]
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_UART_IRQHandler+0x2c8>)
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	589b      	ldr	r3, [r3, r2]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fd ff05 	bl	80016d0 <HAL_DMA_Abort_IT>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d01c      	beq.n	8003904 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	589b      	ldr	r3, [r3, r2]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	5852      	ldr	r2, [r2, r1]
 80038d8:	0010      	movs	r0, r2
 80038da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e012      	b.n	8003904 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f9f1 	bl	8003cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e6:	e00d      	b.n	8003904 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 f9ec 	bl	8003cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e008      	b.n	8003904 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f9e7 	bl	8003cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2290      	movs	r2, #144	; 0x90
 80038fe:	2100      	movs	r1, #0
 8003900:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003902:	e1b9      	b.n	8003c78 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	46c0      	nop			; (mov r8, r8)
    return;
 8003906:	e1b7      	b.n	8003c78 <HAL_UART_IRQHandler+0x62c>
 8003908:	0000080f 	.word	0x0000080f
 800390c:	10000001 	.word	0x10000001
 8003910:	04000120 	.word	0x04000120
 8003914:	08004a79 	.word	0x08004a79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d000      	beq.n	8003922 <HAL_UART_IRQHandler+0x2d6>
 8003920:	e13e      	b.n	8003ba0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003922:	23a4      	movs	r3, #164	; 0xa4
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	4013      	ands	r3, r2
 800392c:	d100      	bne.n	8003930 <HAL_UART_IRQHandler+0x2e4>
 800392e:	e137      	b.n	8003ba0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003930:	23a0      	movs	r3, #160	; 0xa0
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2210      	movs	r2, #16
 8003938:	4013      	ands	r3, r2
 800393a:	d100      	bne.n	800393e <HAL_UART_IRQHandler+0x2f2>
 800393c:	e130      	b.n	8003ba0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2210      	movs	r2, #16
 8003944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2240      	movs	r2, #64	; 0x40
 800394e:	4013      	ands	r3, r2
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d000      	beq.n	8003956 <HAL_UART_IRQHandler+0x30a>
 8003954:	e0a4      	b.n	8003aa0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	589b      	ldr	r3, [r3, r2]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	217e      	movs	r1, #126	; 0x7e
 8003962:	187b      	adds	r3, r7, r1
 8003964:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003966:	187b      	adds	r3, r7, r1
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d100      	bne.n	8003970 <HAL_UART_IRQHandler+0x324>
 800396e:	e185      	b.n	8003c7c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	225c      	movs	r2, #92	; 0x5c
 8003974:	5a9b      	ldrh	r3, [r3, r2]
 8003976:	187a      	adds	r2, r7, r1
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d300      	bcc.n	8003980 <HAL_UART_IRQHandler+0x334>
 800397e:	e17d      	b.n	8003c7c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	187a      	adds	r2, r7, r1
 8003984:	215e      	movs	r1, #94	; 0x5e
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	589b      	ldr	r3, [r3, r2]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2220      	movs	r2, #32
 8003996:	4013      	ands	r3, r2
 8003998:	d170      	bne.n	8003a7c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80039a4:	2301      	movs	r3, #1
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	49b4      	ldr	r1, [pc, #720]	; (8003c8c <HAL_UART_IRQHandler+0x640>)
 80039bc:	400a      	ands	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039cc:	f3ef 8310 	mrs	r3, PRIMASK
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	677b      	str	r3, [r7, #116]	; 0x74
 80039d6:	2301      	movs	r3, #1
 80039d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	438a      	bics	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	673b      	str	r3, [r7, #112]	; 0x70
 8003a08:	2301      	movs	r3, #1
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	438a      	bics	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a26:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	228c      	movs	r2, #140	; 0x8c
 8003a34:	2120      	movs	r1, #32
 8003a36:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a42:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a48:	2301      	movs	r3, #1
 8003a4a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2110      	movs	r1, #16
 8003a60:	438a      	bics	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	589b      	ldr	r3, [r3, r2]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fd fdc8 	bl	800160c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	225c      	movs	r2, #92	; 0x5c
 8003a86:	5a9a      	ldrh	r2, [r3, r2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	215e      	movs	r1, #94	; 0x5e
 8003a8c:	5a5b      	ldrh	r3, [r3, r1]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0011      	movs	r1, r2
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7fd f82f 	bl	8000afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a9e:	e0ed      	b.n	8003c7c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	225c      	movs	r2, #92	; 0x5c
 8003aa4:	5a99      	ldrh	r1, [r3, r2]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	225e      	movs	r2, #94	; 0x5e
 8003aaa:	5a9b      	ldrh	r3, [r3, r2]
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	208e      	movs	r0, #142	; 0x8e
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	1a8a      	subs	r2, r1, r2
 8003ab4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	225e      	movs	r2, #94	; 0x5e
 8003aba:	5a9b      	ldrh	r3, [r3, r2]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d100      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x478>
 8003ac2:	e0dd      	b.n	8003c80 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003ac4:	183b      	adds	r3, r7, r0
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d100      	bne.n	8003ace <HAL_UART_IRQHandler+0x482>
 8003acc:	e0d8      	b.n	8003c80 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ace:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ad6:	2488      	movs	r4, #136	; 0x88
 8003ad8:	193a      	adds	r2, r7, r4
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	2301      	movs	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4967      	ldr	r1, [pc, #412]	; (8003c90 <HAL_UART_IRQHandler+0x644>)
 8003af4:	400a      	ands	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	193b      	adds	r3, r7, r4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b06:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b0c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b0e:	2484      	movs	r4, #132	; 0x84
 8003b10:	193a      	adds	r2, r7, r4
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	2301      	movs	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	495a      	ldr	r1, [pc, #360]	; (8003c94 <HAL_UART_IRQHandler+0x648>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	228c      	movs	r2, #140	; 0x8c
 8003b42:	2120      	movs	r1, #32
 8003b44:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b52:	f3ef 8310 	mrs	r3, PRIMASK
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5a:	2480      	movs	r4, #128	; 0x80
 8003b5c:	193a      	adds	r2, r7, r4
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	2301      	movs	r3, #1
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2110      	movs	r1, #16
 8003b78:	438a      	bics	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b90:	183b      	adds	r3, r7, r0
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc ffaf 	bl	8000afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b9e:	e06f      	b.n	8003c80 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ba0:	23a4      	movs	r3, #164	; 0xa4
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	035b      	lsls	r3, r3, #13
 8003baa:	4013      	ands	r3, r2
 8003bac:	d010      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x584>
 8003bae:	239c      	movs	r3, #156	; 0x9c
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	03db      	lsls	r3, r3, #15
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	0352      	lsls	r2, r2, #13
 8003bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 ff98 	bl	8004afe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bce:	e05a      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003bd0:	23a4      	movs	r3, #164	; 0xa4
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d016      	beq.n	8003c0a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003bdc:	23a0      	movs	r3, #160	; 0xa0
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	4013      	ands	r3, r2
 8003be6:	d106      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003be8:	239c      	movs	r3, #156	; 0x9c
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d042      	beq.n	8003c84 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	0010      	movs	r0, r2
 8003c06:	4798      	blx	r3
    }
    return;
 8003c08:	e03c      	b.n	8003c84 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c0a:	23a4      	movs	r3, #164	; 0xa4
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2240      	movs	r2, #64	; 0x40
 8003c12:	4013      	ands	r3, r2
 8003c14:	d00a      	beq.n	8003c2c <HAL_UART_IRQHandler+0x5e0>
 8003c16:	23a0      	movs	r3, #160	; 0xa0
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f000 ff3e 	bl	8004aa6 <UART_EndTransmit_IT>
    return;
 8003c2a:	e02c      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c2c:	23a4      	movs	r3, #164	; 0xa4
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	4013      	ands	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <HAL_UART_IRQHandler+0x606>
 8003c3a:	23a0      	movs	r3, #160	; 0xa0
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	05db      	lsls	r3, r3, #23
 8003c44:	4013      	ands	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 ff67 	bl	8004b1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c50:	e019      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c52:	23a4      	movs	r3, #164	; 0xa4
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	045b      	lsls	r3, r3, #17
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d012      	beq.n	8003c86 <HAL_UART_IRQHandler+0x63a>
 8003c60:	23a0      	movs	r3, #160	; 0xa0
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da0d      	bge.n	8003c86 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 ff4e 	bl	8004b0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c72:	e008      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	e006      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
    return;
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	e004      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	e002      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	e000      	b.n	8003c86 <HAL_UART_IRQHandler+0x63a>
    return;
 8003c84:	46c0      	nop			; (mov r8, r8)
  }
}
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b02a      	add	sp, #168	; 0xa8
 8003c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8c:	fffffeff 	.word	0xfffffeff
 8003c90:	fffffedf 	.word	0xfffffedf
 8003c94:	effffffe 	.word	0xeffffffe

08003c98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	b5b0      	push	{r4, r5, r7, lr}
 8003cda:	b090      	sub	sp, #64	; 0x40
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ce0:	231a      	movs	r3, #26
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	19db      	adds	r3, r3, r7
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4aaf      	ldr	r2, [pc, #700]	; (8003fc8 <UART_SetConfig+0x2f0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4aaa      	ldr	r2, [pc, #680]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	0003      	movs	r3, r0
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4aa4      	ldr	r2, [pc, #656]	; (8003fd0 <UART_SetConfig+0x2f8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a9f      	ldr	r2, [pc, #636]	; (8003fd4 <UART_SetConfig+0x2fc>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	4393      	bics	r3, r2
 8003d6e:	0018      	movs	r0, r3
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	0003      	movs	r3, r0
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a95      	ldr	r2, [pc, #596]	; (8003fd8 <UART_SetConfig+0x300>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d131      	bne.n	8003dec <UART_SetConfig+0x114>
 8003d88:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <UART_SetConfig+0x304>)
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d01d      	beq.n	8003dd0 <UART_SetConfig+0xf8>
 8003d94:	d823      	bhi.n	8003dde <UART_SetConfig+0x106>
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d00c      	beq.n	8003db4 <UART_SetConfig+0xdc>
 8003d9a:	d820      	bhi.n	8003dde <UART_SetConfig+0x106>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <UART_SetConfig+0xce>
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d00e      	beq.n	8003dc2 <UART_SetConfig+0xea>
 8003da4:	e01b      	b.n	8003dde <UART_SetConfig+0x106>
 8003da6:	231b      	movs	r3, #27
 8003da8:	2220      	movs	r2, #32
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	19db      	adds	r3, r3, r7
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e0b4      	b.n	8003f1e <UART_SetConfig+0x246>
 8003db4:	231b      	movs	r3, #27
 8003db6:	2220      	movs	r2, #32
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	19db      	adds	r3, r3, r7
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e0ad      	b.n	8003f1e <UART_SetConfig+0x246>
 8003dc2:	231b      	movs	r3, #27
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	19db      	adds	r3, r3, r7
 8003dca:	2204      	movs	r2, #4
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e0a6      	b.n	8003f1e <UART_SetConfig+0x246>
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2208      	movs	r2, #8
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e09f      	b.n	8003f1e <UART_SetConfig+0x246>
 8003dde:	231b      	movs	r3, #27
 8003de0:	2220      	movs	r2, #32
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	19db      	adds	r3, r3, r7
 8003de6:	2210      	movs	r2, #16
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e098      	b.n	8003f1e <UART_SetConfig+0x246>
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7b      	ldr	r2, [pc, #492]	; (8003fe0 <UART_SetConfig+0x308>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d131      	bne.n	8003e5a <UART_SetConfig+0x182>
 8003df6:	4b79      	ldr	r3, [pc, #484]	; (8003fdc <UART_SetConfig+0x304>)
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d01d      	beq.n	8003e3e <UART_SetConfig+0x166>
 8003e02:	d823      	bhi.n	8003e4c <UART_SetConfig+0x174>
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d00c      	beq.n	8003e22 <UART_SetConfig+0x14a>
 8003e08:	d820      	bhi.n	8003e4c <UART_SetConfig+0x174>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <UART_SetConfig+0x13c>
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d00e      	beq.n	8003e30 <UART_SetConfig+0x158>
 8003e12:	e01b      	b.n	8003e4c <UART_SetConfig+0x174>
 8003e14:	231b      	movs	r3, #27
 8003e16:	2220      	movs	r2, #32
 8003e18:	189b      	adds	r3, r3, r2
 8003e1a:	19db      	adds	r3, r3, r7
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e07d      	b.n	8003f1e <UART_SetConfig+0x246>
 8003e22:	231b      	movs	r3, #27
 8003e24:	2220      	movs	r2, #32
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	19db      	adds	r3, r3, r7
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e076      	b.n	8003f1e <UART_SetConfig+0x246>
 8003e30:	231b      	movs	r3, #27
 8003e32:	2220      	movs	r2, #32
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	2204      	movs	r2, #4
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e06f      	b.n	8003f1e <UART_SetConfig+0x246>
 8003e3e:	231b      	movs	r3, #27
 8003e40:	2220      	movs	r2, #32
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	19db      	adds	r3, r3, r7
 8003e46:	2208      	movs	r2, #8
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e068      	b.n	8003f1e <UART_SetConfig+0x246>
 8003e4c:	231b      	movs	r3, #27
 8003e4e:	2220      	movs	r2, #32
 8003e50:	189b      	adds	r3, r3, r2
 8003e52:	19db      	adds	r3, r3, r7
 8003e54:	2210      	movs	r2, #16
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e061      	b.n	8003f1e <UART_SetConfig+0x246>
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a61      	ldr	r2, [pc, #388]	; (8003fe4 <UART_SetConfig+0x30c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d106      	bne.n	8003e72 <UART_SetConfig+0x19a>
 8003e64:	231b      	movs	r3, #27
 8003e66:	2220      	movs	r2, #32
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	19db      	adds	r3, r3, r7
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e055      	b.n	8003f1e <UART_SetConfig+0x246>
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5c      	ldr	r2, [pc, #368]	; (8003fe8 <UART_SetConfig+0x310>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d106      	bne.n	8003e8a <UART_SetConfig+0x1b2>
 8003e7c:	231b      	movs	r3, #27
 8003e7e:	2220      	movs	r2, #32
 8003e80:	189b      	adds	r3, r3, r2
 8003e82:	19db      	adds	r3, r3, r7
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e049      	b.n	8003f1e <UART_SetConfig+0x246>
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a50      	ldr	r2, [pc, #320]	; (8003fd0 <UART_SetConfig+0x2f8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d13e      	bne.n	8003f12 <UART_SetConfig+0x23a>
 8003e94:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <UART_SetConfig+0x304>)
 8003e96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e98:	23c0      	movs	r3, #192	; 0xc0
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	22c0      	movs	r2, #192	; 0xc0
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d027      	beq.n	8003ef6 <UART_SetConfig+0x21e>
 8003ea6:	22c0      	movs	r2, #192	; 0xc0
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d82a      	bhi.n	8003f04 <UART_SetConfig+0x22c>
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	0112      	lsls	r2, r2, #4
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d011      	beq.n	8003eda <UART_SetConfig+0x202>
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	0112      	lsls	r2, r2, #4
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d822      	bhi.n	8003f04 <UART_SetConfig+0x22c>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <UART_SetConfig+0x1f4>
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	00d2      	lsls	r2, r2, #3
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <UART_SetConfig+0x210>
 8003eca:	e01b      	b.n	8003f04 <UART_SetConfig+0x22c>
 8003ecc:	231b      	movs	r3, #27
 8003ece:	2220      	movs	r2, #32
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e021      	b.n	8003f1e <UART_SetConfig+0x246>
 8003eda:	231b      	movs	r3, #27
 8003edc:	2220      	movs	r2, #32
 8003ede:	189b      	adds	r3, r3, r2
 8003ee0:	19db      	adds	r3, r3, r7
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e01a      	b.n	8003f1e <UART_SetConfig+0x246>
 8003ee8:	231b      	movs	r3, #27
 8003eea:	2220      	movs	r2, #32
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e013      	b.n	8003f1e <UART_SetConfig+0x246>
 8003ef6:	231b      	movs	r3, #27
 8003ef8:	2220      	movs	r2, #32
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	19db      	adds	r3, r3, r7
 8003efe:	2208      	movs	r2, #8
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e00c      	b.n	8003f1e <UART_SetConfig+0x246>
 8003f04:	231b      	movs	r3, #27
 8003f06:	2220      	movs	r2, #32
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e005      	b.n	8003f1e <UART_SetConfig+0x246>
 8003f12:	231b      	movs	r3, #27
 8003f14:	2220      	movs	r2, #32
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	19db      	adds	r3, r3, r7
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <UART_SetConfig+0x2f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d000      	beq.n	8003f2a <UART_SetConfig+0x252>
 8003f28:	e0a9      	b.n	800407e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f2a:	231b      	movs	r3, #27
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	189b      	adds	r3, r3, r2
 8003f30:	19db      	adds	r3, r3, r7
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d015      	beq.n	8003f64 <UART_SetConfig+0x28c>
 8003f38:	dc18      	bgt.n	8003f6c <UART_SetConfig+0x294>
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d00d      	beq.n	8003f5a <UART_SetConfig+0x282>
 8003f3e:	dc15      	bgt.n	8003f6c <UART_SetConfig+0x294>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <UART_SetConfig+0x272>
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d005      	beq.n	8003f54 <UART_SetConfig+0x27c>
 8003f48:	e010      	b.n	8003f6c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4a:	f7fe fc35 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f52:	e014      	b.n	8003f7e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <UART_SetConfig+0x314>)
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f58:	e011      	b.n	8003f7e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5a:	f7fe fba1 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f62:	e00c      	b.n	8003f7e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f6a:	e008      	b.n	8003f7e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f70:	231a      	movs	r3, #26
 8003f72:	2220      	movs	r2, #32
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	19db      	adds	r3, r3, r7
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
        break;
 8003f7c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d100      	bne.n	8003f86 <UART_SetConfig+0x2ae>
 8003f84:	e14b      	b.n	800421e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <UART_SetConfig+0x318>)
 8003f8c:	0052      	lsls	r2, r2, #1
 8003f8e:	5ad3      	ldrh	r3, [r2, r3]
 8003f90:	0019      	movs	r1, r3
 8003f92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f94:	f7fc f8c8 	bl	8000128 <__udivsi3>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	189b      	adds	r3, r3, r2
 8003fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d305      	bcc.n	8003fb8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d91d      	bls.n	8003ff4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003fb8:	231a      	movs	r3, #26
 8003fba:	2220      	movs	r2, #32
 8003fbc:	189b      	adds	r3, r3, r2
 8003fbe:	19db      	adds	r3, r3, r7
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e12b      	b.n	800421e <UART_SetConfig+0x546>
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	cfff69f3 	.word	0xcfff69f3
 8003fcc:	ffffcfff 	.word	0xffffcfff
 8003fd0:	40008000 	.word	0x40008000
 8003fd4:	11fff4ff 	.word	0x11fff4ff
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40004c00 	.word	0x40004c00
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	0800585c 	.word	0x0800585c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004000:	4b92      	ldr	r3, [pc, #584]	; (800424c <UART_SetConfig+0x574>)
 8004002:	0052      	lsls	r2, r2, #1
 8004004:	5ad3      	ldrh	r3, [r2, r3]
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	69b8      	ldr	r0, [r7, #24]
 8004012:	69f9      	ldr	r1, [r7, #28]
 8004014:	f7fc f9fe 	bl	8000414 <__aeabi_uldivmod>
 8004018:	0002      	movs	r2, r0
 800401a:	000b      	movs	r3, r1
 800401c:	0e11      	lsrs	r1, r2, #24
 800401e:	021d      	lsls	r5, r3, #8
 8004020:	430d      	orrs	r5, r1
 8004022:	0214      	lsls	r4, r2, #8
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68b8      	ldr	r0, [r7, #8]
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	1900      	adds	r0, r0, r4
 8004036:	4169      	adcs	r1, r5
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f7fc f9e5 	bl	8000414 <__aeabi_uldivmod>
 800404a:	0002      	movs	r2, r0
 800404c:	000b      	movs	r3, r1
 800404e:	0013      	movs	r3, r2
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004054:	23c0      	movs	r3, #192	; 0xc0
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d309      	bcc.n	8004070 <UART_SetConfig+0x398>
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	035b      	lsls	r3, r3, #13
 8004062:	429a      	cmp	r2, r3
 8004064:	d204      	bcs.n	8004070 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	e0d6      	b.n	800421e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004070:	231a      	movs	r3, #26
 8004072:	2220      	movs	r2, #32
 8004074:	189b      	adds	r3, r3, r2
 8004076:	19db      	adds	r3, r3, r7
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e0cf      	b.n	800421e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	429a      	cmp	r2, r3
 8004088:	d000      	beq.n	800408c <UART_SetConfig+0x3b4>
 800408a:	e070      	b.n	800416e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800408c:	231b      	movs	r3, #27
 800408e:	2220      	movs	r2, #32
 8004090:	189b      	adds	r3, r3, r2
 8004092:	19db      	adds	r3, r3, r7
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b08      	cmp	r3, #8
 8004098:	d015      	beq.n	80040c6 <UART_SetConfig+0x3ee>
 800409a:	dc18      	bgt.n	80040ce <UART_SetConfig+0x3f6>
 800409c:	2b04      	cmp	r3, #4
 800409e:	d00d      	beq.n	80040bc <UART_SetConfig+0x3e4>
 80040a0:	dc15      	bgt.n	80040ce <UART_SetConfig+0x3f6>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <UART_SetConfig+0x3d4>
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d005      	beq.n	80040b6 <UART_SetConfig+0x3de>
 80040aa:	e010      	b.n	80040ce <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ac:	f7fe fb84 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 80040b0:	0003      	movs	r3, r0
 80040b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040b4:	e014      	b.n	80040e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b6:	4b66      	ldr	r3, [pc, #408]	; (8004250 <UART_SetConfig+0x578>)
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ba:	e011      	b.n	80040e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040bc:	f7fe faf0 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 80040c0:	0003      	movs	r3, r0
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c4:	e00c      	b.n	80040e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040cc:	e008      	b.n	80040e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80040d2:	231a      	movs	r3, #26
 80040d4:	2220      	movs	r2, #32
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	19db      	adds	r3, r3, r7
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
        break;
 80040de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d100      	bne.n	80040e8 <UART_SetConfig+0x410>
 80040e6:	e09a      	b.n	800421e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ec:	4b57      	ldr	r3, [pc, #348]	; (800424c <UART_SetConfig+0x574>)
 80040ee:	0052      	lsls	r2, r2, #1
 80040f0:	5ad3      	ldrh	r3, [r2, r3]
 80040f2:	0019      	movs	r1, r3
 80040f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040f6:	f7fc f817 	bl	8000128 <__udivsi3>
 80040fa:	0003      	movs	r3, r0
 80040fc:	005a      	lsls	r2, r3, #1
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	18d2      	adds	r2, r2, r3
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0019      	movs	r1, r3
 800410c:	0010      	movs	r0, r2
 800410e:	f7fc f80b 	bl	8000128 <__udivsi3>
 8004112:	0003      	movs	r3, r0
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2b0f      	cmp	r3, #15
 800411a:	d921      	bls.n	8004160 <UART_SetConfig+0x488>
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	025b      	lsls	r3, r3, #9
 8004122:	429a      	cmp	r2, r3
 8004124:	d21c      	bcs.n	8004160 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	b29a      	uxth	r2, r3
 800412a:	200e      	movs	r0, #14
 800412c:	2420      	movs	r4, #32
 800412e:	1903      	adds	r3, r0, r4
 8004130:	19db      	adds	r3, r3, r7
 8004132:	210f      	movs	r1, #15
 8004134:	438a      	bics	r2, r1
 8004136:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	b29b      	uxth	r3, r3
 800413e:	2207      	movs	r2, #7
 8004140:	4013      	ands	r3, r2
 8004142:	b299      	uxth	r1, r3
 8004144:	1903      	adds	r3, r0, r4
 8004146:	19db      	adds	r3, r3, r7
 8004148:	1902      	adds	r2, r0, r4
 800414a:	19d2      	adds	r2, r2, r7
 800414c:	8812      	ldrh	r2, [r2, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	1902      	adds	r2, r0, r4
 8004158:	19d2      	adds	r2, r2, r7
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	e05e      	b.n	800421e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004160:	231a      	movs	r3, #26
 8004162:	2220      	movs	r2, #32
 8004164:	189b      	adds	r3, r3, r2
 8004166:	19db      	adds	r3, r3, r7
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e057      	b.n	800421e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800416e:	231b      	movs	r3, #27
 8004170:	2220      	movs	r2, #32
 8004172:	189b      	adds	r3, r3, r2
 8004174:	19db      	adds	r3, r3, r7
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d015      	beq.n	80041a8 <UART_SetConfig+0x4d0>
 800417c:	dc18      	bgt.n	80041b0 <UART_SetConfig+0x4d8>
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00d      	beq.n	800419e <UART_SetConfig+0x4c6>
 8004182:	dc15      	bgt.n	80041b0 <UART_SetConfig+0x4d8>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <UART_SetConfig+0x4b6>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d005      	beq.n	8004198 <UART_SetConfig+0x4c0>
 800418c:	e010      	b.n	80041b0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800418e:	f7fe fb13 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8004192:	0003      	movs	r3, r0
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004196:	e014      	b.n	80041c2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004198:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <UART_SetConfig+0x578>)
 800419a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800419c:	e011      	b.n	80041c2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419e:	f7fe fa7f 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 80041a2:	0003      	movs	r3, r0
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041a6:	e00c      	b.n	80041c2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041ae:	e008      	b.n	80041c2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80041b4:	231a      	movs	r3, #26
 80041b6:	2220      	movs	r2, #32
 80041b8:	189b      	adds	r3, r3, r2
 80041ba:	19db      	adds	r3, r3, r7
 80041bc:	2201      	movs	r2, #1
 80041be:	701a      	strb	r2, [r3, #0]
        break;
 80041c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80041c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d02a      	beq.n	800421e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <UART_SetConfig+0x574>)
 80041ce:	0052      	lsls	r2, r2, #1
 80041d0:	5ad3      	ldrh	r3, [r2, r3]
 80041d2:	0019      	movs	r1, r3
 80041d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041d6:	f7fb ffa7 	bl	8000128 <__udivsi3>
 80041da:	0003      	movs	r3, r0
 80041dc:	001a      	movs	r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	18d2      	adds	r2, r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	0019      	movs	r1, r3
 80041ec:	0010      	movs	r0, r2
 80041ee:	f7fb ff9b 	bl	8000128 <__udivsi3>
 80041f2:	0003      	movs	r3, r0
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2b0f      	cmp	r3, #15
 80041fa:	d90a      	bls.n	8004212 <UART_SetConfig+0x53a>
 80041fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	429a      	cmp	r2, r3
 8004204:	d205      	bcs.n	8004212 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	b29a      	uxth	r2, r3
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e005      	b.n	800421e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004212:	231a      	movs	r3, #26
 8004214:	2220      	movs	r2, #32
 8004216:	189b      	adds	r3, r3, r2
 8004218:	19db      	adds	r3, r3, r7
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	226a      	movs	r2, #106	; 0x6a
 8004222:	2101      	movs	r1, #1
 8004224:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	2268      	movs	r2, #104	; 0x68
 800422a:	2101      	movs	r1, #1
 800422c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	2200      	movs	r2, #0
 8004232:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2200      	movs	r2, #0
 8004238:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800423a:	231a      	movs	r3, #26
 800423c:	2220      	movs	r2, #32
 800423e:	189b      	adds	r3, r3, r2
 8004240:	19db      	adds	r3, r3, r7
 8004242:	781b      	ldrb	r3, [r3, #0]
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b010      	add	sp, #64	; 0x40
 800424a:	bdb0      	pop	{r4, r5, r7, pc}
 800424c:	0800585c 	.word	0x0800585c
 8004250:	00f42400 	.word	0x00f42400

08004254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	2201      	movs	r2, #1
 8004262:	4013      	ands	r3, r2
 8004264:	d00b      	beq.n	800427e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a4a      	ldr	r2, [pc, #296]	; (8004398 <UART_AdvFeatureConfig+0x144>)
 800426e:	4013      	ands	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	2202      	movs	r2, #2
 8004284:	4013      	ands	r3, r2
 8004286:	d00b      	beq.n	80042a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4a43      	ldr	r2, [pc, #268]	; (800439c <UART_AdvFeatureConfig+0x148>)
 8004290:	4013      	ands	r3, r2
 8004292:	0019      	movs	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	2204      	movs	r2, #4
 80042a6:	4013      	ands	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <UART_AdvFeatureConfig+0x14c>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	2208      	movs	r2, #8
 80042c8:	4013      	ands	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <UART_AdvFeatureConfig+0x150>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	0019      	movs	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	2210      	movs	r2, #16
 80042ea:	4013      	ands	r3, r2
 80042ec:	d00b      	beq.n	8004306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <UART_AdvFeatureConfig+0x154>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	2220      	movs	r2, #32
 800430c:	4013      	ands	r3, r2
 800430e:	d00b      	beq.n	8004328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4a25      	ldr	r2, [pc, #148]	; (80043ac <UART_AdvFeatureConfig+0x158>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2240      	movs	r2, #64	; 0x40
 800432e:	4013      	ands	r3, r2
 8004330:	d01d      	beq.n	800436e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <UART_AdvFeatureConfig+0x15c>)
 800433a:	4013      	ands	r3, r2
 800433c:	0019      	movs	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	035b      	lsls	r3, r3, #13
 8004352:	429a      	cmp	r2, r3
 8004354:	d10b      	bne.n	800436e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <UART_AdvFeatureConfig+0x160>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	4013      	ands	r3, r2
 8004376:	d00b      	beq.n	8004390 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <UART_AdvFeatureConfig+0x164>)
 8004380:	4013      	ands	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}
 8004398:	fffdffff 	.word	0xfffdffff
 800439c:	fffeffff 	.word	0xfffeffff
 80043a0:	fffbffff 	.word	0xfffbffff
 80043a4:	ffff7fff 	.word	0xffff7fff
 80043a8:	ffffefff 	.word	0xffffefff
 80043ac:	ffffdfff 	.word	0xffffdfff
 80043b0:	ffefffff 	.word	0xffefffff
 80043b4:	ff9fffff 	.word	0xff9fffff
 80043b8:	fff7ffff 	.word	0xfff7ffff

080043bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2290      	movs	r2, #144	; 0x90
 80043c8:	2100      	movs	r1, #0
 80043ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043cc:	f7fc ff26 	bl	800121c <HAL_GetTick>
 80043d0:	0003      	movs	r3, r0
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	4013      	ands	r3, r2
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d10c      	bne.n	80043fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	0391      	lsls	r1, r2, #14
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <UART_CheckIdleState+0x98>)
 80043ec:	9200      	str	r2, [sp, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f000 f832 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d001      	beq.n	80043fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e026      	b.n	800444a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2204      	movs	r2, #4
 8004404:	4013      	ands	r3, r2
 8004406:	2b04      	cmp	r3, #4
 8004408:	d10c      	bne.n	8004424 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	03d1      	lsls	r1, r2, #15
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <UART_CheckIdleState+0x98>)
 8004414:	9200      	str	r2, [sp, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	f000 f81e 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 800441c:	1e03      	subs	r3, r0, #0
 800441e:	d001      	beq.n	8004424 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e012      	b.n	800444a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2288      	movs	r2, #136	; 0x88
 8004428:	2120      	movs	r1, #32
 800442a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	228c      	movs	r2, #140	; 0x8c
 8004430:	2120      	movs	r1, #32
 8004432:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2284      	movs	r2, #132	; 0x84
 8004444:	2100      	movs	r1, #0
 8004446:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b004      	add	sp, #16
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	01ffffff 	.word	0x01ffffff

08004458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b094      	sub	sp, #80	; 0x50
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	1dfb      	adds	r3, r7, #7
 8004466:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	e0a7      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446c:	3301      	adds	r3, #1
 800446e:	d100      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004470:	e0a3      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fc fed3 	bl	800121c <HAL_GetTick>
 8004476:	0002      	movs	r2, r0
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <UART_WaitOnFlagUntilTimeout+0x30>
 8004482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004484:	2b00      	cmp	r3, #0
 8004486:	d13f      	bne.n	8004508 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8310 	mrs	r3, PRIMASK
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
 8004492:	2301      	movs	r3, #1
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	f383 8810 	msr	PRIMASK, r3
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	494e      	ldr	r1, [pc, #312]	; (80045e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	f383 8810 	msr	PRIMASK, r3
}
 80044b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ba:	f3ef 8310 	mrs	r3, PRIMASK
 80044be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80044c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	643b      	str	r3, [r7, #64]	; 0x40
 80044c4:	2301      	movs	r3, #1
 80044c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	f383 8810 	msr	PRIMASK, r3
}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	438a      	bics	r2, r1
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e6:	f383 8810 	msr	PRIMASK, r3
}
 80044ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2288      	movs	r2, #136	; 0x88
 80044f0:	2120      	movs	r1, #32
 80044f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	228c      	movs	r2, #140	; 0x8c
 80044f8:	2120      	movs	r1, #32
 80044fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2284      	movs	r2, #132	; 0x84
 8004500:	2100      	movs	r1, #0
 8004502:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e069      	b.n	80045dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2204      	movs	r2, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d052      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	401a      	ands	r2, r3
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	429a      	cmp	r2, r3
 8004526:	d148      	bne.n	80045ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	613b      	str	r3, [r7, #16]
  return(result);
 8004538:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	2301      	movs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4924      	ldr	r1, [pc, #144]	; (80045e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004554:	400a      	ands	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004564:	f3ef 8310 	mrs	r3, PRIMASK
 8004568:	61fb      	str	r3, [r7, #28]
  return(result);
 800456a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
 800456e:	2301      	movs	r3, #1
 8004570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	438a      	bics	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f383 8810 	msr	PRIMASK, r3
}
 8004594:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2288      	movs	r2, #136	; 0x88
 800459a:	2120      	movs	r1, #32
 800459c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	228c      	movs	r2, #140	; 0x8c
 80045a2:	2120      	movs	r1, #32
 80045a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2290      	movs	r2, #144	; 0x90
 80045aa:	2120      	movs	r1, #32
 80045ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2284      	movs	r2, #132	; 0x84
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e010      	b.n	80045dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	425a      	negs	r2, r3
 80045ca:	4153      	adcs	r3, r2
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	001a      	movs	r2, r3
 80045d0:	1dfb      	adds	r3, r7, #7
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d100      	bne.n	80045da <UART_WaitOnFlagUntilTimeout+0x182>
 80045d8:	e747      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b014      	add	sp, #80	; 0x50
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	fffffe5f 	.word	0xfffffe5f

080045e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b090      	sub	sp, #64	; 0x40
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	1dbb      	adds	r3, r7, #6
 80045f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1dba      	adds	r2, r7, #6
 8004600:	215c      	movs	r1, #92	; 0x5c
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2290      	movs	r2, #144	; 0x90
 800460a:	2100      	movs	r1, #0
 800460c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	228c      	movs	r2, #140	; 0x8c
 8004612:	2122      	movs	r1, #34	; 0x22
 8004614:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	589b      	ldr	r3, [r3, r2]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d02d      	beq.n	800467c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	589b      	ldr	r3, [r3, r2]
 8004626:	4a40      	ldr	r2, [pc, #256]	; (8004728 <UART_Start_Receive_DMA+0x140>)
 8004628:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	589b      	ldr	r3, [r3, r2]
 8004630:	4a3e      	ldr	r2, [pc, #248]	; (800472c <UART_Start_Receive_DMA+0x144>)
 8004632:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	589b      	ldr	r3, [r3, r2]
 800463a:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <UART_Start_Receive_DMA+0x148>)
 800463c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	589b      	ldr	r3, [r3, r2]
 8004644:	2200      	movs	r2, #0
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	5898      	ldr	r0, [r3, r2]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3324      	adds	r3, #36	; 0x24
 8004654:	0019      	movs	r1, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	001a      	movs	r2, r3
 800465c:	1dbb      	adds	r3, r7, #6
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	f7fc ff4e 	bl	8001500 <HAL_DMA_Start_IT>
 8004664:	1e03      	subs	r3, r0, #0
 8004666:	d009      	beq.n	800467c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2290      	movs	r2, #144	; 0x90
 800466c:	2110      	movs	r1, #16
 800466e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	228c      	movs	r2, #140	; 0x8c
 8004674:	2120      	movs	r1, #32
 8004676:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e050      	b.n	800471e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d019      	beq.n	80046b8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468e:	2301      	movs	r3, #1
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	f383 8810 	msr	PRIMASK, r3
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	0049      	lsls	r1, r1, #1
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b8:	f3ef 8310 	mrs	r3, PRIMASK
 80046bc:	613b      	str	r3, [r7, #16]
  return(result);
 80046be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c2:	2301      	movs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f383 8810 	msr	PRIMASK, r3
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2101      	movs	r1, #1
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ea:	f3ef 8310 	mrs	r3, PRIMASK
 80046ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80046f0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
 80046f4:	2301      	movs	r3, #1
 80046f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f383 8810 	msr	PRIMASK, r3
}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2140      	movs	r1, #64	; 0x40
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	f383 8810 	msr	PRIMASK, r3
}
 800471a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b010      	add	sp, #64	; 0x40
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	08004881 	.word	0x08004881
 800472c:	080049b1 	.word	0x080049b1
 8004730:	080049f3 	.word	0x080049f3

08004734 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473c:	f3ef 8310 	mrs	r3, PRIMASK
 8004740:	60bb      	str	r3, [r7, #8]
  return(result);
 8004742:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	2301      	movs	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f383 8810 	msr	PRIMASK, r3
}
 8004750:	46c0      	nop			; (mov r8, r8)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	21c0      	movs	r1, #192	; 0xc0
 800475e:	438a      	bics	r2, r1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476e:	f3ef 8310 	mrs	r3, PRIMASK
 8004772:	617b      	str	r3, [r7, #20]
  return(result);
 8004774:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004776:	623b      	str	r3, [r7, #32]
 8004778:	2301      	movs	r3, #1
 800477a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4908      	ldr	r1, [pc, #32]	; (80047b0 <UART_EndTxTransfer+0x7c>)
 8004790:	400a      	ands	r2, r1
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2288      	movs	r2, #136	; 0x88
 80047a4:	2120      	movs	r1, #32
 80047a6:	5099      	str	r1, [r3, r2]
}
 80047a8:	46c0      	nop			; (mov r8, r8)
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b00a      	add	sp, #40	; 0x28
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	ff7fffff 	.word	0xff7fffff

080047b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08e      	sub	sp, #56	; 0x38
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047bc:	f3ef 8310 	mrs	r3, PRIMASK
 80047c0:	617b      	str	r3, [r7, #20]
  return(result);
 80047c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	2301      	movs	r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f383 8810 	msr	PRIMASK, r3
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4926      	ldr	r1, [pc, #152]	; (8004878 <UART_EndRxTransfer+0xc4>)
 80047de:	400a      	ands	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f383 8810 	msr	PRIMASK, r3
}
 80047ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ee:	f3ef 8310 	mrs	r3, PRIMASK
 80047f2:	623b      	str	r3, [r7, #32]
  return(result);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
 80047f8:	2301      	movs	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	f383 8810 	msr	PRIMASK, r3
}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	491b      	ldr	r1, [pc, #108]	; (800487c <UART_EndRxTransfer+0xc8>)
 8004810:	400a      	ands	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d118      	bne.n	800485a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004828:	f3ef 8310 	mrs	r3, PRIMASK
 800482c:	60bb      	str	r3, [r7, #8]
  return(result);
 800482e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004832:	2301      	movs	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2110      	movs	r1, #16
 800484a:	438a      	bics	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	228c      	movs	r2, #140	; 0x8c
 800485e:	2120      	movs	r1, #32
 8004860:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b00e      	add	sp, #56	; 0x38
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	fffffedf 	.word	0xfffffedf
 800487c:	effffffe 	.word	0xeffffffe

08004880 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b094      	sub	sp, #80	; 0x50
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2220      	movs	r2, #32
 8004896:	4013      	ands	r3, r2
 8004898:	d16f      	bne.n	800497a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	225e      	movs	r2, #94	; 0x5e
 800489e:	2100      	movs	r1, #0
 80048a0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a2:	f3ef 8310 	mrs	r3, PRIMASK
 80048a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80048a8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ac:	2301      	movs	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	493a      	ldr	r1, [pc, #232]	; (80049ac <UART_DMAReceiveCplt+0x12c>)
 80048c4:	400a      	ands	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d4:	f3ef 8310 	mrs	r3, PRIMASK
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
 80048de:	2301      	movs	r3, #1
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	f383 8810 	msr	PRIMASK, r3
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2101      	movs	r1, #1
 80048f6:	438a      	bics	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
 80048fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	f383 8810 	msr	PRIMASK, r3
}
 8004904:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
 8004910:	2301      	movs	r3, #1
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2140      	movs	r1, #64	; 0x40
 8004928:	438a      	bics	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	f383 8810 	msr	PRIMASK, r3
}
 8004936:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493a:	228c      	movs	r2, #140	; 0x8c
 800493c:	2120      	movs	r1, #32
 800493e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d118      	bne.n	800497a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004948:	f3ef 8310 	mrs	r3, PRIMASK
 800494c:	60fb      	str	r3, [r7, #12]
  return(result);
 800494e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004952:	2301      	movs	r3, #1
 8004954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f383 8810 	msr	PRIMASK, r3
}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2110      	movs	r1, #16
 800496a:	438a      	bics	r2, r1
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f383 8810 	msr	PRIMASK, r3
}
 8004978:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497c:	2200      	movs	r2, #0
 800497e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498a:	225c      	movs	r2, #92	; 0x5c
 800498c:	5a9a      	ldrh	r2, [r3, r2]
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	0011      	movs	r1, r2
 8004992:	0018      	movs	r0, r3
 8004994:	f7fc f8b2 	bl	8000afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004998:	e003      	b.n	80049a2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	0018      	movs	r0, r3
 800499e:	f7ff f983 	bl	8003ca8 <HAL_UART_RxCpltCallback>
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b014      	add	sp, #80	; 0x50
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	fffffeff 	.word	0xfffffeff

080049b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d10a      	bne.n	80049e2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	225c      	movs	r2, #92	; 0x5c
 80049d0:	5a9b      	ldrh	r3, [r3, r2]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	0011      	movs	r1, r2
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fc f88e 	bl	8000afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049e0:	e003      	b.n	80049ea <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7ff f967 	bl	8003cb8 <HAL_UART_RxHalfCpltCallback>
}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b004      	add	sp, #16
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2288      	movs	r2, #136	; 0x88
 8004a04:	589b      	ldr	r3, [r3, r2]
 8004a06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	228c      	movs	r2, #140	; 0x8c
 8004a0c:	589b      	ldr	r3, [r3, r2]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2280      	movs	r2, #128	; 0x80
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d10a      	bne.n	8004a34 <UART_DMAError+0x42>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b21      	cmp	r3, #33	; 0x21
 8004a22:	d107      	bne.n	8004a34 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2256      	movs	r2, #86	; 0x56
 8004a28:	2100      	movs	r1, #0
 8004a2a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7ff fe80 	bl	8004734 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d10a      	bne.n	8004a58 <UART_DMAError+0x66>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b22      	cmp	r3, #34	; 0x22
 8004a46:	d107      	bne.n	8004a58 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	225e      	movs	r2, #94	; 0x5e
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7ff feae 	bl	80047b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2290      	movs	r2, #144	; 0x90
 8004a5c:	589b      	ldr	r3, [r3, r2]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	431a      	orrs	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2190      	movs	r1, #144	; 0x90
 8004a66:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7ff f92c 	bl	8003cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b006      	add	sp, #24
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	225e      	movs	r2, #94	; 0x5e
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2256      	movs	r2, #86	; 0x56
 8004a92:	2100      	movs	r1, #0
 8004a94:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7ff f915 	bl	8003cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aae:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2140      	movs	r1, #64	; 0x40
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2288      	movs	r2, #136	; 0x88
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7ff f8d1 	bl	8003c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b006      	add	sp, #24
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b002      	add	sp, #8
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b002      	add	sp, #8
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2284      	movs	r2, #132	; 0x84
 8004b3c:	5c9b      	ldrb	r3, [r3, r2]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e027      	b.n	8004b96 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2284      	movs	r2, #132	; 0x84
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2288      	movs	r2, #136	; 0x88
 8004b52:	2124      	movs	r1, #36	; 0x24
 8004b54:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2101      	movs	r1, #1
 8004b6a:	438a      	bics	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2288      	movs	r2, #136	; 0x88
 8004b88:	2120      	movs	r1, #32
 8004b8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2284      	movs	r2, #132	; 0x84
 8004b90:	2100      	movs	r1, #0
 8004b92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	0018      	movs	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b004      	add	sp, #16
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	dfffffff 	.word	0xdfffffff

08004ba4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2284      	movs	r2, #132	; 0x84
 8004bb2:	5c9b      	ldrb	r3, [r3, r2]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e02e      	b.n	8004c1a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2284      	movs	r2, #132	; 0x84
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2288      	movs	r2, #136	; 0x88
 8004bc8:	2124      	movs	r1, #36	; 0x24
 8004bca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2101      	movs	r1, #1
 8004be0:	438a      	bics	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	08d9      	lsrs	r1, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 f8bc 	bl	8004d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2288      	movs	r2, #136	; 0x88
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2284      	movs	r2, #132	; 0x84
 8004c14:	2100      	movs	r1, #0
 8004c16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b004      	add	sp, #16
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2284      	movs	r2, #132	; 0x84
 8004c32:	5c9b      	ldrb	r3, [r3, r2]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e02f      	b.n	8004c9c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2284      	movs	r2, #132	; 0x84
 8004c40:	2101      	movs	r1, #1
 8004c42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2288      	movs	r2, #136	; 0x88
 8004c48:	2124      	movs	r1, #36	; 0x24
 8004c4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2101      	movs	r1, #1
 8004c60:	438a      	bics	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	0019      	movs	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 f87b 	bl	8004d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2288      	movs	r2, #136	; 0x88
 8004c8e:	2120      	movs	r1, #32
 8004c90:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2284      	movs	r2, #132	; 0x84
 8004c96:	2100      	movs	r1, #0
 8004c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b004      	add	sp, #16
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	f1ffffff 	.word	0xf1ffffff

08004ca8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca8:	b5b0      	push	{r4, r5, r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	1dbb      	adds	r3, r7, #6
 8004cb4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	228c      	movs	r2, #140	; 0x8c
 8004cba:	589b      	ldr	r3, [r3, r2]
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d156      	bne.n	8004d6e <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004cc6:	1dbb      	adds	r3, r7, #6
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e04e      	b.n	8004d70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	015b      	lsls	r3, r3, #5
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d109      	bne.n	8004cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	4013      	ands	r3, r2
 8004cec:	d001      	beq.n	8004cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e03e      	b.n	8004d70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004cfe:	2527      	movs	r5, #39	; 0x27
 8004d00:	197c      	adds	r4, r7, r5
 8004d02:	1dbb      	adds	r3, r7, #6
 8004d04:	881a      	ldrh	r2, [r3, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7ff fc6c 	bl	80045e8 <UART_Start_Receive_DMA>
 8004d10:	0003      	movs	r3, r0
 8004d12:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004d14:	197b      	adds	r3, r7, r5
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d124      	bne.n	8004d66 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d11c      	bne.n	8004d5e <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d30:	617b      	str	r3, [r7, #20]
  return(result);
 8004d32:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2110      	movs	r1, #16
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	e003      	b.n	8004d66 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004d5e:	2327      	movs	r3, #39	; 0x27
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004d66:	2327      	movs	r3, #39	; 0x27
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	e000      	b.n	8004d70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
  }
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b00a      	add	sp, #40	; 0x28
 8004d76:	bdb0      	pop	{r4, r5, r7, pc}

08004d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d108      	bne.n	8004d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	226a      	movs	r2, #106	; 0x6a
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2268      	movs	r2, #104	; 0x68
 8004d94:	2101      	movs	r1, #1
 8004d96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d98:	e043      	b.n	8004e22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d9a:	260f      	movs	r6, #15
 8004d9c:	19bb      	adds	r3, r7, r6
 8004d9e:	2208      	movs	r2, #8
 8004da0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004da2:	200e      	movs	r0, #14
 8004da4:	183b      	adds	r3, r7, r0
 8004da6:	2208      	movs	r2, #8
 8004da8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	0e5b      	lsrs	r3, r3, #25
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	240d      	movs	r4, #13
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	2107      	movs	r1, #7
 8004dba:	400a      	ands	r2, r1
 8004dbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	0f5b      	lsrs	r3, r3, #29
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	250c      	movs	r5, #12
 8004dca:	197b      	adds	r3, r7, r5
 8004dcc:	2107      	movs	r1, #7
 8004dce:	400a      	ands	r2, r1
 8004dd0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	197a      	adds	r2, r7, r5
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	4914      	ldr	r1, [pc, #80]	; (8004e2c <UARTEx_SetNbDataToProcess+0xb4>)
 8004ddc:	5c8a      	ldrb	r2, [r1, r2]
 8004dde:	435a      	muls	r2, r3
 8004de0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004de2:	197b      	adds	r3, r7, r5
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <UARTEx_SetNbDataToProcess+0xb8>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dea:	0019      	movs	r1, r3
 8004dec:	f7fb fa26 	bl	800023c <__divsi3>
 8004df0:	0003      	movs	r3, r0
 8004df2:	b299      	uxth	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	226a      	movs	r2, #106	; 0x6a
 8004df8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dfa:	19bb      	adds	r3, r7, r6
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	193a      	adds	r2, r7, r4
 8004e00:	7812      	ldrb	r2, [r2, #0]
 8004e02:	490a      	ldr	r1, [pc, #40]	; (8004e2c <UARTEx_SetNbDataToProcess+0xb4>)
 8004e04:	5c8a      	ldrb	r2, [r1, r2]
 8004e06:	435a      	muls	r2, r3
 8004e08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e0a:	193b      	adds	r3, r7, r4
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	4a08      	ldr	r2, [pc, #32]	; (8004e30 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e12:	0019      	movs	r1, r3
 8004e14:	f7fb fa12 	bl	800023c <__divsi3>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	b299      	uxth	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2268      	movs	r2, #104	; 0x68
 8004e20:	5299      	strh	r1, [r3, r2]
}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b005      	add	sp, #20
 8004e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	08005874 	.word	0x08005874
 8004e30:	0800587c 	.word	0x0800587c

08004e34 <__errno>:
 8004e34:	4b01      	ldr	r3, [pc, #4]	; (8004e3c <__errno+0x8>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	4770      	bx	lr
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	20000040 	.word	0x20000040

08004e40 <__libc_init_array>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	2600      	movs	r6, #0
 8004e44:	4d0c      	ldr	r5, [pc, #48]	; (8004e78 <__libc_init_array+0x38>)
 8004e46:	4c0d      	ldr	r4, [pc, #52]	; (8004e7c <__libc_init_array+0x3c>)
 8004e48:	1b64      	subs	r4, r4, r5
 8004e4a:	10a4      	asrs	r4, r4, #2
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	d109      	bne.n	8004e64 <__libc_init_array+0x24>
 8004e50:	2600      	movs	r6, #0
 8004e52:	f000 fc9d 	bl	8005790 <_init>
 8004e56:	4d0a      	ldr	r5, [pc, #40]	; (8004e80 <__libc_init_array+0x40>)
 8004e58:	4c0a      	ldr	r4, [pc, #40]	; (8004e84 <__libc_init_array+0x44>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	d105      	bne.n	8004e6e <__libc_init_array+0x2e>
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	00b3      	lsls	r3, r6, #2
 8004e66:	58eb      	ldr	r3, [r5, r3]
 8004e68:	4798      	blx	r3
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7ee      	b.n	8004e4c <__libc_init_array+0xc>
 8004e6e:	00b3      	lsls	r3, r6, #2
 8004e70:	58eb      	ldr	r3, [r5, r3]
 8004e72:	4798      	blx	r3
 8004e74:	3601      	adds	r6, #1
 8004e76:	e7f2      	b.n	8004e5e <__libc_init_array+0x1e>
 8004e78:	080058c0 	.word	0x080058c0
 8004e7c:	080058c0 	.word	0x080058c0
 8004e80:	080058c0 	.word	0x080058c0
 8004e84:	080058c4 	.word	0x080058c4

08004e88 <memset>:
 8004e88:	0003      	movs	r3, r0
 8004e8a:	1882      	adds	r2, r0, r2
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d100      	bne.n	8004e92 <memset+0xa>
 8004e90:	4770      	bx	lr
 8004e92:	7019      	strb	r1, [r3, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	e7f9      	b.n	8004e8c <memset+0x4>

08004e98 <siprintf>:
 8004e98:	b40e      	push	{r1, r2, r3}
 8004e9a:	b500      	push	{lr}
 8004e9c:	490b      	ldr	r1, [pc, #44]	; (8004ecc <siprintf+0x34>)
 8004e9e:	b09c      	sub	sp, #112	; 0x70
 8004ea0:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea2:	9002      	str	r0, [sp, #8]
 8004ea4:	9006      	str	r0, [sp, #24]
 8004ea6:	9107      	str	r1, [sp, #28]
 8004ea8:	9104      	str	r1, [sp, #16]
 8004eaa:	4809      	ldr	r0, [pc, #36]	; (8004ed0 <siprintf+0x38>)
 8004eac:	4909      	ldr	r1, [pc, #36]	; (8004ed4 <siprintf+0x3c>)
 8004eae:	cb04      	ldmia	r3!, {r2}
 8004eb0:	9105      	str	r1, [sp, #20]
 8004eb2:	6800      	ldr	r0, [r0, #0]
 8004eb4:	a902      	add	r1, sp, #8
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	f000 f882 	bl	8004fc0 <_svfiprintf_r>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9a02      	ldr	r2, [sp, #8]
 8004ec0:	7013      	strb	r3, [r2, #0]
 8004ec2:	b01c      	add	sp, #112	; 0x70
 8004ec4:	bc08      	pop	{r3}
 8004ec6:	b003      	add	sp, #12
 8004ec8:	4718      	bx	r3
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	7fffffff 	.word	0x7fffffff
 8004ed0:	20000040 	.word	0x20000040
 8004ed4:	ffff0208 	.word	0xffff0208

08004ed8 <strncmp>:
 8004ed8:	b530      	push	{r4, r5, lr}
 8004eda:	0005      	movs	r5, r0
 8004edc:	1e10      	subs	r0, r2, #0
 8004ede:	d008      	beq.n	8004ef2 <strncmp+0x1a>
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	3a01      	subs	r2, #1
 8004ee4:	5d2b      	ldrb	r3, [r5, r4]
 8004ee6:	5d08      	ldrb	r0, [r1, r4]
 8004ee8:	4283      	cmp	r3, r0
 8004eea:	d101      	bne.n	8004ef0 <strncmp+0x18>
 8004eec:	4294      	cmp	r4, r2
 8004eee:	d101      	bne.n	8004ef4 <strncmp+0x1c>
 8004ef0:	1a18      	subs	r0, r3, r0
 8004ef2:	bd30      	pop	{r4, r5, pc}
 8004ef4:	3401      	adds	r4, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f4      	bne.n	8004ee4 <strncmp+0xc>
 8004efa:	e7f9      	b.n	8004ef0 <strncmp+0x18>

08004efc <__ssputs_r>:
 8004efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efe:	688e      	ldr	r6, [r1, #8]
 8004f00:	b085      	sub	sp, #20
 8004f02:	0007      	movs	r7, r0
 8004f04:	000c      	movs	r4, r1
 8004f06:	9203      	str	r2, [sp, #12]
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	429e      	cmp	r6, r3
 8004f0c:	d83c      	bhi.n	8004f88 <__ssputs_r+0x8c>
 8004f0e:	2390      	movs	r3, #144	; 0x90
 8004f10:	898a      	ldrh	r2, [r1, #12]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	421a      	tst	r2, r3
 8004f16:	d034      	beq.n	8004f82 <__ssputs_r+0x86>
 8004f18:	6909      	ldr	r1, [r1, #16]
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	6960      	ldr	r0, [r4, #20]
 8004f1e:	1a5b      	subs	r3, r3, r1
 8004f20:	9302      	str	r3, [sp, #8]
 8004f22:	2303      	movs	r3, #3
 8004f24:	4343      	muls	r3, r0
 8004f26:	0fdd      	lsrs	r5, r3, #31
 8004f28:	18ed      	adds	r5, r5, r3
 8004f2a:	9b01      	ldr	r3, [sp, #4]
 8004f2c:	9802      	ldr	r0, [sp, #8]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	181b      	adds	r3, r3, r0
 8004f32:	106d      	asrs	r5, r5, #1
 8004f34:	42ab      	cmp	r3, r5
 8004f36:	d900      	bls.n	8004f3a <__ssputs_r+0x3e>
 8004f38:	001d      	movs	r5, r3
 8004f3a:	0553      	lsls	r3, r2, #21
 8004f3c:	d532      	bpl.n	8004fa4 <__ssputs_r+0xa8>
 8004f3e:	0029      	movs	r1, r5
 8004f40:	0038      	movs	r0, r7
 8004f42:	f000 fb53 	bl	80055ec <_malloc_r>
 8004f46:	1e06      	subs	r6, r0, #0
 8004f48:	d109      	bne.n	8004f5e <__ssputs_r+0x62>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	2340      	movs	r3, #64	; 0x40
 8004f50:	2001      	movs	r0, #1
 8004f52:	89a2      	ldrh	r2, [r4, #12]
 8004f54:	4240      	negs	r0, r0
 8004f56:	4313      	orrs	r3, r2
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	b005      	add	sp, #20
 8004f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f5e:	9a02      	ldr	r2, [sp, #8]
 8004f60:	6921      	ldr	r1, [r4, #16]
 8004f62:	f000 faba 	bl	80054da <memcpy>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <__ssputs_r+0xc0>)
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	9b02      	ldr	r3, [sp, #8]
 8004f74:	6126      	str	r6, [r4, #16]
 8004f76:	18f6      	adds	r6, r6, r3
 8004f78:	6026      	str	r6, [r4, #0]
 8004f7a:	6165      	str	r5, [r4, #20]
 8004f7c:	9e01      	ldr	r6, [sp, #4]
 8004f7e:	1aed      	subs	r5, r5, r3
 8004f80:	60a5      	str	r5, [r4, #8]
 8004f82:	9b01      	ldr	r3, [sp, #4]
 8004f84:	429e      	cmp	r6, r3
 8004f86:	d900      	bls.n	8004f8a <__ssputs_r+0x8e>
 8004f88:	9e01      	ldr	r6, [sp, #4]
 8004f8a:	0032      	movs	r2, r6
 8004f8c:	9903      	ldr	r1, [sp, #12]
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	f000 faac 	bl	80054ec <memmove>
 8004f94:	68a3      	ldr	r3, [r4, #8]
 8004f96:	2000      	movs	r0, #0
 8004f98:	1b9b      	subs	r3, r3, r6
 8004f9a:	60a3      	str	r3, [r4, #8]
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	199e      	adds	r6, r3, r6
 8004fa0:	6026      	str	r6, [r4, #0]
 8004fa2:	e7da      	b.n	8004f5a <__ssputs_r+0x5e>
 8004fa4:	002a      	movs	r2, r5
 8004fa6:	0038      	movs	r0, r7
 8004fa8:	f000 fb96 	bl	80056d8 <_realloc_r>
 8004fac:	1e06      	subs	r6, r0, #0
 8004fae:	d1e0      	bne.n	8004f72 <__ssputs_r+0x76>
 8004fb0:	0038      	movs	r0, r7
 8004fb2:	6921      	ldr	r1, [r4, #16]
 8004fb4:	f000 faae 	bl	8005514 <_free_r>
 8004fb8:	e7c7      	b.n	8004f4a <__ssputs_r+0x4e>
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	fffffb7f 	.word	0xfffffb7f

08004fc0 <_svfiprintf_r>:
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b0a1      	sub	sp, #132	; 0x84
 8004fc4:	9003      	str	r0, [sp, #12]
 8004fc6:	001d      	movs	r5, r3
 8004fc8:	898b      	ldrh	r3, [r1, #12]
 8004fca:	000f      	movs	r7, r1
 8004fcc:	0016      	movs	r6, r2
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	d511      	bpl.n	8004ff6 <_svfiprintf_r+0x36>
 8004fd2:	690b      	ldr	r3, [r1, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10e      	bne.n	8004ff6 <_svfiprintf_r+0x36>
 8004fd8:	2140      	movs	r1, #64	; 0x40
 8004fda:	f000 fb07 	bl	80055ec <_malloc_r>
 8004fde:	6038      	str	r0, [r7, #0]
 8004fe0:	6138      	str	r0, [r7, #16]
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d105      	bne.n	8004ff2 <_svfiprintf_r+0x32>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	9a03      	ldr	r2, [sp, #12]
 8004fea:	3801      	subs	r0, #1
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	b021      	add	sp, #132	; 0x84
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	ac08      	add	r4, sp, #32
 8004ffa:	6163      	str	r3, [r4, #20]
 8004ffc:	3320      	adds	r3, #32
 8004ffe:	7663      	strb	r3, [r4, #25]
 8005000:	3310      	adds	r3, #16
 8005002:	76a3      	strb	r3, [r4, #26]
 8005004:	9507      	str	r5, [sp, #28]
 8005006:	0035      	movs	r5, r6
 8005008:	782b      	ldrb	r3, [r5, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <_svfiprintf_r+0x52>
 800500e:	2b25      	cmp	r3, #37	; 0x25
 8005010:	d147      	bne.n	80050a2 <_svfiprintf_r+0xe2>
 8005012:	1bab      	subs	r3, r5, r6
 8005014:	9305      	str	r3, [sp, #20]
 8005016:	42b5      	cmp	r5, r6
 8005018:	d00c      	beq.n	8005034 <_svfiprintf_r+0x74>
 800501a:	0032      	movs	r2, r6
 800501c:	0039      	movs	r1, r7
 800501e:	9803      	ldr	r0, [sp, #12]
 8005020:	f7ff ff6c 	bl	8004efc <__ssputs_r>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d100      	bne.n	800502a <_svfiprintf_r+0x6a>
 8005028:	e0ae      	b.n	8005188 <_svfiprintf_r+0x1c8>
 800502a:	6962      	ldr	r2, [r4, #20]
 800502c:	9b05      	ldr	r3, [sp, #20]
 800502e:	4694      	mov	ip, r2
 8005030:	4463      	add	r3, ip
 8005032:	6163      	str	r3, [r4, #20]
 8005034:	782b      	ldrb	r3, [r5, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d100      	bne.n	800503c <_svfiprintf_r+0x7c>
 800503a:	e0a5      	b.n	8005188 <_svfiprintf_r+0x1c8>
 800503c:	2201      	movs	r2, #1
 800503e:	2300      	movs	r3, #0
 8005040:	4252      	negs	r2, r2
 8005042:	6062      	str	r2, [r4, #4]
 8005044:	a904      	add	r1, sp, #16
 8005046:	3254      	adds	r2, #84	; 0x54
 8005048:	1852      	adds	r2, r2, r1
 800504a:	1c6e      	adds	r6, r5, #1
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	60e3      	str	r3, [r4, #12]
 8005050:	60a3      	str	r3, [r4, #8]
 8005052:	7013      	strb	r3, [r2, #0]
 8005054:	65a3      	str	r3, [r4, #88]	; 0x58
 8005056:	2205      	movs	r2, #5
 8005058:	7831      	ldrb	r1, [r6, #0]
 800505a:	4854      	ldr	r0, [pc, #336]	; (80051ac <_svfiprintf_r+0x1ec>)
 800505c:	f000 fa32 	bl	80054c4 <memchr>
 8005060:	1c75      	adds	r5, r6, #1
 8005062:	2800      	cmp	r0, #0
 8005064:	d11f      	bne.n	80050a6 <_svfiprintf_r+0xe6>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	06d3      	lsls	r3, r2, #27
 800506a:	d504      	bpl.n	8005076 <_svfiprintf_r+0xb6>
 800506c:	2353      	movs	r3, #83	; 0x53
 800506e:	a904      	add	r1, sp, #16
 8005070:	185b      	adds	r3, r3, r1
 8005072:	2120      	movs	r1, #32
 8005074:	7019      	strb	r1, [r3, #0]
 8005076:	0713      	lsls	r3, r2, #28
 8005078:	d504      	bpl.n	8005084 <_svfiprintf_r+0xc4>
 800507a:	2353      	movs	r3, #83	; 0x53
 800507c:	a904      	add	r1, sp, #16
 800507e:	185b      	adds	r3, r3, r1
 8005080:	212b      	movs	r1, #43	; 0x2b
 8005082:	7019      	strb	r1, [r3, #0]
 8005084:	7833      	ldrb	r3, [r6, #0]
 8005086:	2b2a      	cmp	r3, #42	; 0x2a
 8005088:	d016      	beq.n	80050b8 <_svfiprintf_r+0xf8>
 800508a:	0035      	movs	r5, r6
 800508c:	2100      	movs	r1, #0
 800508e:	200a      	movs	r0, #10
 8005090:	68e3      	ldr	r3, [r4, #12]
 8005092:	782a      	ldrb	r2, [r5, #0]
 8005094:	1c6e      	adds	r6, r5, #1
 8005096:	3a30      	subs	r2, #48	; 0x30
 8005098:	2a09      	cmp	r2, #9
 800509a:	d94e      	bls.n	800513a <_svfiprintf_r+0x17a>
 800509c:	2900      	cmp	r1, #0
 800509e:	d111      	bne.n	80050c4 <_svfiprintf_r+0x104>
 80050a0:	e017      	b.n	80050d2 <_svfiprintf_r+0x112>
 80050a2:	3501      	adds	r5, #1
 80050a4:	e7b0      	b.n	8005008 <_svfiprintf_r+0x48>
 80050a6:	4b41      	ldr	r3, [pc, #260]	; (80051ac <_svfiprintf_r+0x1ec>)
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	1ac0      	subs	r0, r0, r3
 80050ac:	2301      	movs	r3, #1
 80050ae:	4083      	lsls	r3, r0
 80050b0:	4313      	orrs	r3, r2
 80050b2:	002e      	movs	r6, r5
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	e7ce      	b.n	8005056 <_svfiprintf_r+0x96>
 80050b8:	9b07      	ldr	r3, [sp, #28]
 80050ba:	1d19      	adds	r1, r3, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	9107      	str	r1, [sp, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	db01      	blt.n	80050c8 <_svfiprintf_r+0x108>
 80050c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c6:	e004      	b.n	80050d2 <_svfiprintf_r+0x112>
 80050c8:	425b      	negs	r3, r3
 80050ca:	60e3      	str	r3, [r4, #12]
 80050cc:	2302      	movs	r3, #2
 80050ce:	4313      	orrs	r3, r2
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	782b      	ldrb	r3, [r5, #0]
 80050d4:	2b2e      	cmp	r3, #46	; 0x2e
 80050d6:	d10a      	bne.n	80050ee <_svfiprintf_r+0x12e>
 80050d8:	786b      	ldrb	r3, [r5, #1]
 80050da:	2b2a      	cmp	r3, #42	; 0x2a
 80050dc:	d135      	bne.n	800514a <_svfiprintf_r+0x18a>
 80050de:	9b07      	ldr	r3, [sp, #28]
 80050e0:	3502      	adds	r5, #2
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	9207      	str	r2, [sp, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db2b      	blt.n	8005144 <_svfiprintf_r+0x184>
 80050ec:	9309      	str	r3, [sp, #36]	; 0x24
 80050ee:	4e30      	ldr	r6, [pc, #192]	; (80051b0 <_svfiprintf_r+0x1f0>)
 80050f0:	2203      	movs	r2, #3
 80050f2:	0030      	movs	r0, r6
 80050f4:	7829      	ldrb	r1, [r5, #0]
 80050f6:	f000 f9e5 	bl	80054c4 <memchr>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d006      	beq.n	800510c <_svfiprintf_r+0x14c>
 80050fe:	2340      	movs	r3, #64	; 0x40
 8005100:	1b80      	subs	r0, r0, r6
 8005102:	4083      	lsls	r3, r0
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	3501      	adds	r5, #1
 8005108:	4313      	orrs	r3, r2
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	7829      	ldrb	r1, [r5, #0]
 800510e:	2206      	movs	r2, #6
 8005110:	4828      	ldr	r0, [pc, #160]	; (80051b4 <_svfiprintf_r+0x1f4>)
 8005112:	1c6e      	adds	r6, r5, #1
 8005114:	7621      	strb	r1, [r4, #24]
 8005116:	f000 f9d5 	bl	80054c4 <memchr>
 800511a:	2800      	cmp	r0, #0
 800511c:	d03c      	beq.n	8005198 <_svfiprintf_r+0x1d8>
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <_svfiprintf_r+0x1f8>)
 8005120:	2b00      	cmp	r3, #0
 8005122:	d125      	bne.n	8005170 <_svfiprintf_r+0x1b0>
 8005124:	2207      	movs	r2, #7
 8005126:	9b07      	ldr	r3, [sp, #28]
 8005128:	3307      	adds	r3, #7
 800512a:	4393      	bics	r3, r2
 800512c:	3308      	adds	r3, #8
 800512e:	9307      	str	r3, [sp, #28]
 8005130:	6963      	ldr	r3, [r4, #20]
 8005132:	9a04      	ldr	r2, [sp, #16]
 8005134:	189b      	adds	r3, r3, r2
 8005136:	6163      	str	r3, [r4, #20]
 8005138:	e765      	b.n	8005006 <_svfiprintf_r+0x46>
 800513a:	4343      	muls	r3, r0
 800513c:	0035      	movs	r5, r6
 800513e:	2101      	movs	r1, #1
 8005140:	189b      	adds	r3, r3, r2
 8005142:	e7a6      	b.n	8005092 <_svfiprintf_r+0xd2>
 8005144:	2301      	movs	r3, #1
 8005146:	425b      	negs	r3, r3
 8005148:	e7d0      	b.n	80050ec <_svfiprintf_r+0x12c>
 800514a:	2300      	movs	r3, #0
 800514c:	200a      	movs	r0, #10
 800514e:	001a      	movs	r2, r3
 8005150:	3501      	adds	r5, #1
 8005152:	6063      	str	r3, [r4, #4]
 8005154:	7829      	ldrb	r1, [r5, #0]
 8005156:	1c6e      	adds	r6, r5, #1
 8005158:	3930      	subs	r1, #48	; 0x30
 800515a:	2909      	cmp	r1, #9
 800515c:	d903      	bls.n	8005166 <_svfiprintf_r+0x1a6>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0c5      	beq.n	80050ee <_svfiprintf_r+0x12e>
 8005162:	9209      	str	r2, [sp, #36]	; 0x24
 8005164:	e7c3      	b.n	80050ee <_svfiprintf_r+0x12e>
 8005166:	4342      	muls	r2, r0
 8005168:	0035      	movs	r5, r6
 800516a:	2301      	movs	r3, #1
 800516c:	1852      	adds	r2, r2, r1
 800516e:	e7f1      	b.n	8005154 <_svfiprintf_r+0x194>
 8005170:	ab07      	add	r3, sp, #28
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	003a      	movs	r2, r7
 8005176:	0021      	movs	r1, r4
 8005178:	4b10      	ldr	r3, [pc, #64]	; (80051bc <_svfiprintf_r+0x1fc>)
 800517a:	9803      	ldr	r0, [sp, #12]
 800517c:	e000      	b.n	8005180 <_svfiprintf_r+0x1c0>
 800517e:	bf00      	nop
 8005180:	9004      	str	r0, [sp, #16]
 8005182:	9b04      	ldr	r3, [sp, #16]
 8005184:	3301      	adds	r3, #1
 8005186:	d1d3      	bne.n	8005130 <_svfiprintf_r+0x170>
 8005188:	89bb      	ldrh	r3, [r7, #12]
 800518a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800518c:	065b      	lsls	r3, r3, #25
 800518e:	d400      	bmi.n	8005192 <_svfiprintf_r+0x1d2>
 8005190:	e72d      	b.n	8004fee <_svfiprintf_r+0x2e>
 8005192:	2001      	movs	r0, #1
 8005194:	4240      	negs	r0, r0
 8005196:	e72a      	b.n	8004fee <_svfiprintf_r+0x2e>
 8005198:	ab07      	add	r3, sp, #28
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	003a      	movs	r2, r7
 800519e:	0021      	movs	r1, r4
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <_svfiprintf_r+0x1fc>)
 80051a2:	9803      	ldr	r0, [sp, #12]
 80051a4:	f000 f87c 	bl	80052a0 <_printf_i>
 80051a8:	e7ea      	b.n	8005180 <_svfiprintf_r+0x1c0>
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	08005884 	.word	0x08005884
 80051b0:	0800588a 	.word	0x0800588a
 80051b4:	0800588e 	.word	0x0800588e
 80051b8:	00000000 	.word	0x00000000
 80051bc:	08004efd 	.word	0x08004efd

080051c0 <_printf_common>:
 80051c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c2:	0015      	movs	r5, r2
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	688a      	ldr	r2, [r1, #8]
 80051c8:	690b      	ldr	r3, [r1, #16]
 80051ca:	000c      	movs	r4, r1
 80051cc:	9000      	str	r0, [sp, #0]
 80051ce:	4293      	cmp	r3, r2
 80051d0:	da00      	bge.n	80051d4 <_printf_common+0x14>
 80051d2:	0013      	movs	r3, r2
 80051d4:	0022      	movs	r2, r4
 80051d6:	602b      	str	r3, [r5, #0]
 80051d8:	3243      	adds	r2, #67	; 0x43
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d001      	beq.n	80051e4 <_printf_common+0x24>
 80051e0:	3301      	adds	r3, #1
 80051e2:	602b      	str	r3, [r5, #0]
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	069b      	lsls	r3, r3, #26
 80051e8:	d502      	bpl.n	80051f0 <_printf_common+0x30>
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	3302      	adds	r3, #2
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	2306      	movs	r3, #6
 80051f4:	0017      	movs	r7, r2
 80051f6:	401f      	ands	r7, r3
 80051f8:	421a      	tst	r2, r3
 80051fa:	d027      	beq.n	800524c <_printf_common+0x8c>
 80051fc:	0023      	movs	r3, r4
 80051fe:	3343      	adds	r3, #67	; 0x43
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	1e5a      	subs	r2, r3, #1
 8005204:	4193      	sbcs	r3, r2
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	0692      	lsls	r2, r2, #26
 800520a:	d430      	bmi.n	800526e <_printf_common+0xae>
 800520c:	0022      	movs	r2, r4
 800520e:	9901      	ldr	r1, [sp, #4]
 8005210:	9800      	ldr	r0, [sp, #0]
 8005212:	9e08      	ldr	r6, [sp, #32]
 8005214:	3243      	adds	r2, #67	; 0x43
 8005216:	47b0      	blx	r6
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d025      	beq.n	8005268 <_printf_common+0xa8>
 800521c:	2306      	movs	r3, #6
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	682a      	ldr	r2, [r5, #0]
 8005222:	68e1      	ldr	r1, [r4, #12]
 8005224:	2500      	movs	r5, #0
 8005226:	4003      	ands	r3, r0
 8005228:	2b04      	cmp	r3, #4
 800522a:	d103      	bne.n	8005234 <_printf_common+0x74>
 800522c:	1a8d      	subs	r5, r1, r2
 800522e:	43eb      	mvns	r3, r5
 8005230:	17db      	asrs	r3, r3, #31
 8005232:	401d      	ands	r5, r3
 8005234:	68a3      	ldr	r3, [r4, #8]
 8005236:	6922      	ldr	r2, [r4, #16]
 8005238:	4293      	cmp	r3, r2
 800523a:	dd01      	ble.n	8005240 <_printf_common+0x80>
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	18ed      	adds	r5, r5, r3
 8005240:	2700      	movs	r7, #0
 8005242:	42bd      	cmp	r5, r7
 8005244:	d120      	bne.n	8005288 <_printf_common+0xc8>
 8005246:	2000      	movs	r0, #0
 8005248:	e010      	b.n	800526c <_printf_common+0xac>
 800524a:	3701      	adds	r7, #1
 800524c:	68e3      	ldr	r3, [r4, #12]
 800524e:	682a      	ldr	r2, [r5, #0]
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	42bb      	cmp	r3, r7
 8005254:	ddd2      	ble.n	80051fc <_printf_common+0x3c>
 8005256:	0022      	movs	r2, r4
 8005258:	2301      	movs	r3, #1
 800525a:	9901      	ldr	r1, [sp, #4]
 800525c:	9800      	ldr	r0, [sp, #0]
 800525e:	9e08      	ldr	r6, [sp, #32]
 8005260:	3219      	adds	r2, #25
 8005262:	47b0      	blx	r6
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d1f0      	bne.n	800524a <_printf_common+0x8a>
 8005268:	2001      	movs	r0, #1
 800526a:	4240      	negs	r0, r0
 800526c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800526e:	2030      	movs	r0, #48	; 0x30
 8005270:	18e1      	adds	r1, r4, r3
 8005272:	3143      	adds	r1, #67	; 0x43
 8005274:	7008      	strb	r0, [r1, #0]
 8005276:	0021      	movs	r1, r4
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	3145      	adds	r1, #69	; 0x45
 800527c:	7809      	ldrb	r1, [r1, #0]
 800527e:	18a2      	adds	r2, r4, r2
 8005280:	3243      	adds	r2, #67	; 0x43
 8005282:	3302      	adds	r3, #2
 8005284:	7011      	strb	r1, [r2, #0]
 8005286:	e7c1      	b.n	800520c <_printf_common+0x4c>
 8005288:	0022      	movs	r2, r4
 800528a:	2301      	movs	r3, #1
 800528c:	9901      	ldr	r1, [sp, #4]
 800528e:	9800      	ldr	r0, [sp, #0]
 8005290:	9e08      	ldr	r6, [sp, #32]
 8005292:	321a      	adds	r2, #26
 8005294:	47b0      	blx	r6
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	d0e6      	beq.n	8005268 <_printf_common+0xa8>
 800529a:	3701      	adds	r7, #1
 800529c:	e7d1      	b.n	8005242 <_printf_common+0x82>
	...

080052a0 <_printf_i>:
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	b08b      	sub	sp, #44	; 0x2c
 80052a4:	9206      	str	r2, [sp, #24]
 80052a6:	000a      	movs	r2, r1
 80052a8:	3243      	adds	r2, #67	; 0x43
 80052aa:	9307      	str	r3, [sp, #28]
 80052ac:	9005      	str	r0, [sp, #20]
 80052ae:	9204      	str	r2, [sp, #16]
 80052b0:	7e0a      	ldrb	r2, [r1, #24]
 80052b2:	000c      	movs	r4, r1
 80052b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052b6:	2a78      	cmp	r2, #120	; 0x78
 80052b8:	d807      	bhi.n	80052ca <_printf_i+0x2a>
 80052ba:	2a62      	cmp	r2, #98	; 0x62
 80052bc:	d809      	bhi.n	80052d2 <_printf_i+0x32>
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d100      	bne.n	80052c4 <_printf_i+0x24>
 80052c2:	e0c1      	b.n	8005448 <_printf_i+0x1a8>
 80052c4:	2a58      	cmp	r2, #88	; 0x58
 80052c6:	d100      	bne.n	80052ca <_printf_i+0x2a>
 80052c8:	e08c      	b.n	80053e4 <_printf_i+0x144>
 80052ca:	0026      	movs	r6, r4
 80052cc:	3642      	adds	r6, #66	; 0x42
 80052ce:	7032      	strb	r2, [r6, #0]
 80052d0:	e022      	b.n	8005318 <_printf_i+0x78>
 80052d2:	0010      	movs	r0, r2
 80052d4:	3863      	subs	r0, #99	; 0x63
 80052d6:	2815      	cmp	r0, #21
 80052d8:	d8f7      	bhi.n	80052ca <_printf_i+0x2a>
 80052da:	f7fa ff1b 	bl	8000114 <__gnu_thumb1_case_shi>
 80052de:	0016      	.short	0x0016
 80052e0:	fff6001f 	.word	0xfff6001f
 80052e4:	fff6fff6 	.word	0xfff6fff6
 80052e8:	001ffff6 	.word	0x001ffff6
 80052ec:	fff6fff6 	.word	0xfff6fff6
 80052f0:	fff6fff6 	.word	0xfff6fff6
 80052f4:	003600a8 	.word	0x003600a8
 80052f8:	fff6009a 	.word	0xfff6009a
 80052fc:	00b9fff6 	.word	0x00b9fff6
 8005300:	0036fff6 	.word	0x0036fff6
 8005304:	fff6fff6 	.word	0xfff6fff6
 8005308:	009e      	.short	0x009e
 800530a:	0026      	movs	r6, r4
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	3642      	adds	r6, #66	; 0x42
 8005310:	1d11      	adds	r1, r2, #4
 8005312:	6019      	str	r1, [r3, #0]
 8005314:	6813      	ldr	r3, [r2, #0]
 8005316:	7033      	strb	r3, [r6, #0]
 8005318:	2301      	movs	r3, #1
 800531a:	e0a7      	b.n	800546c <_printf_i+0x1cc>
 800531c:	6808      	ldr	r0, [r1, #0]
 800531e:	6819      	ldr	r1, [r3, #0]
 8005320:	1d0a      	adds	r2, r1, #4
 8005322:	0605      	lsls	r5, r0, #24
 8005324:	d50b      	bpl.n	800533e <_printf_i+0x9e>
 8005326:	680d      	ldr	r5, [r1, #0]
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	2d00      	cmp	r5, #0
 800532c:	da03      	bge.n	8005336 <_printf_i+0x96>
 800532e:	232d      	movs	r3, #45	; 0x2d
 8005330:	9a04      	ldr	r2, [sp, #16]
 8005332:	426d      	negs	r5, r5
 8005334:	7013      	strb	r3, [r2, #0]
 8005336:	4b61      	ldr	r3, [pc, #388]	; (80054bc <_printf_i+0x21c>)
 8005338:	270a      	movs	r7, #10
 800533a:	9303      	str	r3, [sp, #12]
 800533c:	e01b      	b.n	8005376 <_printf_i+0xd6>
 800533e:	680d      	ldr	r5, [r1, #0]
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	0641      	lsls	r1, r0, #25
 8005344:	d5f1      	bpl.n	800532a <_printf_i+0x8a>
 8005346:	b22d      	sxth	r5, r5
 8005348:	e7ef      	b.n	800532a <_printf_i+0x8a>
 800534a:	680d      	ldr	r5, [r1, #0]
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	1d08      	adds	r0, r1, #4
 8005350:	6018      	str	r0, [r3, #0]
 8005352:	062e      	lsls	r6, r5, #24
 8005354:	d501      	bpl.n	800535a <_printf_i+0xba>
 8005356:	680d      	ldr	r5, [r1, #0]
 8005358:	e003      	b.n	8005362 <_printf_i+0xc2>
 800535a:	066d      	lsls	r5, r5, #25
 800535c:	d5fb      	bpl.n	8005356 <_printf_i+0xb6>
 800535e:	680d      	ldr	r5, [r1, #0]
 8005360:	b2ad      	uxth	r5, r5
 8005362:	4b56      	ldr	r3, [pc, #344]	; (80054bc <_printf_i+0x21c>)
 8005364:	2708      	movs	r7, #8
 8005366:	9303      	str	r3, [sp, #12]
 8005368:	2a6f      	cmp	r2, #111	; 0x6f
 800536a:	d000      	beq.n	800536e <_printf_i+0xce>
 800536c:	3702      	adds	r7, #2
 800536e:	0023      	movs	r3, r4
 8005370:	2200      	movs	r2, #0
 8005372:	3343      	adds	r3, #67	; 0x43
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	db03      	blt.n	8005386 <_printf_i+0xe6>
 800537e:	2204      	movs	r2, #4
 8005380:	6821      	ldr	r1, [r4, #0]
 8005382:	4391      	bics	r1, r2
 8005384:	6021      	str	r1, [r4, #0]
 8005386:	2d00      	cmp	r5, #0
 8005388:	d102      	bne.n	8005390 <_printf_i+0xf0>
 800538a:	9e04      	ldr	r6, [sp, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <_printf_i+0x10a>
 8005390:	9e04      	ldr	r6, [sp, #16]
 8005392:	0028      	movs	r0, r5
 8005394:	0039      	movs	r1, r7
 8005396:	f7fa ff4d 	bl	8000234 <__aeabi_uidivmod>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	3e01      	subs	r6, #1
 800539e:	5c5b      	ldrb	r3, [r3, r1]
 80053a0:	7033      	strb	r3, [r6, #0]
 80053a2:	002b      	movs	r3, r5
 80053a4:	0005      	movs	r5, r0
 80053a6:	429f      	cmp	r7, r3
 80053a8:	d9f3      	bls.n	8005392 <_printf_i+0xf2>
 80053aa:	2f08      	cmp	r7, #8
 80053ac:	d109      	bne.n	80053c2 <_printf_i+0x122>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	07db      	lsls	r3, r3, #31
 80053b2:	d506      	bpl.n	80053c2 <_printf_i+0x122>
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	6922      	ldr	r2, [r4, #16]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	dc02      	bgt.n	80053c2 <_printf_i+0x122>
 80053bc:	2330      	movs	r3, #48	; 0x30
 80053be:	3e01      	subs	r6, #1
 80053c0:	7033      	strb	r3, [r6, #0]
 80053c2:	9b04      	ldr	r3, [sp, #16]
 80053c4:	1b9b      	subs	r3, r3, r6
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	9b07      	ldr	r3, [sp, #28]
 80053ca:	0021      	movs	r1, r4
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	9805      	ldr	r0, [sp, #20]
 80053d0:	9b06      	ldr	r3, [sp, #24]
 80053d2:	aa09      	add	r2, sp, #36	; 0x24
 80053d4:	f7ff fef4 	bl	80051c0 <_printf_common>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d14c      	bne.n	8005476 <_printf_i+0x1d6>
 80053dc:	2001      	movs	r0, #1
 80053de:	4240      	negs	r0, r0
 80053e0:	b00b      	add	sp, #44	; 0x2c
 80053e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e4:	3145      	adds	r1, #69	; 0x45
 80053e6:	700a      	strb	r2, [r1, #0]
 80053e8:	4a34      	ldr	r2, [pc, #208]	; (80054bc <_printf_i+0x21c>)
 80053ea:	9203      	str	r2, [sp, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	6821      	ldr	r1, [r4, #0]
 80053f0:	ca20      	ldmia	r2!, {r5}
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	0608      	lsls	r0, r1, #24
 80053f6:	d516      	bpl.n	8005426 <_printf_i+0x186>
 80053f8:	07cb      	lsls	r3, r1, #31
 80053fa:	d502      	bpl.n	8005402 <_printf_i+0x162>
 80053fc:	2320      	movs	r3, #32
 80053fe:	4319      	orrs	r1, r3
 8005400:	6021      	str	r1, [r4, #0]
 8005402:	2710      	movs	r7, #16
 8005404:	2d00      	cmp	r5, #0
 8005406:	d1b2      	bne.n	800536e <_printf_i+0xce>
 8005408:	2320      	movs	r3, #32
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	439a      	bics	r2, r3
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	e7ad      	b.n	800536e <_printf_i+0xce>
 8005412:	2220      	movs	r2, #32
 8005414:	6809      	ldr	r1, [r1, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	6022      	str	r2, [r4, #0]
 800541a:	0022      	movs	r2, r4
 800541c:	2178      	movs	r1, #120	; 0x78
 800541e:	3245      	adds	r2, #69	; 0x45
 8005420:	7011      	strb	r1, [r2, #0]
 8005422:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <_printf_i+0x220>)
 8005424:	e7e1      	b.n	80053ea <_printf_i+0x14a>
 8005426:	0648      	lsls	r0, r1, #25
 8005428:	d5e6      	bpl.n	80053f8 <_printf_i+0x158>
 800542a:	b2ad      	uxth	r5, r5
 800542c:	e7e4      	b.n	80053f8 <_printf_i+0x158>
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	680d      	ldr	r5, [r1, #0]
 8005432:	1d10      	adds	r0, r2, #4
 8005434:	6949      	ldr	r1, [r1, #20]
 8005436:	6018      	str	r0, [r3, #0]
 8005438:	6813      	ldr	r3, [r2, #0]
 800543a:	062e      	lsls	r6, r5, #24
 800543c:	d501      	bpl.n	8005442 <_printf_i+0x1a2>
 800543e:	6019      	str	r1, [r3, #0]
 8005440:	e002      	b.n	8005448 <_printf_i+0x1a8>
 8005442:	066d      	lsls	r5, r5, #25
 8005444:	d5fb      	bpl.n	800543e <_printf_i+0x19e>
 8005446:	8019      	strh	r1, [r3, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	9e04      	ldr	r6, [sp, #16]
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	e7bb      	b.n	80053c8 <_printf_i+0x128>
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	1d11      	adds	r1, r2, #4
 8005454:	6019      	str	r1, [r3, #0]
 8005456:	6816      	ldr	r6, [r2, #0]
 8005458:	2100      	movs	r1, #0
 800545a:	0030      	movs	r0, r6
 800545c:	6862      	ldr	r2, [r4, #4]
 800545e:	f000 f831 	bl	80054c4 <memchr>
 8005462:	2800      	cmp	r0, #0
 8005464:	d001      	beq.n	800546a <_printf_i+0x1ca>
 8005466:	1b80      	subs	r0, r0, r6
 8005468:	6060      	str	r0, [r4, #4]
 800546a:	6863      	ldr	r3, [r4, #4]
 800546c:	6123      	str	r3, [r4, #16]
 800546e:	2300      	movs	r3, #0
 8005470:	9a04      	ldr	r2, [sp, #16]
 8005472:	7013      	strb	r3, [r2, #0]
 8005474:	e7a8      	b.n	80053c8 <_printf_i+0x128>
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	0032      	movs	r2, r6
 800547a:	9906      	ldr	r1, [sp, #24]
 800547c:	9805      	ldr	r0, [sp, #20]
 800547e:	9d07      	ldr	r5, [sp, #28]
 8005480:	47a8      	blx	r5
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d0aa      	beq.n	80053dc <_printf_i+0x13c>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	079b      	lsls	r3, r3, #30
 800548a:	d415      	bmi.n	80054b8 <_printf_i+0x218>
 800548c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548e:	68e0      	ldr	r0, [r4, #12]
 8005490:	4298      	cmp	r0, r3
 8005492:	daa5      	bge.n	80053e0 <_printf_i+0x140>
 8005494:	0018      	movs	r0, r3
 8005496:	e7a3      	b.n	80053e0 <_printf_i+0x140>
 8005498:	0022      	movs	r2, r4
 800549a:	2301      	movs	r3, #1
 800549c:	9906      	ldr	r1, [sp, #24]
 800549e:	9805      	ldr	r0, [sp, #20]
 80054a0:	9e07      	ldr	r6, [sp, #28]
 80054a2:	3219      	adds	r2, #25
 80054a4:	47b0      	blx	r6
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	d098      	beq.n	80053dc <_printf_i+0x13c>
 80054aa:	3501      	adds	r5, #1
 80054ac:	68e3      	ldr	r3, [r4, #12]
 80054ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	42ab      	cmp	r3, r5
 80054b4:	dcf0      	bgt.n	8005498 <_printf_i+0x1f8>
 80054b6:	e7e9      	b.n	800548c <_printf_i+0x1ec>
 80054b8:	2500      	movs	r5, #0
 80054ba:	e7f7      	b.n	80054ac <_printf_i+0x20c>
 80054bc:	08005895 	.word	0x08005895
 80054c0:	080058a6 	.word	0x080058a6

080054c4 <memchr>:
 80054c4:	b2c9      	uxtb	r1, r1
 80054c6:	1882      	adds	r2, r0, r2
 80054c8:	4290      	cmp	r0, r2
 80054ca:	d101      	bne.n	80054d0 <memchr+0xc>
 80054cc:	2000      	movs	r0, #0
 80054ce:	4770      	bx	lr
 80054d0:	7803      	ldrb	r3, [r0, #0]
 80054d2:	428b      	cmp	r3, r1
 80054d4:	d0fb      	beq.n	80054ce <memchr+0xa>
 80054d6:	3001      	adds	r0, #1
 80054d8:	e7f6      	b.n	80054c8 <memchr+0x4>

080054da <memcpy>:
 80054da:	2300      	movs	r3, #0
 80054dc:	b510      	push	{r4, lr}
 80054de:	429a      	cmp	r2, r3
 80054e0:	d100      	bne.n	80054e4 <memcpy+0xa>
 80054e2:	bd10      	pop	{r4, pc}
 80054e4:	5ccc      	ldrb	r4, [r1, r3]
 80054e6:	54c4      	strb	r4, [r0, r3]
 80054e8:	3301      	adds	r3, #1
 80054ea:	e7f8      	b.n	80054de <memcpy+0x4>

080054ec <memmove>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	4288      	cmp	r0, r1
 80054f0:	d902      	bls.n	80054f8 <memmove+0xc>
 80054f2:	188b      	adds	r3, r1, r2
 80054f4:	4298      	cmp	r0, r3
 80054f6:	d303      	bcc.n	8005500 <memmove+0x14>
 80054f8:	2300      	movs	r3, #0
 80054fa:	e007      	b.n	800550c <memmove+0x20>
 80054fc:	5c8b      	ldrb	r3, [r1, r2]
 80054fe:	5483      	strb	r3, [r0, r2]
 8005500:	3a01      	subs	r2, #1
 8005502:	d2fb      	bcs.n	80054fc <memmove+0x10>
 8005504:	bd10      	pop	{r4, pc}
 8005506:	5ccc      	ldrb	r4, [r1, r3]
 8005508:	54c4      	strb	r4, [r0, r3]
 800550a:	3301      	adds	r3, #1
 800550c:	429a      	cmp	r2, r3
 800550e:	d1fa      	bne.n	8005506 <memmove+0x1a>
 8005510:	e7f8      	b.n	8005504 <memmove+0x18>
	...

08005514 <_free_r>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	0005      	movs	r5, r0
 8005518:	2900      	cmp	r1, #0
 800551a:	d010      	beq.n	800553e <_free_r+0x2a>
 800551c:	1f0c      	subs	r4, r1, #4
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	da00      	bge.n	8005526 <_free_r+0x12>
 8005524:	18e4      	adds	r4, r4, r3
 8005526:	0028      	movs	r0, r5
 8005528:	f000 f918 	bl	800575c <__malloc_lock>
 800552c:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <_free_r+0x90>)
 800552e:	6813      	ldr	r3, [r2, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <_free_r+0x2c>
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	6014      	str	r4, [r2, #0]
 8005538:	0028      	movs	r0, r5
 800553a:	f000 f917 	bl	800576c <__malloc_unlock>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	42a3      	cmp	r3, r4
 8005542:	d908      	bls.n	8005556 <_free_r+0x42>
 8005544:	6821      	ldr	r1, [r4, #0]
 8005546:	1860      	adds	r0, r4, r1
 8005548:	4283      	cmp	r3, r0
 800554a:	d1f3      	bne.n	8005534 <_free_r+0x20>
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	1841      	adds	r1, r0, r1
 8005552:	6021      	str	r1, [r4, #0]
 8005554:	e7ee      	b.n	8005534 <_free_r+0x20>
 8005556:	001a      	movs	r2, r3
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <_free_r+0x4e>
 800555e:	42a3      	cmp	r3, r4
 8005560:	d9f9      	bls.n	8005556 <_free_r+0x42>
 8005562:	6811      	ldr	r1, [r2, #0]
 8005564:	1850      	adds	r0, r2, r1
 8005566:	42a0      	cmp	r0, r4
 8005568:	d10b      	bne.n	8005582 <_free_r+0x6e>
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	1809      	adds	r1, r1, r0
 800556e:	1850      	adds	r0, r2, r1
 8005570:	6011      	str	r1, [r2, #0]
 8005572:	4283      	cmp	r3, r0
 8005574:	d1e0      	bne.n	8005538 <_free_r+0x24>
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	1841      	adds	r1, r0, r1
 800557c:	6011      	str	r1, [r2, #0]
 800557e:	6053      	str	r3, [r2, #4]
 8005580:	e7da      	b.n	8005538 <_free_r+0x24>
 8005582:	42a0      	cmp	r0, r4
 8005584:	d902      	bls.n	800558c <_free_r+0x78>
 8005586:	230c      	movs	r3, #12
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	e7d5      	b.n	8005538 <_free_r+0x24>
 800558c:	6821      	ldr	r1, [r4, #0]
 800558e:	1860      	adds	r0, r4, r1
 8005590:	4283      	cmp	r3, r0
 8005592:	d103      	bne.n	800559c <_free_r+0x88>
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	1841      	adds	r1, r0, r1
 800559a:	6021      	str	r1, [r4, #0]
 800559c:	6063      	str	r3, [r4, #4]
 800559e:	6054      	str	r4, [r2, #4]
 80055a0:	e7ca      	b.n	8005538 <_free_r+0x24>
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	200004bc 	.word	0x200004bc

080055a8 <sbrk_aligned>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0f      	ldr	r6, [pc, #60]	; (80055e8 <sbrk_aligned+0x40>)
 80055ac:	000d      	movs	r5, r1
 80055ae:	6831      	ldr	r1, [r6, #0]
 80055b0:	0004      	movs	r4, r0
 80055b2:	2900      	cmp	r1, #0
 80055b4:	d102      	bne.n	80055bc <sbrk_aligned+0x14>
 80055b6:	f000 f8bf 	bl	8005738 <_sbrk_r>
 80055ba:	6030      	str	r0, [r6, #0]
 80055bc:	0029      	movs	r1, r5
 80055be:	0020      	movs	r0, r4
 80055c0:	f000 f8ba 	bl	8005738 <_sbrk_r>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d00a      	beq.n	80055de <sbrk_aligned+0x36>
 80055c8:	2303      	movs	r3, #3
 80055ca:	1cc5      	adds	r5, r0, #3
 80055cc:	439d      	bics	r5, r3
 80055ce:	42a8      	cmp	r0, r5
 80055d0:	d007      	beq.n	80055e2 <sbrk_aligned+0x3a>
 80055d2:	1a29      	subs	r1, r5, r0
 80055d4:	0020      	movs	r0, r4
 80055d6:	f000 f8af 	bl	8005738 <_sbrk_r>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	d101      	bne.n	80055e2 <sbrk_aligned+0x3a>
 80055de:	2501      	movs	r5, #1
 80055e0:	426d      	negs	r5, r5
 80055e2:	0028      	movs	r0, r5
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	200004c0 	.word	0x200004c0

080055ec <_malloc_r>:
 80055ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ee:	2203      	movs	r2, #3
 80055f0:	1ccb      	adds	r3, r1, #3
 80055f2:	4393      	bics	r3, r2
 80055f4:	3308      	adds	r3, #8
 80055f6:	0006      	movs	r6, r0
 80055f8:	001f      	movs	r7, r3
 80055fa:	2b0c      	cmp	r3, #12
 80055fc:	d232      	bcs.n	8005664 <_malloc_r+0x78>
 80055fe:	270c      	movs	r7, #12
 8005600:	42b9      	cmp	r1, r7
 8005602:	d831      	bhi.n	8005668 <_malloc_r+0x7c>
 8005604:	0030      	movs	r0, r6
 8005606:	f000 f8a9 	bl	800575c <__malloc_lock>
 800560a:	4d32      	ldr	r5, [pc, #200]	; (80056d4 <_malloc_r+0xe8>)
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	001c      	movs	r4, r3
 8005610:	2c00      	cmp	r4, #0
 8005612:	d12e      	bne.n	8005672 <_malloc_r+0x86>
 8005614:	0039      	movs	r1, r7
 8005616:	0030      	movs	r0, r6
 8005618:	f7ff ffc6 	bl	80055a8 <sbrk_aligned>
 800561c:	0004      	movs	r4, r0
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d11e      	bne.n	8005660 <_malloc_r+0x74>
 8005622:	682c      	ldr	r4, [r5, #0]
 8005624:	0025      	movs	r5, r4
 8005626:	2d00      	cmp	r5, #0
 8005628:	d14a      	bne.n	80056c0 <_malloc_r+0xd4>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	0029      	movs	r1, r5
 800562e:	18e3      	adds	r3, r4, r3
 8005630:	0030      	movs	r0, r6
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	f000 f880 	bl	8005738 <_sbrk_r>
 8005638:	9b01      	ldr	r3, [sp, #4]
 800563a:	4283      	cmp	r3, r0
 800563c:	d143      	bne.n	80056c6 <_malloc_r+0xda>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	3703      	adds	r7, #3
 8005642:	1aff      	subs	r7, r7, r3
 8005644:	2303      	movs	r3, #3
 8005646:	439f      	bics	r7, r3
 8005648:	3708      	adds	r7, #8
 800564a:	2f0c      	cmp	r7, #12
 800564c:	d200      	bcs.n	8005650 <_malloc_r+0x64>
 800564e:	270c      	movs	r7, #12
 8005650:	0039      	movs	r1, r7
 8005652:	0030      	movs	r0, r6
 8005654:	f7ff ffa8 	bl	80055a8 <sbrk_aligned>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d034      	beq.n	80056c6 <_malloc_r+0xda>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	19df      	adds	r7, r3, r7
 8005660:	6027      	str	r7, [r4, #0]
 8005662:	e013      	b.n	800568c <_malloc_r+0xa0>
 8005664:	2b00      	cmp	r3, #0
 8005666:	dacb      	bge.n	8005600 <_malloc_r+0x14>
 8005668:	230c      	movs	r3, #12
 800566a:	2500      	movs	r5, #0
 800566c:	6033      	str	r3, [r6, #0]
 800566e:	0028      	movs	r0, r5
 8005670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	1bd1      	subs	r1, r2, r7
 8005676:	d420      	bmi.n	80056ba <_malloc_r+0xce>
 8005678:	290b      	cmp	r1, #11
 800567a:	d917      	bls.n	80056ac <_malloc_r+0xc0>
 800567c:	19e2      	adds	r2, r4, r7
 800567e:	6027      	str	r7, [r4, #0]
 8005680:	42a3      	cmp	r3, r4
 8005682:	d111      	bne.n	80056a8 <_malloc_r+0xbc>
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	6011      	str	r1, [r2, #0]
 800568a:	6053      	str	r3, [r2, #4]
 800568c:	0030      	movs	r0, r6
 800568e:	0025      	movs	r5, r4
 8005690:	f000 f86c 	bl	800576c <__malloc_unlock>
 8005694:	2207      	movs	r2, #7
 8005696:	350b      	adds	r5, #11
 8005698:	1d23      	adds	r3, r4, #4
 800569a:	4395      	bics	r5, r2
 800569c:	1aea      	subs	r2, r5, r3
 800569e:	429d      	cmp	r5, r3
 80056a0:	d0e5      	beq.n	800566e <_malloc_r+0x82>
 80056a2:	1b5b      	subs	r3, r3, r5
 80056a4:	50a3      	str	r3, [r4, r2]
 80056a6:	e7e2      	b.n	800566e <_malloc_r+0x82>
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	e7ec      	b.n	8005686 <_malloc_r+0x9a>
 80056ac:	6862      	ldr	r2, [r4, #4]
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d101      	bne.n	80056b6 <_malloc_r+0xca>
 80056b2:	602a      	str	r2, [r5, #0]
 80056b4:	e7ea      	b.n	800568c <_malloc_r+0xa0>
 80056b6:	605a      	str	r2, [r3, #4]
 80056b8:	e7e8      	b.n	800568c <_malloc_r+0xa0>
 80056ba:	0023      	movs	r3, r4
 80056bc:	6864      	ldr	r4, [r4, #4]
 80056be:	e7a7      	b.n	8005610 <_malloc_r+0x24>
 80056c0:	002c      	movs	r4, r5
 80056c2:	686d      	ldr	r5, [r5, #4]
 80056c4:	e7af      	b.n	8005626 <_malloc_r+0x3a>
 80056c6:	230c      	movs	r3, #12
 80056c8:	0030      	movs	r0, r6
 80056ca:	6033      	str	r3, [r6, #0]
 80056cc:	f000 f84e 	bl	800576c <__malloc_unlock>
 80056d0:	e7cd      	b.n	800566e <_malloc_r+0x82>
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	200004bc 	.word	0x200004bc

080056d8 <_realloc_r>:
 80056d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056da:	0007      	movs	r7, r0
 80056dc:	000e      	movs	r6, r1
 80056de:	0014      	movs	r4, r2
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d105      	bne.n	80056f0 <_realloc_r+0x18>
 80056e4:	0011      	movs	r1, r2
 80056e6:	f7ff ff81 	bl	80055ec <_malloc_r>
 80056ea:	0005      	movs	r5, r0
 80056ec:	0028      	movs	r0, r5
 80056ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	d103      	bne.n	80056fc <_realloc_r+0x24>
 80056f4:	f7ff ff0e 	bl	8005514 <_free_r>
 80056f8:	0025      	movs	r5, r4
 80056fa:	e7f7      	b.n	80056ec <_realloc_r+0x14>
 80056fc:	f000 f83e 	bl	800577c <_malloc_usable_size_r>
 8005700:	9001      	str	r0, [sp, #4]
 8005702:	4284      	cmp	r4, r0
 8005704:	d803      	bhi.n	800570e <_realloc_r+0x36>
 8005706:	0035      	movs	r5, r6
 8005708:	0843      	lsrs	r3, r0, #1
 800570a:	42a3      	cmp	r3, r4
 800570c:	d3ee      	bcc.n	80056ec <_realloc_r+0x14>
 800570e:	0021      	movs	r1, r4
 8005710:	0038      	movs	r0, r7
 8005712:	f7ff ff6b 	bl	80055ec <_malloc_r>
 8005716:	1e05      	subs	r5, r0, #0
 8005718:	d0e8      	beq.n	80056ec <_realloc_r+0x14>
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	0022      	movs	r2, r4
 800571e:	429c      	cmp	r4, r3
 8005720:	d900      	bls.n	8005724 <_realloc_r+0x4c>
 8005722:	001a      	movs	r2, r3
 8005724:	0031      	movs	r1, r6
 8005726:	0028      	movs	r0, r5
 8005728:	f7ff fed7 	bl	80054da <memcpy>
 800572c:	0031      	movs	r1, r6
 800572e:	0038      	movs	r0, r7
 8005730:	f7ff fef0 	bl	8005514 <_free_r>
 8005734:	e7da      	b.n	80056ec <_realloc_r+0x14>
	...

08005738 <_sbrk_r>:
 8005738:	2300      	movs	r3, #0
 800573a:	b570      	push	{r4, r5, r6, lr}
 800573c:	4d06      	ldr	r5, [pc, #24]	; (8005758 <_sbrk_r+0x20>)
 800573e:	0004      	movs	r4, r0
 8005740:	0008      	movs	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fb fc88 	bl	8001058 <_sbrk>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d103      	bne.n	8005754 <_sbrk_r+0x1c>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d000      	beq.n	8005754 <_sbrk_r+0x1c>
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	200004c4 	.word	0x200004c4

0800575c <__malloc_lock>:
 800575c:	b510      	push	{r4, lr}
 800575e:	4802      	ldr	r0, [pc, #8]	; (8005768 <__malloc_lock+0xc>)
 8005760:	f000 f814 	bl	800578c <__retarget_lock_acquire_recursive>
 8005764:	bd10      	pop	{r4, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	200004c8 	.word	0x200004c8

0800576c <__malloc_unlock>:
 800576c:	b510      	push	{r4, lr}
 800576e:	4802      	ldr	r0, [pc, #8]	; (8005778 <__malloc_unlock+0xc>)
 8005770:	f000 f80d 	bl	800578e <__retarget_lock_release_recursive>
 8005774:	bd10      	pop	{r4, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	200004c8 	.word	0x200004c8

0800577c <_malloc_usable_size_r>:
 800577c:	1f0b      	subs	r3, r1, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1f18      	subs	r0, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	da01      	bge.n	800578a <_malloc_usable_size_r+0xe>
 8005786:	580b      	ldr	r3, [r1, r0]
 8005788:	18c0      	adds	r0, r0, r3
 800578a:	4770      	bx	lr

0800578c <__retarget_lock_acquire_recursive>:
 800578c:	4770      	bx	lr

0800578e <__retarget_lock_release_recursive>:
 800578e:	4770      	bx	lr

08005790 <_init>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr

0800579c <_fini>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr
