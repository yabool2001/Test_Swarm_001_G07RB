
Test_Swarm_001_G07RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e70  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005f2c  08005f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006168  08006168  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006170  08006170  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08006178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200000c4  0800623c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800623c  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015054  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d5  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00037b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00038cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f5b  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ab4  00000000  00000000  00053ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7ea4  00000000  00000000  0006877f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  00110674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000c4 	.word	0x200000c4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f14 	.word	0x08005f14

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000c8 	.word	0x200000c8
 8000100:	08005f14 	.word	0x08005f14

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fed0 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f96a 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fb2c 	bl	8000ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 fb0c 	bl	8000c6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000654:	f000 fabc 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f9b8 	bl	80009cc <MX_RTC_Init>
  MX_USART1_UART_Init();
 800065c:	f000 fa6a 	bl	8000b34 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000660:	f000 fa2a 	bl	8000ab8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //HAL_RTCEx_DeactivateWakeUpTimer ( &hrtc ) ;
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000664:	4b7f      	ldr	r3, [pc, #508]	; (8000864 <main+0x224>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2202      	movs	r2, #2
 800066a:	4252      	negs	r2, r2
 800066c:	611a      	str	r2, [r3, #16]

  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 800066e:	4b7e      	ldr	r3, [pc, #504]	; (8000868 <main+0x228>)
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff fd47 	bl	8000104 <strlen>
 8000676:	0003      	movs	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	497b      	ldr	r1, [pc, #492]	; (8000868 <main+0x228>)
 800067c:	487b      	ldr	r0, [pc, #492]	; (800086c <main+0x22c>)
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	f003 fb0a 	bl	8003c98 <HAL_UART_Transmit>
 8000684:	0003      	movs	r3, r0
 8000686:	001a      	movs	r2, r3
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <main+0x230>)
 800068a:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 800068c:	23fa      	movs	r3, #250	; 0xfa
 800068e:	005a      	lsls	r2, r3, #1
 8000690:	4978      	ldr	r1, [pc, #480]	; (8000874 <main+0x234>)
 8000692:	4b79      	ldr	r3, [pc, #484]	; (8000878 <main+0x238>)
 8000694:	0018      	movs	r0, r3
 8000696:	f004 fec9 	bl	800542c <HAL_UARTEx_ReceiveToIdle_DMA>
  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 800069a:	4978      	ldr	r1, [pc, #480]	; (800087c <main+0x23c>)
 800069c:	4b78      	ldr	r3, [pc, #480]	; (8000880 <main+0x240>)
 800069e:	2201      	movs	r2, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fba9 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 1 )
 80006a6:	4b77      	ldr	r3, [pc, #476]	; (8000884 <main+0x244>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d105      	bne.n	80006ba <main+0x7a>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 80006ae:	4976      	ldr	r1, [pc, #472]	; (8000888 <main+0x248>)
 80006b0:	4b76      	ldr	r3, [pc, #472]	; (800088c <main+0x24c>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fb9f 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 2 )
 80006ba:	4b72      	ldr	r3, [pc, #456]	; (8000884 <main+0x244>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d105      	bne.n	80006ce <main+0x8e>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006c2:	4973      	ldr	r1, [pc, #460]	; (8000890 <main+0x250>)
 80006c4:	4b73      	ldr	r3, [pc, #460]	; (8000894 <main+0x254>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fb95 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 3 )
 80006ce:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <main+0x244>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d105      	bne.n	80006e2 <main+0xa2>
  	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006d6:	4970      	ldr	r1, [pc, #448]	; (8000898 <main+0x258>)
 80006d8:	4b70      	ldr	r3, [pc, #448]	; (800089c <main+0x25c>)
 80006da:	2204      	movs	r2, #4
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fb8b 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 4 )
 80006e2:	4b68      	ldr	r3, [pc, #416]	; (8000884 <main+0x244>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d105      	bne.n	80006f6 <main+0xb6>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006ea:	496d      	ldr	r1, [pc, #436]	; (80008a0 <main+0x260>)
 80006ec:	4b6d      	ldr	r3, [pc, #436]	; (80008a4 <main+0x264>)
 80006ee:	2205      	movs	r2, #5
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fb81 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 5 )
 80006f6:	4b63      	ldr	r3, [pc, #396]	; (8000884 <main+0x244>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	d105      	bne.n	800070a <main+0xca>
	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 6 ) ;
 80006fe:	496a      	ldr	r1, [pc, #424]	; (80008a8 <main+0x268>)
 8000700:	4b6a      	ldr	r3, [pc, #424]	; (80008ac <main+0x26c>)
 8000702:	2206      	movs	r2, #6
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fb77 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 6 )
 800070a:	4b5e      	ldr	r3, [pc, #376]	; (8000884 <main+0x244>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	2b06      	cmp	r3, #6
 8000710:	d105      	bne.n	800071e <main+0xde>
  	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 7 ) ;
 8000712:	4967      	ldr	r1, [pc, #412]	; (80008b0 <main+0x270>)
 8000714:	4b67      	ldr	r3, [pc, #412]	; (80008b4 <main+0x274>)
 8000716:	2207      	movs	r2, #7
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fb6d 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 7 )
 800071e:	4b59      	ldr	r3, [pc, #356]	; (8000884 <main+0x244>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	2b07      	cmp	r3, #7
 8000724:	d105      	bne.n	8000732 <main+0xf2>
  	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 8 ) ;
 8000726:	4964      	ldr	r1, [pc, #400]	; (80008b8 <main+0x278>)
 8000728:	4b64      	ldr	r3, [pc, #400]	; (80008bc <main+0x27c>)
 800072a:	2208      	movs	r2, #8
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fb63 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 8 )
 8000732:	4b54      	ldr	r3, [pc, #336]	; (8000884 <main+0x244>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d105      	bne.n	8000746 <main+0x106>
  	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 9 ) ;
 800073a:	4961      	ldr	r1, [pc, #388]	; (80008c0 <main+0x280>)
 800073c:	4b61      	ldr	r3, [pc, #388]	; (80008c4 <main+0x284>)
 800073e:	2209      	movs	r2, #9
 8000740:	0018      	movs	r0, r3
 8000742:	f000 fb59 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 9 )
 8000746:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <main+0x244>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	2b09      	cmp	r3, #9
 800074c:	d105      	bne.n	800075a <main+0x11a>
   	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 10 ) ;
 800074e:	495e      	ldr	r1, [pc, #376]	; (80008c8 <main+0x288>)
 8000750:	4b5e      	ldr	r3, [pc, #376]	; (80008cc <main+0x28c>)
 8000752:	220a      	movs	r2, #10
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fb4f 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 10 )
 800075a:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <main+0x244>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2b0a      	cmp	r3, #10
 8000760:	d105      	bne.n	800076e <main+0x12e>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 11 ) ;
 8000762:	495b      	ldr	r1, [pc, #364]	; (80008d0 <main+0x290>)
 8000764:	4b5b      	ldr	r3, [pc, #364]	; (80008d4 <main+0x294>)
 8000766:	220b      	movs	r2, #11
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fb45 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 11 )
 800076e:	4b45      	ldr	r3, [pc, #276]	; (8000884 <main+0x244>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	2b0b      	cmp	r3, #11
 8000774:	d105      	bne.n	8000782 <main+0x142>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 12 ) ;
 8000776:	4958      	ldr	r1, [pc, #352]	; (80008d8 <main+0x298>)
 8000778:	4b58      	ldr	r3, [pc, #352]	; (80008dc <main+0x29c>)
 800077a:	220c      	movs	r2, #12
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fb3b 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 12 )
 8000782:	4b40      	ldr	r3, [pc, #256]	; (8000884 <main+0x244>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	2b0c      	cmp	r3, #12
 8000788:	d105      	bne.n	8000796 <main+0x156>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 13 ) ;
 800078a:	4955      	ldr	r1, [pc, #340]	; (80008e0 <main+0x2a0>)
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <main+0x2a4>)
 800078e:	220d      	movs	r2, #13
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fb31 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 13 )
 8000796:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <main+0x244>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	2b0d      	cmp	r3, #13
 800079c:	d105      	bne.n	80007aa <main+0x16a>
  	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 14 ) ;
 800079e:	4952      	ldr	r1, [pc, #328]	; (80008e8 <main+0x2a8>)
 80007a0:	4b52      	ldr	r3, [pc, #328]	; (80008ec <main+0x2ac>)
 80007a2:	220e      	movs	r2, #14
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fb27 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 14 )
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <main+0x244>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b0e      	cmp	r3, #14
 80007b0:	d105      	bne.n	80007be <main+0x17e>
  	  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007b2:	494f      	ldr	r1, [pc, #316]	; (80008f0 <main+0x2b0>)
 80007b4:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <main+0x2b4>)
 80007b6:	220f      	movs	r2, #15
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fb1d 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 15 )
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <main+0x244>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	d105      	bne.n	80007d2 <main+0x192>
  	  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007c6:	494c      	ldr	r1, [pc, #304]	; (80008f8 <main+0x2b8>)
 80007c8:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <main+0x2bc>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fb13 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 16 )
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <main+0x244>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2b10      	cmp	r3, #16
 80007d8:	d105      	bne.n	80007e6 <main+0x1a6>
	  send2swarm_at_command ( td_mzo_at_comm , td_ok_answer , 17 ) ;
 80007da:	4949      	ldr	r1, [pc, #292]	; (8000900 <main+0x2c0>)
 80007dc:	4b49      	ldr	r3, [pc, #292]	; (8000904 <main+0x2c4>)
 80007de:	2211      	movs	r2, #17
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fb09 	bl	8000df8 <send2swarm_at_command>
  if ( checklist == 17 )
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <main+0x244>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b11      	cmp	r3, #17
 80007ec:	d10e      	bne.n	800080c <main+0x1cc>
	  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) good , strlen ( good ) , UART_TX_TIMEOUT ) ;
 80007ee:	4b46      	ldr	r3, [pc, #280]	; (8000908 <main+0x2c8>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff fc87 	bl	8000104 <strlen>
 80007f6:	0003      	movs	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4943      	ldr	r1, [pc, #268]	; (8000908 <main+0x2c8>)
 80007fc:	481b      	ldr	r0, [pc, #108]	; (800086c <main+0x22c>)
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	f003 fa4a 	bl	8003c98 <HAL_UART_Transmit>
 8000804:	0003      	movs	r3, r0
 8000806:	001a      	movs	r2, r3
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <main+0x230>)
 800080a:	701a      	strb	r2, [r3, #0]
  HAL_Delay ( 310000) ; // 5min. i 10 sekund obejmujące 5 minut na wysłanie wiadomości
 800080c:	4b3f      	ldr	r3, [pc, #252]	; (800090c <main+0x2cc>)
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fe70 	bl	80014f4 <HAL_Delay>
  send2swarm_at_command ( sl_3ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
 8000814:	493e      	ldr	r1, [pc, #248]	; (8000910 <main+0x2d0>)
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <main+0x2d4>)
 8000818:	2212      	movs	r2, #18
 800081a:	0018      	movs	r0, r3
 800081c:	f000 faec 	bl	8000df8 <send2swarm_at_command>
  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) stm32_shutdown , strlen ( stm32_shutdown ) , UART_TX_TIMEOUT ) ;
 8000820:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <main+0x2d8>)
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fc6e 	bl	8000104 <strlen>
 8000828:	0003      	movs	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	493a      	ldr	r1, [pc, #232]	; (8000918 <main+0x2d8>)
 800082e:	480f      	ldr	r0, [pc, #60]	; (800086c <main+0x22c>)
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	f003 fa31 	bl	8003c98 <HAL_UART_Transmit>
 8000836:	0003      	movs	r3, r0
 8000838:	001a      	movs	r2, r3
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <main+0x230>)
 800083c:	701a      	strb	r2, [r3, #0]
  HAL_PWREx_EnterSHUTDOWNMode () ; // Enter the SHUTDOWN mode
 800083e:	f001 fc87 	bl	8002150 <HAL_PWREx_EnterSHUTDOWNMode>
  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) stm32_wakeup , strlen ( stm32_wakeup ) , UART_TX_TIMEOUT ) ;
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <main+0x2dc>)
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fc5d 	bl	8000104 <strlen>
 800084a:	0003      	movs	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	4933      	ldr	r1, [pc, #204]	; (800091c <main+0x2dc>)
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <main+0x22c>)
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	f003 fa20 	bl	8003c98 <HAL_UART_Transmit>
 8000858:	0003      	movs	r3, r0
 800085a:	001a      	movs	r2, r3
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <main+0x230>)
 800085e:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while ( 1 )
  {
	  __NOP () ;
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <main+0x220>
 8000864:	2000010c 	.word	0x2000010c
 8000868:	20000000 	.word	0x20000000
 800086c:	200001ec 	.word	0x200001ec
 8000870:	200002df 	.word	0x200002df
 8000874:	200002e0 	.word	0x200002e0
 8000878:	20000158 	.word	0x20000158
 800087c:	08005fe4 	.word	0x08005fe4
 8000880:	08005f48 	.word	0x08005f48
 8000884:	200002dc 	.word	0x200002dc
 8000888:	08005ff0 	.word	0x08005ff0
 800088c:	08005f4c 	.word	0x08005f4c
 8000890:	08005ffc 	.word	0x08005ffc
 8000894:	08005f54 	.word	0x08005f54
 8000898:	08006008 	.word	0x08006008
 800089c:	08005f5c 	.word	0x08005f5c
 80008a0:	08006014 	.word	0x08006014
 80008a4:	08005f64 	.word	0x08005f64
 80008a8:	08006020 	.word	0x08006020
 80008ac:	08005f6c 	.word	0x08005f6c
 80008b0:	08006028 	.word	0x08006028
 80008b4:	08005f74 	.word	0x08005f74
 80008b8:	08006034 	.word	0x08006034
 80008bc:	08005f7c 	.word	0x08005f7c
 80008c0:	08006040 	.word	0x08006040
 80008c4:	08005f84 	.word	0x08005f84
 80008c8:	0800604c 	.word	0x0800604c
 80008cc:	08005f8c 	.word	0x08005f8c
 80008d0:	08006058 	.word	0x08006058
 80008d4:	08005f94 	.word	0x08005f94
 80008d8:	08006064 	.word	0x08006064
 80008dc:	08005f9c 	.word	0x08005f9c
 80008e0:	08006070 	.word	0x08006070
 80008e4:	08005fa4 	.word	0x08005fa4
 80008e8:	0800607c 	.word	0x0800607c
 80008ec:	08005fac 	.word	0x08005fac
 80008f0:	08006088 	.word	0x08006088
 80008f4:	08005fb4 	.word	0x08005fb4
 80008f8:	08006090 	.word	0x08006090
 80008fc:	08005fbc 	.word	0x08005fbc
 8000900:	08006098 	.word	0x08006098
 8000904:	08005fc4 	.word	0x08005fc4
 8000908:	20000020 	.word	0x20000020
 800090c:	0004baf0 	.word	0x0004baf0
 8000910:	080060a0 	.word	0x080060a0
 8000914:	08005fd8 	.word	0x08005fd8
 8000918:	20000034 	.word	0x20000034
 800091c:	20000044 	.word	0x20000044

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b093      	sub	sp, #76	; 0x4c
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	2410      	movs	r4, #16
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	2338      	movs	r3, #56	; 0x38
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f004 fe6b 	bl	800560c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000936:	003b      	movs	r3, r7
 8000938:	0018      	movs	r0, r3
 800093a:	2310      	movs	r3, #16
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f004 fe64 	bl	800560c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fbc1 	bl	80020d0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800094e:	f001 fbb1 	bl	80020b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <SystemClock_Config+0xa8>)
 8000954:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <SystemClock_Config+0xa8>)
 8000958:	2118      	movs	r1, #24
 800095a:	438a      	bics	r2, r1
 800095c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2206      	movs	r2, #6
 8000962:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2201      	movs	r2, #1
 8000968:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	193b      	adds	r3, r7, r4
 8000986:	0018      	movs	r0, r3
 8000988:	f001 fc08 	bl	800219c <HAL_RCC_OscConfig>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000990:	f000 fafc 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	003b      	movs	r3, r7
 8000996:	2207      	movs	r2, #7
 8000998:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099a:	003b      	movs	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	003b      	movs	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ac:	003b      	movs	r3, r7
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 ff0d 	bl	80027d0 <HAL_RCC_ClockConfig>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ba:	f000 fae7 	bl	8000f8c <Error_Handler>
  }
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b013      	add	sp, #76	; 0x4c
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40021000 	.word	0x40021000

080009cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	0018      	movs	r0, r3
 80009d6:	2314      	movs	r3, #20
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f004 fe16 	bl	800560c <memset>
  RTC_DateTypeDef sDate = {0};
 80009e0:	003b      	movs	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009e6:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <MX_RTC_Init+0xe4>)
 80009e8:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <MX_RTC_Init+0xe8>)
 80009ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_RTC_Init+0xe4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <MX_RTC_Init+0xe4>)
 80009f4:	227f      	movs	r2, #127	; 0x7f
 80009f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_RTC_Init+0xe4>)
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a04:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	05d2      	lsls	r2, r2, #23
 8000a16:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fa37 	bl	8002e94 <HAL_RTC_Init>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a2a:	f000 faaf 	bl	8000f8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a52:	1d39      	adds	r1, r7, #4
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fabd 	bl	8002fd8 <HAL_RTC_SetTime>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a62:	f000 fa93 	bl	8000f8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a66:	003b      	movs	r3, r7
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	2201      	movs	r2, #1
 8000a70:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2201      	movs	r2, #1
 8000a76:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a7e:	0039      	movs	r1, r7
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 fb4f 	bl	8003128 <HAL_RTC_SetDate>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000a8e:	f000 fa7d 	bl	8000f8c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000a92:	23e1      	movs	r3, #225	; 0xe1
 8000a94:	0119      	lsls	r1, r3, #4
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_RTC_Init+0xe4>)
 8000a98:	2204      	movs	r2, #4
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fcac 	bl	80033f8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000aa4:	f000 fa72 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b006      	add	sp, #24
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000e0 	.word	0x200000e0
 8000ab4:	40002800 	.word	0x40002800

08000ab8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f004 fda0 	bl	800560c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <MX_TIM6_Init+0x70>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000ad4:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <MX_TIM6_Init+0x74>)
 8000ad6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_TIM6_Init+0x78>)
 8000ae2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 fd43 	bl	8003578 <HAL_TIM_Base_Init>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000af6:	f000 fa49 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b06:	1d3a      	adds	r2, r7, #4
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 ffe7 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b16:	f000 fa39 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b004      	add	sp, #16
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	2000010c 	.word	0x2000010c
 8000b28:	40001000 	.word	0x40001000
 8000b2c:	00003e7f 	.word	0x00003e7f
 8000b30:	000007cf 	.word	0x000007cf

08000b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b3a:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <MX_USART1_UART_Init+0x98>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b40:	22e1      	movs	r2, #225	; 0xe1
 8000b42:	0252      	lsls	r2, r2, #9
 8000b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f003 f834 	bl	8003bec <HAL_UART_Init>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 fa00 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	0018      	movs	r0, r3
 8000b92:	f004 fbc9 	bl	8005328 <HAL_UARTEx_SetTxFifoThreshold>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 f9f7 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f004 fc00 	bl	80053a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 f9ee 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f004 fb7e 	bl	80052b4 <HAL_UARTEx_DisableFifoMode>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 f9e6 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	20000158 	.word	0x20000158
 8000bcc:	40013800 	.word	0x40013800

08000bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <MX_USART2_UART_Init+0x98>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bdc:	22e1      	movs	r2, #225	; 0xe1
 8000bde:	0252      	lsls	r2, r2, #9
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 ffe6 	bl	8003bec <HAL_UART_Init>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c24:	f000 f9b2 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f004 fb7b 	bl	8005328 <HAL_UARTEx_SetTxFifoThreshold>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c36:	f000 f9a9 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f004 fbb2 	bl	80053a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c48:	f000 f9a0 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f004 fb30 	bl	80052b4 <HAL_UARTEx_DisableFifoMode>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c58:	f000 f998 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	200001ec 	.word	0x200001ec
 8000c68:	40004400 	.word	0x40004400

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_DMA_Init+0x38>)
 8000c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_DMA_Init+0x38>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_DMA_Init+0x38>)
 8000c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c82:	2201      	movs	r2, #1
 8000c84:	4013      	ands	r3, r2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2009      	movs	r0, #9
 8000c90:	f000 fd00 	bl	8001694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c94:	2009      	movs	r0, #9
 8000c96:	f000 fd12 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	240c      	movs	r4, #12
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2314      	movs	r3, #20
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	f004 fca7 	bl	800560c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	2204      	movs	r2, #4
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cdc:	2120      	movs	r1, #32
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	4013      	ands	r3, r2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000d06:	23a0      	movs	r3, #160	; 0xa0
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 f974 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	0192      	lsls	r2, r2, #6
 8000d1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2288      	movs	r2, #136	; 0x88
 8000d20:	0352      	lsls	r2, r2, #13
 8000d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d2e:	0019      	movs	r1, r3
 8000d30:	0010      	movs	r0, r2
 8000d32:	f000 ffff 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2201      	movs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d50:	187a      	adds	r2, r7, r1
 8000d52:	23a0      	movs	r3, #160	; 0xa0
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	0011      	movs	r1, r2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 ffeb 	bl	8001d34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2007      	movs	r0, #7
 8000d64:	f000 fc96 	bl	8001694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d68:	2007      	movs	r0, #7
 8000d6a:	f000 fca8 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b009      	add	sp, #36	; 0x24
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	50000800 	.word	0x50000800

08000d80 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	000a      	movs	r2, r1
 8000d8a:	1cbb      	adds	r3, r7, #2
 8000d8c:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_UARTEx_RxEventCallback+0x60>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d118      	bne.n	8000dca <HAL_UARTEx_RxEventCallback+0x4a>
    {
    	if ( rx_buff[0] != 0 )
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d014      	beq.n	8000dca <HAL_UARTEx_RxEventCallback+0x4a>
    	{
    		// Jeśli dostałem potwierdzenie $RT = 0, to ustawiam odpowiednią zmienną
    		if ( strncmp ( (char*) rx_buff , rt_0_answer , strlen ( rt_0_answer ) ) == 0 )
 8000da0:	4911      	ldr	r1, [pc, #68]	; (8000de8 <HAL_UARTEx_RxEventCallback+0x68>)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000da4:	2208      	movs	r2, #8
 8000da6:	0018      	movs	r0, r3
 8000da8:	f004 fc58 	bl	800565c <strncmp>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d103      	bne.n	8000db8 <HAL_UARTEx_RxEventCallback+0x38>
    		{
    			rt_unsolicited = 0 ;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_UARTEx_RxEventCallback+0x6c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
    			__NOP () ;
 8000db6:	46c0      	nop			; (mov r8, r8)
    		}
    		if ( strncmp ( (char*) rx_buff , rt_ok_answer , strlen ( rt_ok_answer ) ) == 0 )
 8000db8:	490d      	ldr	r1, [pc, #52]	; (8000df0 <HAL_UARTEx_RxEventCallback+0x70>)
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000dbc:	2209      	movs	r2, #9
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f004 fc4c 	bl	800565c <strncmp>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d100      	bne.n	8000dca <HAL_UARTEx_RxEventCallback+0x4a>
    		{
    			__NOP () ;
 8000dc8:	46c0      	nop			; (mov r8, r8)
    		}
    		//rx_buff[0] = 0 ;
    	}
    }
    HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000dca:	23fa      	movs	r3, #250	; 0xfa
 8000dcc:	005a      	lsls	r2, r3, #1
 8000dce:	4905      	ldr	r1, [pc, #20]	; (8000de4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_UARTEx_RxEventCallback+0x74>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f004 fb2a 	bl	800542c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013800 	.word	0x40013800
 8000de4:	200002e0 	.word	0x200002e0
 8000de8:	08005ffc 	.word	0x08005ffc
 8000dec:	20000052 	.word	0x20000052
 8000df0:	08005ff0 	.word	0x08005ff0
 8000df4:	20000158 	.word	0x20000158

08000df8 <send2swarm_at_command>:
			break ;
		}
	}
}
void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b0c4      	sub	sp, #272	; 0x110
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <send2swarm_at_command+0xa4>)
 8000e04:	2188      	movs	r1, #136	; 0x88
 8000e06:	0049      	lsls	r1, r1, #1
 8000e08:	185b      	adds	r3, r3, r1
 8000e0a:	19db      	adds	r3, r3, r7
 8000e0c:	801a      	strh	r2, [r3, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff f977 	bl	8000104 <strlen>
 8000e16:	0002      	movs	r2, r0
 8000e18:	2510      	movs	r5, #16
 8000e1a:	35ff      	adds	r5, #255	; 0xff
 8000e1c:	197c      	adds	r4, r7, r5
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f864 	bl	8000ef0 <nmea_checksum>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	7023      	strb	r3, [r4, #0]
	char uart_tx_buff[250] ;

	sprintf ( (char*) uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000e2c:	197b      	adds	r3, r7, r5
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	491b      	ldr	r1, [pc, #108]	; (8000ea0 <send2swarm_at_command+0xa8>)
 8000e34:	2414      	movs	r4, #20
 8000e36:	1938      	adds	r0, r7, r4
 8000e38:	f004 fbf0 	bl	800561c <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) uart_tx_buff ,  strlen ( (char*) uart_tx_buff ) , UART_TX_TIMEOUT ) ;
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff f960 	bl	8000104 <strlen>
 8000e44:	0003      	movs	r3, r0
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	1939      	adds	r1, r7, r4
 8000e4a:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <send2swarm_at_command+0xac>)
 8000e4c:	2364      	movs	r3, #100	; 0x64
 8000e4e:	f002 ff23 	bl	8003c98 <HAL_UART_Transmit>
 8000e52:	0003      	movs	r3, r0
 8000e54:	001a      	movs	r2, r3
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <send2swarm_at_command+0xb0>)
 8000e58:	701a      	strb	r2, [r3, #0]
	waiting_for_answer = 1 ;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <send2swarm_at_command+0xb4>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <send2swarm_at_command+0xb8>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 fbe0 	bl	8003628 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000e68:	e00e      	b.n	8000e88 <send2swarm_at_command+0x90>
	{
		if ( check_answer ( answer ) )
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f000 f823 	bl	8000eb8 <check_answer>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d008      	beq.n	8000e88 <send2swarm_at_command+0x90>
		{
			checklist = step ;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <send2swarm_at_command+0xbc>)
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <send2swarm_at_command+0xa4>)
 8000e7a:	2188      	movs	r1, #136	; 0x88
 8000e7c:	0049      	lsls	r1, r1, #1
 8000e7e:	1852      	adds	r2, r2, r1
 8000e80:	19d2      	adds	r2, r2, r7
 8000e82:	8812      	ldrh	r2, [r2, #0]
 8000e84:	801a      	strh	r2, [r3, #0]
			break ;
 8000e86:	e004      	b.n	8000e92 <send2swarm_at_command+0x9a>
	while ( waiting_for_answer )
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <send2swarm_at_command+0xb4>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1ec      	bne.n	8000e6a <send2swarm_at_command+0x72>
		}
	}
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b044      	add	sp, #272	; 0x110
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	fffffef6 	.word	0xfffffef6
 8000ea0:	08005f2c 	.word	0x08005f2c
 8000ea4:	20000158 	.word	0x20000158
 8000ea8:	200002df 	.word	0x200002df
 8000eac:	200002de 	.word	0x200002de
 8000eb0:	2000010c 	.word	0x2000010c
 8000eb4:	200002dc 	.word	0x200002dc

08000eb8 <check_answer>:
uint8_t check_answer ( const char* answer )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff f91e 	bl	8000104 <strlen>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <check_answer+0x34>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f004 fbc4 	bl	800565c <strncmp>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d104      	bne.n	8000ee2 <check_answer+0x2a>
	{
		rx_buff[0] = 0 ;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <check_answer+0x34>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		return 1 ;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <check_answer+0x2c>
	}
	else
		return 0 ;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200002e0 	.word	0x200002e0

08000ef0 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b24      	cmp	r3, #36	; 0x24
 8000f04:	d102      	bne.n	8000f0c <nmea_checksum+0x1c>
		i++ ;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f0c:	230b      	movs	r3, #11
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e00c      	b.n	8000f30 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	18d3      	adds	r3, r2, r3
 8000f1c:	7819      	ldrb	r1, [r3, #0]
 8000f1e:	220b      	movs	r2, #11
 8000f20:	18bb      	adds	r3, r7, r2
 8000f22:	18ba      	adds	r2, r7, r2
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	404a      	eors	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d205      	bcs.n	8000f44 <nmea_checksum+0x54>
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	18d3      	adds	r3, r2, r3
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e8      	bne.n	8000f16 <nmea_checksum+0x26>
	return cs;
 8000f44:	230b      	movs	r3, #11
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d107      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		waiting_for_answer = 0 ;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f002 fbb6 	bl	80036e0 <HAL_TIM_Base_Stop_IT>
		//NVIC_SystemReset () ; // Może kiedyś przyda się restartowanie aplikacji przy problemach z hardware
		__NOP () ;
 8000f74:	46c0      	nop			; (mov r8, r8)
	}
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	40001000 	.word	0x40001000
 8000f84:	200002de 	.word	0x200002de
 8000f88:	2000010c 	.word	0x2000010c

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x44>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_MspInit+0x44>)
 8000fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_MspInit+0x44>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0549      	lsls	r1, r1, #21
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_MspInit+0x44>)
 8000fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	4013      	ands	r3, r2
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b091      	sub	sp, #68	; 0x44
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	240c      	movs	r4, #12
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	0018      	movs	r0, r3
 8000fee:	2334      	movs	r3, #52	; 0x34
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f004 fb0a 	bl	800560c <memset>
  if(hrtc->Instance==RTC)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_RTC_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12c      	bne.n	800105c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001002:	193b      	adds	r3, r7, r4
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	0292      	lsls	r2, r2, #10
 8001008:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0052      	lsls	r2, r2, #1
 8001010:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001012:	193b      	adds	r3, r7, r4
 8001014:	0018      	movs	r0, r3
 8001016:	f001 fd85 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d001      	beq.n	8001022 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800101e:	f7ff ffb5 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_RTC_MspInit+0x88>)
 8001024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_RTC_MspInit+0x88>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0209      	lsls	r1, r1, #8
 800102c:	430a      	orrs	r2, r1
 800102e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_RTC_MspInit+0x88>)
 8001032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_RTC_MspInit+0x88>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	00c9      	lsls	r1, r1, #3
 800103a:	430a      	orrs	r2, r1
 800103c:	63da      	str	r2, [r3, #60]	; 0x3c
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_RTC_MspInit+0x88>)
 8001040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4013      	ands	r3, r2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2002      	movs	r0, #2
 8001052:	f000 fb1f 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001056:	2002      	movs	r0, #2
 8001058:	f000 fb31 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b011      	add	sp, #68	; 0x44
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40002800 	.word	0x40002800
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_TIM_Base_MspInit+0x44>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d113      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_TIM_Base_MspInit+0x48>)
 8001080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_TIM_Base_MspInit+0x48>)
 8001084:	2110      	movs	r1, #16
 8001086:	430a      	orrs	r2, r1
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_TIM_Base_MspInit+0x48>)
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2210      	movs	r2, #16
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2011      	movs	r0, #17
 800109c:	f000 fafa 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80010a0:	2011      	movs	r0, #17
 80010a2:	f000 fb0c 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b004      	add	sp, #16
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40001000 	.word	0x40001000
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b099      	sub	sp, #100	; 0x64
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	234c      	movs	r3, #76	; 0x4c
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	0018      	movs	r0, r3
 80010c6:	2314      	movs	r3, #20
 80010c8:	001a      	movs	r2, r3
 80010ca:	2100      	movs	r1, #0
 80010cc:	f004 fa9e 	bl	800560c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	2418      	movs	r4, #24
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	0018      	movs	r0, r3
 80010d6:	2334      	movs	r3, #52	; 0x34
 80010d8:	001a      	movs	r2, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	f004 fa96 	bl	800560c <memset>
  if(huart->Instance==USART1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a5e      	ldr	r2, [pc, #376]	; (8001260 <HAL_UART_MspInit+0x1a8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d170      	bne.n	80011cc <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 fd13 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff ff43 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	01c9      	lsls	r1, r1, #7
 8001110:	430a      	orrs	r2, r1
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	01db      	lsls	r3, r3, #7
 800111c:	4013      	ands	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001126:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001128:	2104      	movs	r1, #4
 800112a:	430a      	orrs	r2, r1
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001132:	2204      	movs	r2, #4
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800113a:	214c      	movs	r1, #76	; 0x4c
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2202      	movs	r2, #2
 8001146:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2201      	movs	r2, #1
 8001158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	187b      	adds	r3, r7, r1
 800115c:	4a42      	ldr	r2, [pc, #264]	; (8001268 <HAL_UART_MspInit+0x1b0>)
 800115e:	0019      	movs	r1, r3
 8001160:	0010      	movs	r0, r2
 8001162:	f000 fde7 	bl	8001d34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_UART_MspInit+0x1b4>)
 8001168:	4a41      	ldr	r2, [pc, #260]	; (8001270 <HAL_UART_MspInit+0x1b8>)
 800116a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800116c:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_UART_MspInit+0x1b4>)
 800116e:	2232      	movs	r2, #50	; 0x32
 8001170:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001172:	4b3e      	ldr	r3, [pc, #248]	; (800126c <HAL_UART_MspInit+0x1b4>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <HAL_UART_MspInit+0x1b4>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_UART_MspInit+0x1b4>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001184:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_UART_MspInit+0x1b4>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_UART_MspInit+0x1b4>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <HAL_UART_MspInit+0x1b4>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <HAL_UART_MspInit+0x1b4>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <HAL_UART_MspInit+0x1b4>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 faaa 	bl	80016f8 <HAL_DMA_Init>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80011a8:	f7ff fef0 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4a2e      	ldr	r2, [pc, #184]	; (800126c <HAL_UART_MspInit+0x1b4>)
 80011b2:	505a      	str	r2, [r3, r1]
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <HAL_UART_MspInit+0x1b4>)
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	201b      	movs	r0, #27
 80011c0:	f000 fa68 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011c4:	201b      	movs	r0, #27
 80011c6:	f000 fa7a 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ca:	e044      	b.n	8001256 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <HAL_UART_MspInit+0x1bc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d13f      	bne.n	8001256 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d6:	2118      	movs	r1, #24
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2202      	movs	r2, #2
 80011dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	0018      	movs	r0, r3
 80011e8:	f001 fc9c 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 80011f0:	f7ff fecc 	bl	8000f8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 80011f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	0289      	lsls	r1, r1, #10
 80011fe:	430a      	orrs	r2, r1
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 8001216:	2101      	movs	r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x1ac>)
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8001228:	214c      	movs	r1, #76	; 0x4c
 800122a:	187b      	adds	r3, r7, r1
 800122c:	220c      	movs	r2, #12
 800122e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2202      	movs	r2, #2
 8001234:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2201      	movs	r2, #1
 800123a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2201      	movs	r2, #1
 8001246:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	187a      	adds	r2, r7, r1
 800124a:	23a0      	movs	r3, #160	; 0xa0
 800124c:	05db      	lsls	r3, r3, #23
 800124e:	0011      	movs	r1, r2
 8001250:	0018      	movs	r0, r3
 8001252:	f000 fd6f 	bl	8001d34 <HAL_GPIO_Init>
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b019      	add	sp, #100	; 0x64
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40013800 	.word	0x40013800
 8001264:	40021000 	.word	0x40021000
 8001268:	50000800 	.word	0x50000800
 800126c:	20000280 	.word	0x20000280
 8001270:	40020008 	.word	0x40020008
 8001274:	40004400 	.word	0x40004400

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f90e 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <RTC_TAMP_IRQHandler+0x14>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f002 f93c 	bl	800352c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	200000e0 	.word	0x200000e0

080012c0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	019b      	lsls	r3, r3, #6
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 feb5 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <DMA1_Channel1_IRQHandler+0x14>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 fbe8 	bl	8001ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	20000280 	.word	0x20000280

080012ec <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80012f2:	0018      	movs	r0, r3
 80012f4:	f002 fa22 	bl	800373c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	2000010c 	.word	0x2000010c

08001304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <USART1_IRQHandler+0x14>)
 800130a:	0018      	movs	r0, r3
 800130c:	f002 fd60 	bl	8003dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	20000158 	.word	0x20000158

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f004 f934 	bl	80055b8 <__errno>
 8001350:	0003      	movs	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	2301      	movs	r3, #1
 8001358:	425b      	negs	r3, r3
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	18d2      	adds	r2, r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b006      	add	sp, #24
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20009000 	.word	0x20009000
 800137c:	00000400 	.word	0x00000400
 8001380:	200004d4 	.word	0x200004d4
 8001384:	200004f0 	.word	0x200004f0

08001388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001396:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001398:	f7ff fff6 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <LoopForever+0xe>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <LoopForever+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013c2:	f004 f8ff 	bl	80055c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013c6:	f7ff f93b 	bl	8000640 <main>

080013ca <LoopForever>:

LoopForever:
  b LoopForever
 80013ca:	e7fe      	b.n	80013ca <LoopForever>
  ldr   r0, =_estack
 80013cc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80013d8:	08006178 	.word	0x08006178
  ldr r2, =_sbss
 80013dc:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80013e0:	200004ec 	.word	0x200004ec

080013e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_COMP_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_Init+0x3c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_Init+0x3c>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0049      	lsls	r1, r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f810 	bl	8001428 <HAL_InitTick>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d003      	beq.n	8001414 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e001      	b.n	8001418 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fdc0 	bl	8000f98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	230f      	movs	r3, #15
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_InitTick+0x88>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d02b      	beq.n	8001498 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_InitTick+0x8c>)
 8001442:	681c      	ldr	r4, [r3, #0]
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_InitTick+0x88>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	0019      	movs	r1, r3
 800144a:	23fa      	movs	r3, #250	; 0xfa
 800144c:	0098      	lsls	r0, r3, #2
 800144e:	f7fe fe6b 	bl	8000128 <__udivsi3>
 8001452:	0003      	movs	r3, r0
 8001454:	0019      	movs	r1, r3
 8001456:	0020      	movs	r0, r4
 8001458:	f7fe fe66 	bl	8000128 <__udivsi3>
 800145c:	0003      	movs	r3, r0
 800145e:	0018      	movs	r0, r3
 8001460:	f000 f93d 	bl	80016de <HAL_SYSTICK_Config>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d112      	bne.n	800148e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d80a      	bhi.n	8001484 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	2301      	movs	r3, #1
 8001472:	425b      	negs	r3, r3
 8001474:	2200      	movs	r2, #0
 8001476:	0018      	movs	r0, r3
 8001478:	f000 f90c 	bl	8001694 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_InitTick+0x90>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e00d      	b.n	80014a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e008      	b.n	80014a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148e:	230f      	movs	r3, #15
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e003      	b.n	80014a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001498:	230f      	movs	r3, #15
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b005      	add	sp, #20
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	2000005c 	.word	0x2000005c
 80014b4:	20000054 	.word	0x20000054
 80014b8:	20000058 	.word	0x20000058

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	001a      	movs	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	18d2      	adds	r2, r2, r3
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_IncTick+0x20>)
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	2000005c 	.word	0x2000005c
 80014dc:	200004d8 	.word	0x200004d8

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	200004d8 	.word	0x200004d8

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3301      	adds	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	001a      	movs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	189b      	adds	r3, r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	f7ff ffe0 	bl	80014e0 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	2000005c 	.word	0x2000005c

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	0002      	movs	r2, r0
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d809      	bhi.n	8001564 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	001a      	movs	r2, r3
 8001556:	231f      	movs	r3, #31
 8001558:	401a      	ands	r2, r3
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_EnableIRQ+0x30>)
 800155c:	2101      	movs	r1, #1
 800155e:	4091      	lsls	r1, r2
 8001560:	000a      	movs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b7f      	cmp	r3, #127	; 0x7f
 8001584:	d828      	bhi.n	80015d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001586:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <__NVIC_SetPriority+0xd4>)
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b25b      	sxtb	r3, r3
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	33c0      	adds	r3, #192	; 0xc0
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	589b      	ldr	r3, [r3, r2]
 8001596:	1dfa      	adds	r2, r7, #7
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	0011      	movs	r1, r2
 800159c:	2203      	movs	r2, #3
 800159e:	400a      	ands	r2, r1
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	21ff      	movs	r1, #255	; 0xff
 80015a4:	4091      	lsls	r1, r2
 80015a6:	000a      	movs	r2, r1
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	401a      	ands	r2, r3
 80015ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	019b      	lsls	r3, r3, #6
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	401a      	ands	r2, r3
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0018      	movs	r0, r3
 80015bc:	2303      	movs	r3, #3
 80015be:	4003      	ands	r3, r0
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c4:	481f      	ldr	r0, [pc, #124]	; (8001644 <__NVIC_SetPriority+0xd4>)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	430a      	orrs	r2, r1
 80015d0:	33c0      	adds	r3, #192	; 0xc0
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015d6:	e031      	b.n	800163c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <__NVIC_SetPriority+0xd8>)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0019      	movs	r1, r3
 80015e0:	230f      	movs	r3, #15
 80015e2:	400b      	ands	r3, r1
 80015e4:	3b08      	subs	r3, #8
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3306      	adds	r3, #6
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	18d3      	adds	r3, r2, r3
 80015ee:	3304      	adds	r3, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1dfa      	adds	r2, r7, #7
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	0011      	movs	r1, r2
 80015f8:	2203      	movs	r2, #3
 80015fa:	400a      	ands	r2, r1
 80015fc:	00d2      	lsls	r2, r2, #3
 80015fe:	21ff      	movs	r1, #255	; 0xff
 8001600:	4091      	lsls	r1, r2
 8001602:	000a      	movs	r2, r1
 8001604:	43d2      	mvns	r2, r2
 8001606:	401a      	ands	r2, r3
 8001608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	019b      	lsls	r3, r3, #6
 800160e:	22ff      	movs	r2, #255	; 0xff
 8001610:	401a      	ands	r2, r3
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	2303      	movs	r3, #3
 800161a:	4003      	ands	r3, r0
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <__NVIC_SetPriority+0xd8>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	001c      	movs	r4, r3
 8001628:	230f      	movs	r3, #15
 800162a:	4023      	ands	r3, r4
 800162c:	3b08      	subs	r3, #8
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	430a      	orrs	r2, r1
 8001632:	3306      	adds	r3, #6
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	18c3      	adds	r3, r0, r3
 8001638:	3304      	adds	r3, #4
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b003      	add	sp, #12
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	045b      	lsls	r3, r3, #17
 800165c:	429a      	cmp	r2, r3
 800165e:	d301      	bcc.n	8001664 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001660:	2301      	movs	r3, #1
 8001662:	e010      	b.n	8001686 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <SysTick_Config+0x44>)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	3a01      	subs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166c:	2301      	movs	r3, #1
 800166e:	425b      	negs	r3, r3
 8001670:	2103      	movs	r1, #3
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff ff7c 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x44>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x44>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	210f      	movs	r1, #15
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	1c02      	adds	r2, r0, #0
 80016a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff5d 	bl	8001570 <__NVIC_SetPriority>
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	0002      	movs	r2, r0
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff ff33 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff ffaf 	bl	800164c <SysTick_Config>
 80016ee:	0003      	movs	r3, r0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e077      	b.n	80017fa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <HAL_DMA_Init+0x10c>)
 8001710:	4694      	mov	ip, r2
 8001712:	4463      	add	r3, ip
 8001714:	2114      	movs	r1, #20
 8001716:	0018      	movs	r0, r3
 8001718:	f7fe fd06 	bl	8000128 <__udivsi3>
 800171c:	0003      	movs	r3, r0
 800171e:	009a      	lsls	r2, r3, #2
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2225      	movs	r2, #37	; 0x25
 8001728:	2102      	movs	r1, #2
 800172a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4934      	ldr	r1, [pc, #208]	; (8001808 <HAL_DMA_Init+0x110>)
 8001738:	400a      	ands	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 fa8d 	bl	8001c94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	01db      	lsls	r3, r3, #7
 8001782:	429a      	cmp	r2, r3
 8001784:	d102      	bne.n	800178c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	213f      	movs	r1, #63	; 0x3f
 8001796:	400a      	ands	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d011      	beq.n	80017d0 <HAL_DMA_Init+0xd8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d80d      	bhi.n	80017d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 fa98 	bl	8001cec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	e008      	b.n	80017e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2225      	movs	r2, #37	; 0x25
 80017ec:	2101      	movs	r1, #1
 80017ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	; 0x24
 80017f4:	2100      	movs	r1, #0
 80017f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	bffdfff8 	.word	0xbffdfff8
 8001808:	ffff800f 	.word	0xffff800f

0800180c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2317      	movs	r3, #23
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2224      	movs	r2, #36	; 0x24
 8001826:	5c9b      	ldrb	r3, [r3, r2]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_DMA_Start_IT+0x24>
 800182c:	2302      	movs	r3, #2
 800182e:	e06f      	b.n	8001910 <HAL_DMA_Start_IT+0x104>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2224      	movs	r2, #36	; 0x24
 8001834:	2101      	movs	r1, #1
 8001836:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2225      	movs	r2, #37	; 0x25
 800183c:	5c9b      	ldrb	r3, [r3, r2]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d157      	bne.n	80018f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2225      	movs	r2, #37	; 0x25
 8001848:	2102      	movs	r1, #2
 800184a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	438a      	bics	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f9d3 	bl	8001c14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	210e      	movs	r1, #14
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e00f      	b.n	80018a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2104      	movs	r1, #4
 8001894:	438a      	bics	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	210a      	movs	r1, #10
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	4013      	ands	r3, r2
 80018b4:	d008      	beq.n	80018c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0049      	lsls	r1, r1, #1
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0049      	lsls	r1, r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e00a      	b.n	800190a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2224      	movs	r2, #36	; 0x24
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001902:	2317      	movs	r3, #23
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800190a:	2317      	movs	r3, #23
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b006      	add	sp, #24
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e050      	b.n	80019cc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2225      	movs	r2, #37	; 0x25
 800192e:	5c9b      	ldrb	r3, [r3, r2]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d008      	beq.n	8001948 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2204      	movs	r2, #4
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2224      	movs	r2, #36	; 0x24
 8001940:	2100      	movs	r1, #0
 8001942:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e041      	b.n	80019cc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	210e      	movs	r1, #14
 8001954:	438a      	bics	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	491c      	ldr	r1, [pc, #112]	; (80019d4 <HAL_DMA_Abort+0xbc>)
 8001964:	400a      	ands	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_DMA_Abort+0xc0>)
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	221c      	movs	r2, #28
 8001982:	4013      	ands	r3, r2
 8001984:	2201      	movs	r2, #1
 8001986:	409a      	lsls	r2, r3
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_DMA_Abort+0xc0>)
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001996:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019aa:	490a      	ldr	r1, [pc, #40]	; (80019d4 <HAL_DMA_Abort+0xbc>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80019b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2225      	movs	r2, #37	; 0x25
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2224      	movs	r2, #36	; 0x24
 80019c6:	2100      	movs	r1, #0
 80019c8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b002      	add	sp, #8
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	fffffeff 	.word	0xfffffeff
 80019d8:	40020000 	.word	0x40020000

080019dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e4:	210f      	movs	r1, #15
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2225      	movs	r2, #37	; 0x25
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d006      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2204      	movs	r2, #4
 80019fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e049      	b.n	8001a9a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	210e      	movs	r1, #14
 8001a12:	438a      	bics	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	438a      	bics	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	491d      	ldr	r1, [pc, #116]	; (8001aa8 <HAL_DMA_Abort_IT+0xcc>)
 8001a32:	400a      	ands	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_DMA_Abort_IT+0xd0>)
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	221c      	movs	r2, #28
 8001a40:	4013      	ands	r3, r2
 8001a42:	2201      	movs	r2, #1
 8001a44:	409a      	lsls	r2, r3
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_DMA_Abort_IT+0xd0>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00c      	beq.n	8001a78 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a68:	490f      	ldr	r1, [pc, #60]	; (8001aa8 <HAL_DMA_Abort_IT+0xcc>)
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2225      	movs	r2, #37	; 0x25
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	0010      	movs	r0, r2
 8001a98:	4798      	blx	r3
    }
  }
  return status;
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	fffffeff 	.word	0xfffffeff
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001ab8:	4b55      	ldr	r3, [pc, #340]	; (8001c10 <HAL_DMA_IRQHandler+0x160>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	221c      	movs	r2, #28
 8001acc:	4013      	ands	r3, r2
 8001ace:	2204      	movs	r2, #4
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d027      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x7a>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2204      	movs	r2, #4
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d023      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	4013      	ands	r3, r2
 8001aec:	d107      	bne.n	8001afe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2104      	movs	r1, #4
 8001afa:	438a      	bics	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_DMA_IRQHandler+0x160>)
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	221c      	movs	r2, #28
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <HAL_DMA_IRQHandler+0x160>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <HAL_DMA_IRQHandler+0x6e>
 8001b1c:	e073      	b.n	8001c06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	0010      	movs	r0, r2
 8001b26:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b28:	e06d      	b.n	8001c06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	221c      	movs	r2, #28
 8001b30:	4013      	ands	r3, r2
 8001b32:	2202      	movs	r2, #2
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d02e      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xec>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d02a      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d10b      	bne.n	8001b6a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	210a      	movs	r1, #10
 8001b5e:	438a      	bics	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2225      	movs	r2, #37	; 0x25
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <HAL_DMA_IRQHandler+0x160>)
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	221c      	movs	r2, #28
 8001b74:	4013      	ands	r3, r2
 8001b76:	2202      	movs	r2, #2
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_DMA_IRQHandler+0x160>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2224      	movs	r2, #36	; 0x24
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d03a      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	0010      	movs	r0, r2
 8001b98:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001b9a:	e034      	b.n	8001c06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	221c      	movs	r2, #28
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	d02b      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x158>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d027      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	210e      	movs	r1, #14
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_DMA_IRQHandler+0x160>)
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	221c      	movs	r2, #28
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_DMA_IRQHandler+0x160>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2225      	movs	r2, #37	; 0x25
 8001be8:	2101      	movs	r1, #1
 8001bea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2224      	movs	r2, #36	; 0x24
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	0010      	movs	r0, r2
 8001c04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46c0      	nop			; (mov r8, r8)
}
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b004      	add	sp, #16
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020000 	.word	0x40020000

08001c14 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d004      	beq.n	8001c3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c3c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <DMA_SetConfig+0x7c>)
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	221c      	movs	r2, #28
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <DMA_SetConfig+0x7c>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d108      	bne.n	8001c76 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c74:	e007      	b.n	8001c86 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	60da      	str	r2, [r3, #12]
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b004      	add	sp, #16
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	40020000 	.word	0x40020000

08001c94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001ca4:	4694      	mov	ip, r2
 8001ca6:	4463      	add	r3, ip
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	001a      	movs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	23ff      	movs	r3, #255	; 0xff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	3b08      	subs	r3, #8
 8001cbc:	2114      	movs	r1, #20
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7fe fa32 	bl	8000128 <__udivsi3>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001ccc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	221f      	movs	r2, #31
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	10008200 	.word	0x10008200
 8001ce8:	40020880 	.word	0x40020880

08001cec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	223f      	movs	r2, #63	; 0x3f
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d02:	4694      	mov	ip, r2
 8001d04:	4463      	add	r3, ip
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	001a      	movs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	1000823f 	.word	0x1000823f
 8001d30:	40020940 	.word	0x40020940

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e147      	b.n	8001fd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4091      	lsls	r1, r2
 8001d4e:	000a      	movs	r2, r1
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <HAL_GPIO_Init+0x28>
 8001d5a:	e138      	b.n	8001fce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d005      	beq.n	8001d74 <HAL_GPIO_Init+0x40>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d130      	bne.n	8001dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	43da      	mvns	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	409a      	lsls	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001daa:	2201      	movs	r2, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d017      	beq.n	8001e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2203      	movs	r2, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	58d3      	ldr	r3, [r2, r3]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2207      	movs	r2, #7
 8001e30:	4013      	ands	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2107      	movs	r1, #7
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	43da      	mvns	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	401a      	ands	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_GPIO_Init+0x174>
 8001ea6:	e092      	b.n	8001fce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ea8:	4a50      	ldr	r2, [pc, #320]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3318      	adds	r3, #24
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	589b      	ldr	r3, [r3, r2]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	23a0      	movs	r3, #160	; 0xa0
 8001ed0:	05db      	lsls	r3, r3, #23
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x1ca>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a45      	ldr	r2, [pc, #276]	; (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x1c6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a44      	ldr	r2, [pc, #272]	; (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x1c2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a43      	ldr	r2, [pc, #268]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x1be>
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x1cc>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x1cc>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x1cc>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x1cc>
 8001efe:	2300      	movs	r3, #0
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	2103      	movs	r1, #3
 8001f04:	400a      	ands	r2, r1
 8001f06:	00d2      	lsls	r2, r2, #3
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f10:	4936      	ldr	r1, [pc, #216]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3318      	adds	r3, #24
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43da      	mvns	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	035b      	lsls	r3, r3, #13
 8001f36:	4013      	ands	r3, r2
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43da      	mvns	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	039b      	lsls	r3, r3, #14
 8001f60:	4013      	ands	r3, r2
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001f74:	2384      	movs	r3, #132	; 0x84
 8001f76:	58d3      	ldr	r3, [r2, r3]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f98:	4914      	ldr	r1, [pc, #80]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001f9a:	2284      	movs	r2, #132	; 0x84
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	58d3      	ldr	r3, [r2, r3]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fc6:	4909      	ldr	r1, [pc, #36]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	40da      	lsrs	r2, r3
 8001fdc:	1e13      	subs	r3, r2, #0
 8001fde:	d000      	beq.n	8001fe2 <HAL_GPIO_Init+0x2ae>
 8001fe0:	e6b0      	b.n	8001d44 <HAL_GPIO_Init+0x10>
  }
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b006      	add	sp, #24
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	50000400 	.word	0x50000400
 8001ff4:	50000800 	.word	0x50000800
 8001ff8:	50000c00 	.word	0x50000c00

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	0008      	movs	r0, r1
 8002006:	0011      	movs	r1, r2
 8002008:	1cbb      	adds	r3, r7, #2
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	1c7b      	adds	r3, r7, #1
 8002010:	1c0a      	adds	r2, r1, #0
 8002012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002014:	1c7b      	adds	r3, r7, #1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201c:	1cbb      	adds	r3, r7, #2
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e003      	b.n	800202e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002026:	1cbb      	adds	r3, r7, #2
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	1dba      	adds	r2, r7, #6
 800204a:	8812      	ldrh	r2, [r2, #0]
 800204c:	4013      	ands	r3, r2
 800204e:	d008      	beq.n	8002062 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002052:	1dba      	adds	r2, r7, #6
 8002054:	8812      	ldrh	r2, [r2, #0]
 8002056:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f815 	bl	800208c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	1dba      	adds	r2, r7, #6
 8002068:	8812      	ldrh	r2, [r2, #0]
 800206a:	4013      	ands	r3, r2
 800206c:	d008      	beq.n	8002080 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002070:	1dba      	adds	r2, r7, #6
 8002072:	8812      	ldrh	r2, [r2, #0]
 8002074:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002076:	1dbb      	adds	r3, r7, #6
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f810 	bl	80020a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021800 	.word	0x40021800

0800208c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	0002      	movs	r2, r0
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002098:	46c0      	nop			; (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	0002      	movs	r2, r0
 80020a8:	1dbb      	adds	r3, r7, #6
 80020aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	0049      	lsls	r1, r1, #1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40007000 	.word	0x40007000

080020d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d11f      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	0013      	movs	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4912      	ldr	r1, [pc, #72]	; (800214c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002102:	0018      	movs	r0, r3
 8002104:	f7fe f810 	bl	8000128 <__udivsi3>
 8002108:	0003      	movs	r3, r0
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210e:	e008      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3b01      	subs	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e001      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e009      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	401a      	ands	r2, r3
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	429a      	cmp	r2, r3
 8002132:	d0ed      	beq.n	8002110 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b004      	add	sp, #16
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	40007000 	.word	0x40007000
 8002144:	fffff9ff 	.word	0xfffff9ff
 8002148:	20000054 	.word	0x20000054
 800214c:	000f4240 	.word	0x000f4240

08002150 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2207      	movs	r2, #7
 800215a:	4393      	bics	r3, r2
 800215c:	001a      	movs	r2, r3
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002160:	2104      	movs	r1, #4
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800216c:	2104      	movs	r1, #4
 800216e:	430a      	orrs	r2, r1
 8002170:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8002172:	bf30      	wfi
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	40007000 	.word	0x40007000
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <LL_RCC_GetAPB1Prescaler+0x14>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	23e0      	movs	r3, #224	; 0xe0
 800218e:	01db      	lsls	r3, r3, #7
 8002190:	4013      	ands	r3, r2
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e2fe      	b.n	80027ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2201      	movs	r2, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	d100      	bne.n	80021ba <HAL_RCC_OscConfig+0x1e>
 80021b8:	e07c      	b.n	80022b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ba:	4bc3      	ldr	r3, [pc, #780]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2238      	movs	r2, #56	; 0x38
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c4:	4bc0      	ldr	r3, [pc, #768]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2203      	movs	r2, #3
 80021ca:	4013      	ands	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d102      	bne.n	80021da <HAL_RCC_OscConfig+0x3e>
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d10b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	4bb9      	ldr	r3, [pc, #740]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	4013      	ands	r3, r2
 80021ea:	d062      	beq.n	80022b2 <HAL_RCC_OscConfig+0x116>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d15e      	bne.n	80022b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e2d9      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	025b      	lsls	r3, r3, #9
 8002200:	429a      	cmp	r2, r3
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x78>
 8002204:	4bb0      	ldr	r3, [pc, #704]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4baf      	ldr	r3, [pc, #700]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	0249      	lsls	r1, r1, #9
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e020      	b.n	8002256 <HAL_RCC_OscConfig+0xba>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	23a0      	movs	r3, #160	; 0xa0
 800221a:	02db      	lsls	r3, r3, #11
 800221c:	429a      	cmp	r2, r3
 800221e:	d10e      	bne.n	800223e <HAL_RCC_OscConfig+0xa2>
 8002220:	4ba9      	ldr	r3, [pc, #676]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4ba8      	ldr	r3, [pc, #672]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	02c9      	lsls	r1, r1, #11
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	4ba6      	ldr	r3, [pc, #664]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4ba5      	ldr	r3, [pc, #660]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0249      	lsls	r1, r1, #9
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e00b      	b.n	8002256 <HAL_RCC_OscConfig+0xba>
 800223e:	4ba2      	ldr	r3, [pc, #648]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4ba1      	ldr	r3, [pc, #644]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002244:	49a1      	ldr	r1, [pc, #644]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	4b9f      	ldr	r3, [pc, #636]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b9e      	ldr	r3, [pc, #632]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002250:	499f      	ldr	r1, [pc, #636]	; (80024d0 <HAL_RCC_OscConfig+0x334>)
 8002252:	400a      	ands	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d014      	beq.n	8002288 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff f93f 	bl	80014e0 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff f93a 	bl	80014e0 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e298      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	4b93      	ldr	r3, [pc, #588]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	4013      	ands	r3, r2
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xcc>
 8002286:	e015      	b.n	80022b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7ff f92a 	bl	80014e0 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002292:	f7ff f925 	bl	80014e0 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e283      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a4:	4b88      	ldr	r3, [pc, #544]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	4013      	ands	r3, r2
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0xf6>
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2202      	movs	r2, #2
 80022ba:	4013      	ands	r3, r2
 80022bc:	d100      	bne.n	80022c0 <HAL_RCC_OscConfig+0x124>
 80022be:	e099      	b.n	80023f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c0:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2238      	movs	r2, #56	; 0x38
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ca:	4b7f      	ldr	r3, [pc, #508]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2203      	movs	r2, #3
 80022d0:	4013      	ands	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_OscConfig+0x144>
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d002      	beq.n	80022e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d135      	bne.n	8002352 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4013      	ands	r3, r2
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x162>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e256      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4a74      	ldr	r2, [pc, #464]	; (80024d4 <HAL_RCC_OscConfig+0x338>)
 8002304:	4013      	ands	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	021a      	lsls	r2, r3, #8
 800230e:	4b6e      	ldr	r3, [pc, #440]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d112      	bne.n	8002340 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800231a:	4b6b      	ldr	r3, [pc, #428]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x33c>)
 8002320:	4013      	ands	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800232e:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0adb      	lsrs	r3, r3, #11
 8002334:	2207      	movs	r2, #7
 8002336:	4013      	ands	r3, r2
 8002338:	4a68      	ldr	r2, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x340>)
 800233a:	40da      	lsrs	r2, r3
 800233c:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <HAL_RCC_OscConfig+0x344>)
 800233e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002340:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x348>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff f86f 	bl	8001428 <HAL_InitTick>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d051      	beq.n	80023f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e22c      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d030      	beq.n	80023bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800235a:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5e      	ldr	r2, [pc, #376]	; (80024d8 <HAL_RCC_OscConfig+0x33c>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800236a:	430a      	orrs	r2, r1
 800236c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	0049      	lsls	r1, r1, #1
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f8b0 	bl	80014e0 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7ff f8ab 	bl	80014e0 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e209      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4013      	ands	r3, r2
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b48      	ldr	r3, [pc, #288]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <HAL_RCC_OscConfig+0x338>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	021a      	lsls	r2, r3, #8
 80023b4:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	e01b      	b.n	80023f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	4949      	ldr	r1, [pc, #292]	; (80024e8 <HAL_RCC_OscConfig+0x34c>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f88a 	bl	80014e0 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d2:	f7ff f885 	bl	80014e0 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1e3      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e4:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x236>
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2208      	movs	r2, #8
 80023fa:	4013      	ands	r3, r2
 80023fc:	d047      	beq.n	800248e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023fe:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2238      	movs	r2, #56	; 0x38
 8002404:	4013      	ands	r3, r2
 8002406:	2b18      	cmp	r3, #24
 8002408:	d10a      	bne.n	8002420 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800240a:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	2202      	movs	r2, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d03c      	beq.n	800248e <HAL_RCC_OscConfig+0x2f2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d138      	bne.n	800248e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e1c5      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d019      	beq.n	800245c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800242a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242c:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800242e:	2101      	movs	r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff f854 	bl	80014e0 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243e:	f7ff f84f 	bl	80014e0 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1ad      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d0f1      	beq.n	800243e <HAL_RCC_OscConfig+0x2a2>
 800245a:	e018      	b.n	800248e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 800245e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002462:	2101      	movs	r1, #1
 8002464:	438a      	bics	r2, r1
 8002466:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff f83a 	bl	80014e0 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002472:	f7ff f835 	bl	80014e0 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e193      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d1f1      	bne.n	8002472 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2204      	movs	r2, #4
 8002494:	4013      	ands	r3, r2
 8002496:	d100      	bne.n	800249a <HAL_RCC_OscConfig+0x2fe>
 8002498:	e0c6      	b.n	8002628 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	231f      	movs	r3, #31
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2238      	movs	r2, #56	; 0x38
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d11e      	bne.n	80024ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_OscConfig+0x32c>)
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2202      	movs	r2, #2
 80024b4:	4013      	ands	r3, r2
 80024b6:	d100      	bne.n	80024ba <HAL_RCC_OscConfig+0x31e>
 80024b8:	e0b6      	b.n	8002628 <HAL_RCC_OscConfig+0x48c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d000      	beq.n	80024c4 <HAL_RCC_OscConfig+0x328>
 80024c2:	e0b1      	b.n	8002628 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e171      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
 80024c8:	40021000 	.word	0x40021000
 80024cc:	fffeffff 	.word	0xfffeffff
 80024d0:	fffbffff 	.word	0xfffbffff
 80024d4:	ffff80ff 	.word	0xffff80ff
 80024d8:	ffffc7ff 	.word	0xffffc7ff
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	20000054 	.word	0x20000054
 80024e4:	20000058 	.word	0x20000058
 80024e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ec:	4bb1      	ldr	r3, [pc, #708]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80024ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	055b      	lsls	r3, r3, #21
 80024f4:	4013      	ands	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x360>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x362>
 80024fc:	2300      	movs	r3, #0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d011      	beq.n	8002526 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4bac      	ldr	r3, [pc, #688]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002506:	4bab      	ldr	r3, [pc, #684]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0549      	lsls	r1, r1, #21
 800250c:	430a      	orrs	r2, r1
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002510:	4ba8      	ldr	r3, [pc, #672]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	055b      	lsls	r3, r3, #21
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002526:	4ba4      	ldr	r3, [pc, #656]	; (80027b8 <HAL_RCC_OscConfig+0x61c>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4013      	ands	r3, r2
 8002530:	d11a      	bne.n	8002568 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002532:	4ba1      	ldr	r3, [pc, #644]	; (80027b8 <HAL_RCC_OscConfig+0x61c>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4ba0      	ldr	r3, [pc, #640]	; (80027b8 <HAL_RCC_OscConfig+0x61c>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0049      	lsls	r1, r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002540:	f7fe ffce 	bl	80014e0 <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe ffc9 	bl	80014e0 <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e127      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255c:	4b96      	ldr	r3, [pc, #600]	; (80027b8 <HAL_RCC_OscConfig+0x61c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4013      	ands	r3, r2
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x3e2>
 8002570:	4b90      	ldr	r3, [pc, #576]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	65da      	str	r2, [r3, #92]	; 0x5c
 800257c:	e01c      	b.n	80025b8 <HAL_RCC_OscConfig+0x41c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b05      	cmp	r3, #5
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x404>
 8002586:	4b8b      	ldr	r3, [pc, #556]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800258a:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 800258c:	2104      	movs	r1, #4
 800258e:	430a      	orrs	r2, r1
 8002590:	65da      	str	r2, [r3, #92]	; 0x5c
 8002592:	4b88      	ldr	r3, [pc, #544]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	65da      	str	r2, [r3, #92]	; 0x5c
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0x41c>
 80025a0:	4b84      	ldr	r3, [pc, #528]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80025a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025a4:	4b83      	ldr	r3, [pc, #524]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	438a      	bics	r2, r1
 80025aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ac:	4b81      	ldr	r3, [pc, #516]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80025ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b0:	4b80      	ldr	r3, [pc, #512]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80025b2:	2104      	movs	r1, #4
 80025b4:	438a      	bics	r2, r1
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d014      	beq.n	80025ea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe ff8e 	bl	80014e0 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c8:	e009      	b.n	80025de <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe ff89 	bl	80014e0 <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	4a79      	ldr	r2, [pc, #484]	; (80027bc <HAL_RCC_OscConfig+0x620>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0e6      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025de:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	2202      	movs	r2, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x42e>
 80025e8:	e013      	b.n	8002612 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe ff79 	bl	80014e0 <HAL_GetTick>
 80025ee:	0003      	movs	r3, r0
 80025f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f2:	e009      	b.n	8002608 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe ff74 	bl	80014e0 <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	4a6f      	ldr	r2, [pc, #444]	; (80027bc <HAL_RCC_OscConfig+0x620>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0d1      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002612:	231f      	movs	r3, #31
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800261c:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 800261e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002620:	4b64      	ldr	r3, [pc, #400]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002622:	4967      	ldr	r1, [pc, #412]	; (80027c0 <HAL_RCC_OscConfig+0x624>)
 8002624:	400a      	ands	r2, r1
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d100      	bne.n	8002632 <HAL_RCC_OscConfig+0x496>
 8002630:	e0bb      	b.n	80027aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002632:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2238      	movs	r2, #56	; 0x38
 8002638:	4013      	ands	r3, r2
 800263a:	2b10      	cmp	r3, #16
 800263c:	d100      	bne.n	8002640 <HAL_RCC_OscConfig+0x4a4>
 800263e:	e07b      	b.n	8002738 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d156      	bne.n	80026f6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 800264e:	495d      	ldr	r1, [pc, #372]	; (80027c4 <HAL_RCC_OscConfig+0x628>)
 8002650:	400a      	ands	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe ff44 	bl	80014e0 <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe ff3f 	bl	80014e0 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e09d      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	049b      	lsls	r3, r3, #18
 8002678:	4013      	ands	r3, r2
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a51      	ldr	r2, [pc, #324]	; (80027c8 <HAL_RCC_OscConfig+0x62c>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1a      	ldr	r2, [r3, #32]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	431a      	orrs	r2, r3
 80026aa:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	0449      	lsls	r1, r1, #17
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	0549      	lsls	r1, r1, #21
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe ff08 	bl	80014e0 <HAL_GetTick>
 80026d0:	0003      	movs	r3, r0
 80026d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe ff03 	bl	80014e0 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e061      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	049b      	lsls	r3, r3, #18
 80026f0:	4013      	ands	r3, r2
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x53a>
 80026f4:	e059      	b.n	80027aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 80026fc:	4931      	ldr	r1, [pc, #196]	; (80027c4 <HAL_RCC_OscConfig+0x628>)
 80026fe:	400a      	ands	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe feed 	bl	80014e0 <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fee8 	bl	80014e0 <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e046      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	049b      	lsls	r3, r3, #18
 8002726:	4013      	ands	r3, r2
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002730:	4926      	ldr	r1, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x630>)
 8002732:	400a      	ands	r2, r1
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	e038      	b.n	80027aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e033      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x618>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2203      	movs	r2, #3
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	429a      	cmp	r2, r3
 8002756:	d126      	bne.n	80027a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2270      	movs	r2, #112	; 0x70
 800275c:	401a      	ands	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d11f      	bne.n	80027a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	23fe      	movs	r3, #254	; 0xfe
 800276a:	01db      	lsls	r3, r3, #7
 800276c:	401a      	ands	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d116      	bne.n	80027a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	23f8      	movs	r3, #248	; 0xf8
 800277c:	039b      	lsls	r3, r3, #14
 800277e:	401a      	ands	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d10e      	bne.n	80027a6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	23e0      	movs	r3, #224	; 0xe0
 800278c:	051b      	lsls	r3, r3, #20
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	0f5b      	lsrs	r3, r3, #29
 800279c:	075a      	lsls	r2, r3, #29
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b008      	add	sp, #32
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
 80027bc:	00001388 	.word	0x00001388
 80027c0:	efffffff 	.word	0xefffffff
 80027c4:	feffffff 	.word	0xfeffffff
 80027c8:	11c1808c 	.word	0x11c1808c
 80027cc:	eefefffc 	.word	0xeefefffc

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0e9      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2207      	movs	r2, #7
 80027ea:	4013      	ands	r3, r2
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d91e      	bls.n	8002830 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b73      	ldr	r3, [pc, #460]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2207      	movs	r2, #7
 80027f8:	4393      	bics	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002804:	f7fe fe6c 	bl	80014e0 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800280c:	e009      	b.n	8002822 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280e:	f7fe fe67 	bl	80014e0 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <HAL_RCC_ClockConfig+0x1f4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0ca      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002822:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2207      	movs	r2, #7
 8002828:	4013      	ands	r3, r2
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2202      	movs	r2, #2
 8002836:	4013      	ands	r3, r2
 8002838:	d015      	beq.n	8002866 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2204      	movs	r2, #4
 8002840:	4013      	ands	r3, r2
 8002842:	d006      	beq.n	8002852 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002844:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 800284a:	21e0      	movs	r1, #224	; 0xe0
 800284c:	01c9      	lsls	r1, r1, #7
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002852:	4b5d      	ldr	r3, [pc, #372]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <HAL_RCC_ClockConfig+0x1fc>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	d057      	beq.n	8002920 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	4013      	ands	r3, r2
 8002882:	d12b      	bne.n	80028dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e097      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002890:	4b4d      	ldr	r3, [pc, #308]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	049b      	lsls	r3, r3, #18
 8002898:	4013      	ands	r3, r2
 800289a:	d11f      	bne.n	80028dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e08b      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a8:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4013      	ands	r3, r2
 80028b2:	d113      	bne.n	80028dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e07f      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d106      	bne.n	80028ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e074      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ce:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e06d      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2207      	movs	r2, #7
 80028e2:	4393      	bics	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f0:	f7fe fdf6 	bl	80014e0 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f8:	e009      	b.n	800290e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fa:	f7fe fdf1 	bl	80014e0 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e054      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2238      	movs	r2, #56	; 0x38
 8002914:	401a      	ands	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	429a      	cmp	r2, r3
 800291e:	d1ec      	bne.n	80028fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2207      	movs	r2, #7
 8002926:	4013      	ands	r3, r2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d21e      	bcs.n	800296c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2207      	movs	r2, #7
 8002934:	4393      	bics	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002940:	f7fe fdce 	bl	80014e0 <HAL_GetTick>
 8002944:	0003      	movs	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002948:	e009      	b.n	800295e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294a:	f7fe fdc9 	bl	80014e0 <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e02c      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2207      	movs	r2, #7
 8002964:	4013      	ands	r3, r2
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2204      	movs	r2, #4
 8002972:	4013      	ands	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_RCC_ClockConfig+0x200>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800298a:	f000 f829 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800298e:	0001      	movs	r1, r0
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	220f      	movs	r2, #15
 8002998:	401a      	ands	r2, r3
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x204>)
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	58d3      	ldr	r3, [r2, r3]
 80029a0:	221f      	movs	r2, #31
 80029a2:	4013      	ands	r3, r2
 80029a4:	000a      	movs	r2, r1
 80029a6:	40da      	lsrs	r2, r3
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x208>)
 80029aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_ClockConfig+0x20c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7fe fd39 	bl	8001428 <HAL_InitTick>
 80029b6:	0003      	movs	r3, r0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000
 80029c4:	00001388 	.word	0x00001388
 80029c8:	40021000 	.word	0x40021000
 80029cc:	fffff0ff 	.word	0xfffff0ff
 80029d0:	ffff8fff 	.word	0xffff8fff
 80029d4:	080060ac 	.word	0x080060ac
 80029d8:	20000054 	.word	0x20000054
 80029dc:	20000058 	.word	0x20000058

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e6:	4b3c      	ldr	r3, [pc, #240]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2238      	movs	r2, #56	; 0x38
 80029ec:	4013      	ands	r3, r2
 80029ee:	d10f      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0adb      	lsrs	r3, r3, #11
 80029f6:	2207      	movs	r2, #7
 80029f8:	4013      	ands	r3, r2
 80029fa:	2201      	movs	r2, #1
 80029fc:	409a      	lsls	r2, r3
 80029fe:	0013      	movs	r3, r2
 8002a00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a02:	6839      	ldr	r1, [r7, #0]
 8002a04:	4835      	ldr	r0, [pc, #212]	; (8002adc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a06:	f7fd fb8f 	bl	8000128 <__udivsi3>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	e05d      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2238      	movs	r2, #56	; 0x38
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a1c:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	e054      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2238      	movs	r2, #56	; 0x38
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d138      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2203      	movs	r2, #3
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	2207      	movs	r2, #7
 8002a40:	4013      	ands	r3, r2
 8002a42:	3301      	adds	r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4824      	ldr	r0, [pc, #144]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a50:	f7fd fb6a 	bl	8000128 <__udivsi3>
 8002a54:	0003      	movs	r3, r0
 8002a56:	0019      	movs	r1, r3
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	227f      	movs	r2, #127	; 0x7f
 8002a60:	4013      	ands	r3, r2
 8002a62:	434b      	muls	r3, r1
 8002a64:	617b      	str	r3, [r7, #20]
        break;
 8002a66:	e00d      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	481c      	ldr	r0, [pc, #112]	; (8002adc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a6c:	f7fd fb5c 	bl	8000128 <__udivsi3>
 8002a70:	0003      	movs	r3, r0
 8002a72:	0019      	movs	r1, r3
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	227f      	movs	r2, #127	; 0x7f
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	434b      	muls	r3, r1
 8002a80:	617b      	str	r3, [r7, #20]
        break;
 8002a82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0f5b      	lsrs	r3, r3, #29
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	3301      	adds	r3, #1
 8002a90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	6978      	ldr	r0, [r7, #20]
 8002a96:	f7fd fb47 	bl	8000128 <__udivsi3>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e015      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2238      	movs	r2, #56	; 0x38
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d103      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2238      	movs	r2, #56	; 0x38
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b18      	cmp	r3, #24
 8002abe:	d103      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ac0:	23fa      	movs	r3, #250	; 0xfa
 8002ac2:	01db      	lsls	r3, r3, #7
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	e001      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002acc:	693b      	ldr	r3, [r7, #16]
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	007a1200 	.word	0x007a1200

08002ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000054 	.word	0x20000054

08002af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002afc:	f7ff fff2 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b00:	0004      	movs	r4, r0
 8002b02:	f7ff fb3f 	bl	8002184 <LL_RCC_GetAPB1Prescaler>
 8002b06:	0003      	movs	r3, r0
 8002b08:	0b1a      	lsrs	r2, r3, #12
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b0c:	0092      	lsls	r2, r2, #2
 8002b0e:	58d3      	ldr	r3, [r2, r3]
 8002b10:	221f      	movs	r2, #31
 8002b12:	4013      	ands	r3, r2
 8002b14:	40dc      	lsrs	r4, r3
 8002b16:	0023      	movs	r3, r4
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	080060ec 	.word	0x080060ec

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b2c:	2313      	movs	r3, #19
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b34:	2312      	movs	r3, #18
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	029b      	lsls	r3, r3, #10
 8002b44:	4013      	ands	r3, r2
 8002b46:	d100      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b48:	e0a3      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2011      	movs	r0, #17
 8002b4c:	183b      	adds	r3, r7, r0
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4bc3      	ldr	r3, [pc, #780]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	055b      	lsls	r3, r3, #21
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d110      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4bc0      	ldr	r3, [pc, #768]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b62:	4bbf      	ldr	r3, [pc, #764]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0549      	lsls	r1, r1, #21
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b6c:	4bbc      	ldr	r3, [pc, #752]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	055b      	lsls	r3, r3, #21
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b80:	4bb8      	ldr	r3, [pc, #736]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4bb7      	ldr	r3, [pc, #732]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b86:	2180      	movs	r1, #128	; 0x80
 8002b88:	0049      	lsls	r1, r1, #1
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8e:	f7fe fca7 	bl	80014e0 <HAL_GetTick>
 8002b92:	0003      	movs	r3, r0
 8002b94:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b98:	f7fe fca2 	bl	80014e0 <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d904      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002ba6:	2313      	movs	r3, #19
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2203      	movs	r2, #3
 8002bac:	701a      	strb	r2, [r3, #0]
        break;
 8002bae:	e005      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb0:	4bac      	ldr	r3, [pc, #688]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d0ed      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002bbc:	2313      	movs	r3, #19
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d154      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bc6:	4ba6      	ldr	r3, [pc, #664]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bca:	23c0      	movs	r3, #192	; 0xc0
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d019      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d014      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002be2:	4b9f      	ldr	r3, [pc, #636]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	4aa0      	ldr	r2, [pc, #640]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bec:	4b9c      	ldr	r3, [pc, #624]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bf0:	4b9b      	ldr	r3, [pc, #620]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	0249      	lsls	r1, r1, #9
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfa:	4b99      	ldr	r3, [pc, #612]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bfe:	4b98      	ldr	r3, [pc, #608]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c00:	499a      	ldr	r1, [pc, #616]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c06:	4b96      	ldr	r3, [pc, #600]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d016      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc64 	bl	80014e0 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1c:	e00c      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fc5f 	bl	80014e0 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	4a91      	ldr	r2, [pc, #580]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d904      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c2e:	2313      	movs	r3, #19
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
            break;
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c38:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d0ed      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c42:	2313      	movs	r3, #19
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4c:	4b84      	ldr	r3, [pc, #528]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	4a85      	ldr	r2, [pc, #532]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5a:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c60:	e00c      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c62:	2312      	movs	r3, #18
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2213      	movs	r2, #19
 8002c68:	18ba      	adds	r2, r7, r2
 8002c6a:	7812      	ldrb	r2, [r2, #0]
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	2312      	movs	r3, #18
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2213      	movs	r2, #19
 8002c76:	18ba      	adds	r2, r7, r2
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c7c:	2311      	movs	r3, #17
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8a:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8c:	4979      	ldr	r1, [pc, #484]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d009      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c9c:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4393      	bics	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cac:	430a      	orrs	r2, r1
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cba:	4b69      	ldr	r3, [pc, #420]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cd8:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	4a66      	ldr	r2, [pc, #408]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	4b5e      	ldr	r3, [pc, #376]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	4a5f      	ldr	r2, [pc, #380]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4013      	ands	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d18:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	4b4e      	ldr	r3, [pc, #312]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2220      	movs	r2, #32
 8002d32:	4013      	ands	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	01db      	lsls	r3, r3, #7
 8002d52:	4013      	ands	r3, r2
 8002d54:	d015      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d56:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	0899      	lsrs	r1, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	05db      	lsls	r3, r3, #23
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d106      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d74:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	0249      	lsls	r1, r1, #9
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	031b      	lsls	r3, r3, #12
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d8e:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	2240      	movs	r2, #64	; 0x40
 8002d94:	4393      	bics	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	039b      	lsls	r3, r3, #14
 8002daa:	4013      	ands	r3, r2
 8002dac:	d016      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	4a35      	ldr	r2, [pc, #212]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	03db      	lsls	r3, r3, #15
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0449      	lsls	r1, r1, #17
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	03db      	lsls	r3, r3, #15
 8002de4:	4013      	ands	r3, r2
 8002de6:	d016      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	045b      	lsls	r3, r3, #17
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d106      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	0449      	lsls	r1, r1, #17
 8002e12:	430a      	orrs	r2, r1
 8002e14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d016      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	01db      	lsls	r3, r3, #7
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d106      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e48:	2180      	movs	r1, #128	; 0x80
 8002e4a:	0249      	lsls	r1, r1, #9
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e50:	2312      	movs	r3, #18
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	781b      	ldrb	r3, [r3, #0]
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b006      	add	sp, #24
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40007000 	.word	0x40007000
 8002e68:	fffffcff 	.word	0xfffffcff
 8002e6c:	fffeffff 	.word	0xfffeffff
 8002e70:	00001388 	.word	0x00001388
 8002e74:	efffffff 	.word	0xefffffff
 8002e78:	fffff3ff 	.word	0xfffff3ff
 8002e7c:	fff3ffff 	.word	0xfff3ffff
 8002e80:	ffcfffff 	.word	0xffcfffff
 8002e84:	ffffcfff 	.word	0xffffcfff
 8002e88:	ffbfffff 	.word	0xffbfffff
 8002e8c:	feffffff 	.word	0xfeffffff
 8002e90:	ffff3fff 	.word	0xffff3fff

08002e94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e9c:	230f      	movs	r3, #15
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d100      	bne.n	8002eac <HAL_RTC_Init+0x18>
 8002eaa:	e08c      	b.n	8002fc6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2229      	movs	r2, #41	; 0x29
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2228      	movs	r2, #40	; 0x28
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2288      	movs	r2, #136	; 0x88
 8002ec4:	0212      	lsls	r2, r2, #8
 8002ec6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7fe f888 	bl	8000fe0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2229      	movs	r2, #41	; 0x29
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2210      	movs	r2, #16
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d062      	beq.n	8002fac <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	22ca      	movs	r2, #202	; 0xca
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2253      	movs	r2, #83	; 0x53
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002ef6:	250f      	movs	r5, #15
 8002ef8:	197c      	adds	r4, r7, r5
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 f9cc 	bl	800329a <RTC_EnterInitMode>
 8002f02:	0003      	movs	r3, r0
 8002f04:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002f06:	0028      	movs	r0, r5
 8002f08:	183b      	adds	r3, r7, r0
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12c      	bne.n	8002f6a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	492e      	ldr	r1, [pc, #184]	; (8002fd4 <HAL_RTC_Init+0x140>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6912      	ldr	r2, [r2, #16]
 8002f46:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6919      	ldr	r1, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	041a      	lsls	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002f5c:	183c      	adds	r4, r7, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 f9dd 	bl	8003320 <RTC_ExitInitMode>
 8002f66:	0003      	movs	r3, r0
 8002f68:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002f6a:	230f      	movs	r3, #15
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d116      	bne.n	8002fa2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	00d2      	lsls	r2, r2, #3
 8002f80:	08d2      	lsrs	r2, r2, #3
 8002f82:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8002faa:	e003      	b.n	8002fb4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002fac:	230f      	movs	r3, #15
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2229      	movs	r2, #41	; 0x29
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd4:	fb8fffbf 	.word	0xfb8fffbf

08002fd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2228      	movs	r2, #40	; 0x28
 8002fe8:	5c9b      	ldrb	r3, [r3, r2]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_RTC_SetTime+0x1a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e092      	b.n	8003118 <HAL_RTC_SetTime+0x140>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2228      	movs	r2, #40	; 0x28
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2229      	movs	r2, #41	; 0x29
 8002ffe:	2102      	movs	r1, #2
 8003000:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	22ca      	movs	r2, #202	; 0xca
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2253      	movs	r2, #83	; 0x53
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003012:	2513      	movs	r5, #19
 8003014:	197c      	adds	r4, r7, r5
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f93e 	bl	800329a <RTC_EnterInitMode>
 800301e:	0003      	movs	r3, r0
 8003020:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003022:	197b      	adds	r3, r7, r5
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d162      	bne.n	80030f0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d125      	bne.n	800307c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2240      	movs	r2, #64	; 0x40
 8003038:	4013      	ands	r3, r2
 800303a:	d102      	bne.n	8003042 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f9ae 	bl	80033a8 <RTC_ByteToBcd2>
 800304c:	0003      	movs	r3, r0
 800304e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 f9a7 	bl	80033a8 <RTC_ByteToBcd2>
 800305a:	0003      	movs	r3, r0
 800305c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800305e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	789b      	ldrb	r3, [r3, #2]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f99f 	bl	80033a8 <RTC_ByteToBcd2>
 800306a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800306c:	0022      	movs	r2, r4
 800306e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	78db      	ldrb	r3, [r3, #3]
 8003074:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e017      	b.n	80030ac <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	4013      	ands	r3, r2
 8003086:	d102      	bne.n	800308e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2200      	movs	r2, #0
 800308c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800309a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030a0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	78db      	ldrb	r3, [r3, #3]
 80030a6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	491b      	ldr	r1, [pc, #108]	; (8003120 <HAL_RTC_SetTime+0x148>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4918      	ldr	r1, [pc, #96]	; (8003124 <HAL_RTC_SetTime+0x14c>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6999      	ldr	r1, [r3, #24]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030e0:	2313      	movs	r3, #19
 80030e2:	18fc      	adds	r4, r7, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 f91a 	bl	8003320 <RTC_ExitInitMode>
 80030ec:	0003      	movs	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80030f8:	2313      	movs	r3, #19
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2229      	movs	r2, #41	; 0x29
 8003106:	2101      	movs	r1, #1
 8003108:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2228      	movs	r2, #40	; 0x28
 800310e:	2100      	movs	r1, #0
 8003110:	5499      	strb	r1, [r3, r2]

  return status;
 8003112:	2313      	movs	r3, #19
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	781b      	ldrb	r3, [r3, #0]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b006      	add	sp, #24
 800311e:	bdb0      	pop	{r4, r5, r7, pc}
 8003120:	007f7f7f 	.word	0x007f7f7f
 8003124:	fffbffff 	.word	0xfffbffff

08003128 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003128:	b5b0      	push	{r4, r5, r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2228      	movs	r2, #40	; 0x28
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_RTC_SetDate+0x1a>
 800313e:	2302      	movs	r3, #2
 8003140:	e07e      	b.n	8003240 <HAL_RTC_SetDate+0x118>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2228      	movs	r2, #40	; 0x28
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2229      	movs	r2, #41	; 0x29
 800314e:	2102      	movs	r1, #2
 8003150:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10e      	bne.n	8003176 <HAL_RTC_SetDate+0x4e>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	001a      	movs	r2, r3
 800315e:	2310      	movs	r3, #16
 8003160:	4013      	ands	r3, r2
 8003162:	d008      	beq.n	8003176 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2210      	movs	r2, #16
 800316a:	4393      	bics	r3, r2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	330a      	adds	r3, #10
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11c      	bne.n	80031b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	0018      	movs	r0, r3
 8003182:	f000 f911 	bl	80033a8 <RTC_ByteToBcd2>
 8003186:	0003      	movs	r3, r0
 8003188:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	0018      	movs	r0, r3
 8003190:	f000 f90a 	bl	80033a8 <RTC_ByteToBcd2>
 8003194:	0003      	movs	r3, r0
 8003196:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003198:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	789b      	ldrb	r3, [r3, #2]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 f902 	bl	80033a8 <RTC_ByteToBcd2>
 80031a4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031a6:	0022      	movs	r2, r4
 80031a8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e00e      	b.n	80031d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	78db      	ldrb	r3, [r3, #3]
 80031ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	22ca      	movs	r2, #202	; 0xca
 80031da:	625a      	str	r2, [r3, #36]	; 0x24
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2253      	movs	r2, #83	; 0x53
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031e4:	2513      	movs	r5, #19
 80031e6:	197c      	adds	r4, r7, r5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f855 	bl	800329a <RTC_EnterInitMode>
 80031f0:	0003      	movs	r3, r0
 80031f2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80031f4:	0028      	movs	r0, r5
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4910      	ldr	r1, [pc, #64]	; (8003248 <HAL_RTC_SetDate+0x120>)
 8003206:	400a      	ands	r2, r1
 8003208:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800320a:	183c      	adds	r4, r7, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f886 	bl	8003320 <RTC_ExitInitMode>
 8003214:	0003      	movs	r3, r0
 8003216:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003220:	2313      	movs	r3, #19
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2229      	movs	r2, #41	; 0x29
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2228      	movs	r2, #40	; 0x28
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

  return status;
 800323a:	2313      	movs	r3, #19
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	781b      	ldrb	r3, [r3, #0]
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b006      	add	sp, #24
 8003246:	bdb0      	pop	{r4, r5, r7, pc}
 8003248:	00ffff3f 	.word	0x00ffff3f

0800324c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	21a0      	movs	r1, #160	; 0xa0
 8003260:	438a      	bics	r2, r1
 8003262:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003264:	f7fe f93c 	bl	80014e0 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800326c:	e00a      	b.n	8003284 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800326e:	f7fe f937 	bl	80014e0 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1ad2      	subs	r2, r2, r3
 8003278:	23fa      	movs	r3, #250	; 0xfa
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d901      	bls.n	8003284 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e006      	b.n	8003292 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	4013      	ands	r3, r2
 800328e:	d0ee      	beq.n	800326e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}

0800329a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80032a2:	230f      	movs	r3, #15
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2240      	movs	r2, #64	; 0x40
 80032b2:	4013      	ands	r3, r2
 80032b4:	d12c      	bne.n	8003310 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	430a      	orrs	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032c6:	f7fe f90b 	bl	80014e0 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032ce:	e014      	b.n	80032fa <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80032d0:	f7fe f906 	bl	80014e0 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad2      	subs	r2, r2, r3
 80032da:	200f      	movs	r0, #15
 80032dc:	183b      	adds	r3, r7, r0
 80032de:	1839      	adds	r1, r7, r0
 80032e0:	7809      	ldrb	r1, [r1, #0]
 80032e2:	7019      	strb	r1, [r3, #0]
 80032e4:	23fa      	movs	r3, #250	; 0xfa
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d906      	bls.n	80032fa <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	2203      	movs	r2, #3
 80032f0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2229      	movs	r2, #41	; 0x29
 80032f6:	2103      	movs	r1, #3
 80032f8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2240      	movs	r2, #64	; 0x40
 8003302:	4013      	ands	r3, r2
 8003304:	d104      	bne.n	8003310 <RTC_EnterInitMode+0x76>
 8003306:	230f      	movs	r3, #15
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d1df      	bne.n	80032d0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003310:	230f      	movs	r3, #15
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	781b      	ldrb	r3, [r3, #0]
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003328:	240f      	movs	r4, #15
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <RTC_ExitInitMode+0x84>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <RTC_ExitInitMode+0x84>)
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	438a      	bics	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <RTC_ExitInitMode+0x84>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2220      	movs	r2, #32
 8003342:	4013      	ands	r3, r2
 8003344:	d10d      	bne.n	8003362 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f7ff ff7f 	bl	800324c <HAL_RTC_WaitForSynchro>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d021      	beq.n	8003396 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2229      	movs	r2, #41	; 0x29
 8003356:	2103      	movs	r1, #3
 8003358:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800335a:	193b      	adds	r3, r7, r4
 800335c:	2203      	movs	r2, #3
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e019      	b.n	8003396 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <RTC_ExitInitMode+0x84>)
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <RTC_ExitInitMode+0x84>)
 8003368:	2120      	movs	r1, #32
 800336a:	438a      	bics	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff ff6b 	bl	800324c <HAL_RTC_WaitForSynchro>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d007      	beq.n	800338a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2229      	movs	r2, #41	; 0x29
 800337e:	2103      	movs	r1, #3
 8003380:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003382:	230f      	movs	r3, #15
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	2203      	movs	r2, #3
 8003388:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <RTC_ExitInitMode+0x84>)
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <RTC_ExitInitMode+0x84>)
 8003390:	2120      	movs	r1, #32
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b005      	add	sp, #20
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	40002800 	.word	0x40002800

080033a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	0002      	movs	r2, r0
 80033b0:	1dfb      	adds	r3, r7, #7
 80033b2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80033b8:	230b      	movs	r3, #11
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	1dfa      	adds	r2, r7, #7
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80033c2:	e008      	b.n	80033d6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80033ca:	220b      	movs	r2, #11
 80033cc:	18bb      	adds	r3, r7, r2
 80033ce:	18ba      	adds	r2, r7, r2
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	3a0a      	subs	r2, #10
 80033d4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80033d6:	210b      	movs	r1, #11
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b09      	cmp	r3, #9
 80033de:	d8f1      	bhi.n	80033c4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b004      	add	sp, #16
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2228      	movs	r2, #40	; 0x28
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800340e:	2302      	movs	r3, #2
 8003410:	e082      	b.n	8003518 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2228      	movs	r2, #40	; 0x28
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2229      	movs	r2, #41	; 0x29
 800341e:	2102      	movs	r1, #2
 8003420:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	22ca      	movs	r2, #202	; 0xca
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2253      	movs	r2, #83	; 0x53
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4938      	ldr	r1, [pc, #224]	; (8003520 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800343e:	400a      	ands	r2, r1
 8003440:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2104      	movs	r1, #4
 800344e:	430a      	orrs	r2, r1
 8003450:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	4013      	ands	r3, r2
 800345a:	d121      	bne.n	80034a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800345c:	f7fe f840 	bl	80014e0 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003464:	e016      	b.n	8003494 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003466:	f7fe f83b 	bl	80014e0 <HAL_GetTick>
 800346a:	0002      	movs	r2, r0
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	1ad2      	subs	r2, r2, r3
 8003470:	23fa      	movs	r3, #250	; 0xfa
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d90d      	bls.n	8003494 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2229      	movs	r2, #41	; 0x29
 8003484:	2103      	movs	r1, #3
 8003486:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2228      	movs	r2, #40	; 0x28
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e041      	b.n	8003518 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2204      	movs	r2, #4
 800349c:	4013      	ands	r3, r2
 800349e:	d0e2      	beq.n	8003466 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2107      	movs	r1, #7
 80034b4:	438a      	bics	r2, r1
 80034b6:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6999      	ldr	r1, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80034c8:	4a17      	ldr	r2, [pc, #92]	; (8003528 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	58d3      	ldr	r3, [r2, r3]
 80034ce:	4916      	ldr	r1, [pc, #88]	; (8003528 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0312      	lsls	r2, r2, #12
 80034d4:	4313      	orrs	r3, r2
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	01c9      	lsls	r1, r1, #7
 80034e8:	430a      	orrs	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	00c9      	lsls	r1, r1, #3
 80034fa:	430a      	orrs	r2, r1
 80034fc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	22ff      	movs	r2, #255	; 0xff
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2229      	movs	r2, #41	; 0x29
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2228      	movs	r2, #40	; 0x28
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b006      	add	sp, #24
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fffffbff 	.word	0xfffffbff
 8003524:	40002800 	.word	0x40002800
 8003528:	40021800 	.word	0x40021800

0800352c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	2204      	movs	r2, #4
 800353c:	4013      	ands	r3, r2
 800353e:	d00b      	beq.n	8003558 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2104      	movs	r1, #4
 800354c:	430a      	orrs	r2, r1
 800354e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f808 	bl	8003568 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2229      	movs	r2, #41	; 0x29
 800355c:	2101      	movs	r1, #1
 800355e:	5499      	strb	r1, [r3, r2]
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e04a      	b.n	8003620 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223d      	movs	r2, #61	; 0x3d
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	223c      	movs	r2, #60	; 0x3c
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7fd fd63 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	223d      	movs	r2, #61	; 0x3d
 80035aa:	2102      	movs	r1, #2
 80035ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	0019      	movs	r1, r3
 80035b8:	0010      	movs	r0, r2
 80035ba:	f000 fa11 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2248      	movs	r2, #72	; 0x48
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223e      	movs	r2, #62	; 0x3e
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2241      	movs	r2, #65	; 0x41
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2242      	movs	r2, #66	; 0x42
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2243      	movs	r2, #67	; 0x43
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2244      	movs	r2, #68	; 0x44
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2245      	movs	r2, #69	; 0x45
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2246      	movs	r2, #70	; 0x46
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2247      	movs	r2, #71	; 0x47
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	223d      	movs	r2, #61	; 0x3d
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	223d      	movs	r2, #61	; 0x3d
 8003634:	5c9b      	ldrb	r3, [r3, r2]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d001      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e042      	b.n	80036c6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	223d      	movs	r2, #61	; 0x3d
 8003644:	2102      	movs	r1, #2
 8003646:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2101      	movs	r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x5a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	429a      	cmp	r2, r3
 800366c:	d009      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x5a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_TIM_Base_Start_IT+0xac>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x5a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d116      	bne.n	80036b0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_TIM_Base_Start_IT+0xb4>)
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d016      	beq.n	80036c2 <HAL_TIM_Base_Start_IT+0x9a>
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	025b      	lsls	r3, r3, #9
 800369a:	429a      	cmp	r2, r3
 800369c:	d011      	beq.n	80036c2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ae:	e008      	b.n	80036c2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2101      	movs	r1, #1
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e000      	b.n	80036c4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	00010007 	.word	0x00010007

080036e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2101      	movs	r1, #1
 80036f4:	438a      	bics	r2, r1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_TIM_Base_Stop_IT+0x54>)
 8003700:	4013      	ands	r3, r2
 8003702:	d10d      	bne.n	8003720 <HAL_TIM_Base_Stop_IT+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <HAL_TIM_Base_Stop_IT+0x58>)
 800370c:	4013      	ands	r3, r2
 800370e:	d107      	bne.n	8003720 <HAL_TIM_Base_Stop_IT+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2101      	movs	r1, #1
 800371c:	438a      	bics	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	223d      	movs	r2, #61	; 0x3d
 8003724:	2101      	movs	r1, #1
 8003726:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	00001111 	.word	0x00001111
 8003738:	00000444 	.word	0x00000444

0800373c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2202      	movs	r2, #2
 800374c:	4013      	ands	r3, r2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d124      	bne.n	800379c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2202      	movs	r2, #2
 800375a:	4013      	ands	r3, r2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d11d      	bne.n	800379c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2203      	movs	r2, #3
 8003766:	4252      	negs	r2, r2
 8003768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2203      	movs	r2, #3
 8003778:	4013      	ands	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f916 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 8003784:	e007      	b.n	8003796 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f909 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f915 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2204      	movs	r2, #4
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d125      	bne.n	80037f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2204      	movs	r2, #4
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11e      	bne.n	80037f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2205      	movs	r2, #5
 80037be:	4252      	negs	r2, r2
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	23c0      	movs	r3, #192	; 0xc0
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4013      	ands	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f8e9 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 80037de:	e007      	b.n	80037f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f8dc 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 f8e8 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2208      	movs	r2, #8
 80037fe:	4013      	ands	r3, r2
 8003800:	2b08      	cmp	r3, #8
 8003802:	d124      	bne.n	800384e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2208      	movs	r2, #8
 800380c:	4013      	ands	r3, r2
 800380e:	2b08      	cmp	r3, #8
 8003810:	d11d      	bne.n	800384e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2209      	movs	r2, #9
 8003818:	4252      	negs	r2, r2
 800381a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2204      	movs	r2, #4
 8003820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2203      	movs	r2, #3
 800382a:	4013      	ands	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f000 f8bd 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 8003836:	e007      	b.n	8003848 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f000 f8b0 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f8bc 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	2b10      	cmp	r3, #16
 800385a:	d125      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2210      	movs	r2, #16
 8003864:	4013      	ands	r3, r2
 8003866:	2b10      	cmp	r3, #16
 8003868:	d11e      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2211      	movs	r2, #17
 8003870:	4252      	negs	r2, r2
 8003872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2208      	movs	r2, #8
 8003878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	23c0      	movs	r3, #192	; 0xc0
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4013      	ands	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 f890 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 8003890:	e007      	b.n	80038a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 f883 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0018      	movs	r0, r3
 800389e:	f000 f88f 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10f      	bne.n	80038d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2202      	movs	r2, #2
 80038ca:	4252      	negs	r2, r2
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7fd fb3f 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	4013      	ands	r3, r2
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d10f      	bne.n	8003904 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d108      	bne.n	8003904 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2281      	movs	r2, #129	; 0x81
 80038f8:	4252      	negs	r2, r2
 80038fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 f964 	bl	8003bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	401a      	ands	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	429a      	cmp	r2, r3
 8003916:	d10e      	bne.n	8003936 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	4013      	ands	r3, r2
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d107      	bne.n	8003936 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_TIM_IRQHandler+0x260>)
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f953 	bl	8003bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2240      	movs	r2, #64	; 0x40
 800393e:	4013      	ands	r3, r2
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d10f      	bne.n	8003964 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	4013      	ands	r3, r2
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d108      	bne.n	8003964 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2241      	movs	r2, #65	; 0x41
 8003958:	4252      	negs	r2, r2
 800395a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f836 	bl	80039d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2220      	movs	r2, #32
 800396c:	4013      	ands	r3, r2
 800396e:	2b20      	cmp	r3, #32
 8003970:	d10f      	bne.n	8003992 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	4013      	ands	r3, r2
 800397c:	2b20      	cmp	r3, #32
 800397e:	d108      	bne.n	8003992 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2221      	movs	r2, #33	; 0x21
 8003986:	4252      	negs	r2, r2
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	0018      	movs	r0, r3
 800398e:	f000 f915 	bl	8003bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	fffffeff 	.word	0xfffffeff

080039a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a34      	ldr	r2, [pc, #208]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d008      	beq.n	8003a0a <TIM_Base_SetConfig+0x2a>
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	05db      	lsls	r3, r3, #23
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0x2a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <TIM_Base_SetConfig+0xe8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2270      	movs	r2, #112	; 0x70
 8003a0e:	4393      	bics	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d013      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <TIM_Base_SetConfig+0xe8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a24      	ldr	r2, [pc, #144]	; (8003acc <TIM_Base_SetConfig+0xec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <TIM_Base_SetConfig+0xf0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <TIM_Base_SetConfig+0xf4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <TIM_Base_SetConfig+0xf8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <TIM_Base_SetConfig+0xfc>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	001a      	movs	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0xce>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <TIM_Base_SetConfig+0xf0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0xce>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <TIM_Base_SetConfig+0xf4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0xce>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <TIM_Base_SetConfig+0xf8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d103      	bne.n	8003ab6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	615a      	str	r2, [r3, #20]
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40002000 	.word	0x40002000
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	fffffcff 	.word	0xfffffcff

08003ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	223c      	movs	r2, #60	; 0x3c
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e055      	b.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	223c      	movs	r2, #60	; 0x3c
 8003afc:	2101      	movs	r1, #1
 8003afe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	223d      	movs	r2, #61	; 0x3d
 8003b04:	2102      	movs	r1, #2
 8003b06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a23      	ldr	r2, [pc, #140]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2270      	movs	r2, #112	; 0x70
 8003b38:	4393      	bics	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00f      	beq.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	05db      	lsls	r3, r3, #23
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d009      	beq.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a11      	ldr	r2, [pc, #68]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10c      	bne.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	4393      	bics	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	223d      	movs	r2, #61	; 0x3d
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	223c      	movs	r2, #60	; 0x3c
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	ff0fffff 	.word	0xff0fffff
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40014000 	.word	0x40014000

08003bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e046      	b.n	8003c8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2288      	movs	r2, #136	; 0x88
 8003c02:	589b      	ldr	r3, [r3, r2]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2284      	movs	r2, #132	; 0x84
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fd fa50 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2288      	movs	r2, #136	; 0x88
 8003c1c:	2124      	movs	r1, #36	; 0x24
 8003c1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 fc12 	bl	800445c <UART_SetConfig>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e024      	b.n	8003c8c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 fec3 	bl	80049d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	490d      	ldr	r1, [pc, #52]	; (8003c94 <HAL_UART_Init+0xa8>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	212a      	movs	r1, #42	; 0x2a
 8003c6e:	438a      	bics	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 ff5b 	bl	8004b40 <UART_CheckIdleState>
 8003c8a:	0003      	movs	r3, r0
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b002      	add	sp, #8
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	ffffb7ff 	.word	0xffffb7ff

08003c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	1dbb      	adds	r3, r7, #6
 8003ca6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2288      	movs	r2, #136	; 0x88
 8003cac:	589b      	ldr	r3, [r3, r2]
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d000      	beq.n	8003cb4 <HAL_UART_Transmit+0x1c>
 8003cb2:	e088      	b.n	8003dc6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_UART_Transmit+0x2a>
 8003cba:	1dbb      	adds	r3, r7, #6
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e080      	b.n	8003dc8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	015b      	lsls	r3, r3, #5
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d109      	bne.n	8003ce6 <HAL_UART_Transmit+0x4e>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e070      	b.n	8003dc8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2290      	movs	r2, #144	; 0x90
 8003cea:	2100      	movs	r1, #0
 8003cec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2288      	movs	r2, #136	; 0x88
 8003cf2:	2121      	movs	r1, #33	; 0x21
 8003cf4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fbf3 	bl	80014e0 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1dba      	adds	r2, r7, #6
 8003d02:	2154      	movs	r1, #84	; 0x54
 8003d04:	8812      	ldrh	r2, [r2, #0]
 8003d06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1dba      	adds	r2, r7, #6
 8003d0c:	2156      	movs	r1, #86	; 0x56
 8003d0e:	8812      	ldrh	r2, [r2, #0]
 8003d10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	015b      	lsls	r3, r3, #5
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x98>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e02c      	b.n	8003d94 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	0013      	movs	r3, r2
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	f000 ff48 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e039      	b.n	8003dc8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	001a      	movs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	05d2      	lsls	r2, r2, #23
 8003d66:	0dd2      	lsrs	r2, r2, #23
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e007      	b.n	8003d82 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2256      	movs	r2, #86	; 0x56
 8003d86:	5a9b      	ldrh	r3, [r3, r2]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b299      	uxth	r1, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2256      	movs	r2, #86	; 0x56
 8003d92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2256      	movs	r2, #86	; 0x56
 8003d98:	5a9b      	ldrh	r3, [r3, r2]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1cc      	bne.n	8003d3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	0013      	movs	r3, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	2140      	movs	r1, #64	; 0x40
 8003dae:	f000 ff15 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d001      	beq.n	8003dba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e006      	b.n	8003dc8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2288      	movs	r2, #136	; 0x88
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b008      	add	sp, #32
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd0:	b5b0      	push	{r4, r5, r7, lr}
 8003dd2:	b0aa      	sub	sp, #168	; 0xa8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	22a4      	movs	r2, #164	; 0xa4
 8003de0:	18b9      	adds	r1, r7, r2
 8003de2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	20a0      	movs	r0, #160	; 0xa0
 8003dec:	1839      	adds	r1, r7, r0
 8003dee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	249c      	movs	r4, #156	; 0x9c
 8003df8:	1939      	adds	r1, r7, r4
 8003dfa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	18bb      	adds	r3, r7, r2
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4aa2      	ldr	r2, [pc, #648]	; (800408c <HAL_UART_IRQHandler+0x2bc>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	2298      	movs	r2, #152	; 0x98
 8003e08:	18bd      	adds	r5, r7, r2
 8003e0a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003e0c:	18bb      	adds	r3, r7, r2
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11a      	bne.n	8003e4a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d015      	beq.n	8003e4a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e1e:	183b      	adds	r3, r7, r0
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	4013      	ands	r3, r2
 8003e26:	d105      	bne.n	8003e34 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e28:	193b      	adds	r3, r7, r4
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	055b      	lsls	r3, r3, #21
 8003e30:	4013      	ands	r3, r2
 8003e32:	d00a      	beq.n	8003e4a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d100      	bne.n	8003e3e <HAL_UART_IRQHandler+0x6e>
 8003e3c:	e2dc      	b.n	80043f8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	0010      	movs	r0, r2
 8003e46:	4798      	blx	r3
      }
      return;
 8003e48:	e2d6      	b.n	80043f8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e4a:	2398      	movs	r3, #152	; 0x98
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d100      	bne.n	8003e56 <HAL_UART_IRQHandler+0x86>
 8003e54:	e122      	b.n	800409c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e56:	239c      	movs	r3, #156	; 0x9c
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a8c      	ldr	r2, [pc, #560]	; (8004090 <HAL_UART_IRQHandler+0x2c0>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d106      	bne.n	8003e70 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e62:	23a0      	movs	r3, #160	; 0xa0
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a8a      	ldr	r2, [pc, #552]	; (8004094 <HAL_UART_IRQHandler+0x2c4>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d100      	bne.n	8003e70 <HAL_UART_IRQHandler+0xa0>
 8003e6e:	e115      	b.n	800409c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e70:	23a4      	movs	r3, #164	; 0xa4
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2201      	movs	r2, #1
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d012      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xd2>
 8003e7c:	23a0      	movs	r3, #160	; 0xa0
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2290      	movs	r2, #144	; 0x90
 8003e96:	589b      	ldr	r3, [r3, r2]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2190      	movs	r1, #144	; 0x90
 8003ea0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea2:	23a4      	movs	r3, #164	; 0xa4
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d011      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x102>
 8003eae:	239c      	movs	r3, #156	; 0x9c
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2290      	movs	r2, #144	; 0x90
 8003ec6:	589b      	ldr	r3, [r3, r2]
 8003ec8:	2204      	movs	r2, #4
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2190      	movs	r1, #144	; 0x90
 8003ed0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed2:	23a4      	movs	r3, #164	; 0xa4
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	4013      	ands	r3, r2
 8003edc:	d011      	beq.n	8003f02 <HAL_UART_IRQHandler+0x132>
 8003ede:	239c      	movs	r3, #156	; 0x9c
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d00b      	beq.n	8003f02 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2290      	movs	r2, #144	; 0x90
 8003ef6:	589b      	ldr	r3, [r3, r2]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2190      	movs	r1, #144	; 0x90
 8003f00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f02:	23a4      	movs	r3, #164	; 0xa4
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d017      	beq.n	8003f3e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f0e:	23a0      	movs	r3, #160	; 0xa0
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2220      	movs	r2, #32
 8003f16:	4013      	ands	r3, r2
 8003f18:	d105      	bne.n	8003f26 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f1a:	239c      	movs	r3, #156	; 0x9c
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5b      	ldr	r2, [pc, #364]	; (8004090 <HAL_UART_IRQHandler+0x2c0>)
 8003f22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f24:	d00b      	beq.n	8003f3e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2290      	movs	r2, #144	; 0x90
 8003f32:	589b      	ldr	r3, [r3, r2]
 8003f34:	2208      	movs	r2, #8
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2190      	movs	r1, #144	; 0x90
 8003f3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f3e:	23a4      	movs	r3, #164	; 0xa4
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_UART_IRQHandler+0x1a4>
 8003f4c:	23a0      	movs	r3, #160	; 0xa0
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	04db      	lsls	r3, r3, #19
 8003f56:	4013      	ands	r3, r2
 8003f58:	d00c      	beq.n	8003f74 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2290      	movs	r2, #144	; 0x90
 8003f68:	589b      	ldr	r3, [r3, r2]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2190      	movs	r1, #144	; 0x90
 8003f72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2290      	movs	r2, #144	; 0x90
 8003f78:	589b      	ldr	r3, [r3, r2]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d100      	bne.n	8003f80 <HAL_UART_IRQHandler+0x1b0>
 8003f7e:	e23d      	b.n	80043fc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f80:	23a4      	movs	r3, #164	; 0xa4
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2220      	movs	r2, #32
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d015      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f8c:	23a0      	movs	r3, #160	; 0xa0
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2220      	movs	r2, #32
 8003f94:	4013      	ands	r3, r2
 8003f96:	d106      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f98:	239c      	movs	r3, #156	; 0x9c
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	055b      	lsls	r3, r3, #21
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d008      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	0010      	movs	r0, r2
 8003fb6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2290      	movs	r2, #144	; 0x90
 8003fbc:	589b      	ldr	r3, [r3, r2]
 8003fbe:	2194      	movs	r1, #148	; 0x94
 8003fc0:	187a      	adds	r2, r7, r1
 8003fc2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d004      	beq.n	8003fdc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fd2:	187b      	adds	r3, r7, r1
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2228      	movs	r2, #40	; 0x28
 8003fd8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fda:	d04c      	beq.n	8004076 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 ffaa 	bl	8004f38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d13c      	bne.n	800406c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffa:	2090      	movs	r0, #144	; 0x90
 8003ffc:	183a      	adds	r2, r7, r0
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	2301      	movs	r3, #1
 8004002:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2140      	movs	r1, #64	; 0x40
 8004018:	438a      	bics	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	183b      	adds	r3, r7, r0
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	589b      	ldr	r3, [r3, r2]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d016      	beq.n	8004062 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	589b      	ldr	r3, [r3, r2]
 800403a:	4a17      	ldr	r2, [pc, #92]	; (8004098 <HAL_UART_IRQHandler+0x2c8>)
 800403c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2280      	movs	r2, #128	; 0x80
 8004042:	589b      	ldr	r3, [r3, r2]
 8004044:	0018      	movs	r0, r3
 8004046:	f7fd fcc9 	bl	80019dc <HAL_DMA_Abort_IT>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d01c      	beq.n	8004088 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2280      	movs	r2, #128	; 0x80
 8004052:	589b      	ldr	r3, [r3, r2]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	5852      	ldr	r2, [r2, r1]
 800405c:	0010      	movs	r0, r2
 800405e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e012      	b.n	8004088 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f9f1 	bl	800444c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406a:	e00d      	b.n	8004088 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f9ec 	bl	800444c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	e008      	b.n	8004088 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f000 f9e7 	bl	800444c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2290      	movs	r2, #144	; 0x90
 8004082:	2100      	movs	r1, #0
 8004084:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004086:	e1b9      	b.n	80043fc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	46c0      	nop			; (mov r8, r8)
    return;
 800408a:	e1b7      	b.n	80043fc <HAL_UART_IRQHandler+0x62c>
 800408c:	0000080f 	.word	0x0000080f
 8004090:	10000001 	.word	0x10000001
 8004094:	04000120 	.word	0x04000120
 8004098:	080051fd 	.word	0x080051fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d000      	beq.n	80040a6 <HAL_UART_IRQHandler+0x2d6>
 80040a4:	e13e      	b.n	8004324 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040a6:	23a4      	movs	r3, #164	; 0xa4
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2210      	movs	r2, #16
 80040ae:	4013      	ands	r3, r2
 80040b0:	d100      	bne.n	80040b4 <HAL_UART_IRQHandler+0x2e4>
 80040b2:	e137      	b.n	8004324 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040b4:	23a0      	movs	r3, #160	; 0xa0
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2210      	movs	r2, #16
 80040bc:	4013      	ands	r3, r2
 80040be:	d100      	bne.n	80040c2 <HAL_UART_IRQHandler+0x2f2>
 80040c0:	e130      	b.n	8004324 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2210      	movs	r2, #16
 80040c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2240      	movs	r2, #64	; 0x40
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d000      	beq.n	80040da <HAL_UART_IRQHandler+0x30a>
 80040d8:	e0a4      	b.n	8004224 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2280      	movs	r2, #128	; 0x80
 80040de:	589b      	ldr	r3, [r3, r2]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	217e      	movs	r1, #126	; 0x7e
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d100      	bne.n	80040f4 <HAL_UART_IRQHandler+0x324>
 80040f2:	e185      	b.n	8004400 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	225c      	movs	r2, #92	; 0x5c
 80040f8:	5a9b      	ldrh	r3, [r3, r2]
 80040fa:	187a      	adds	r2, r7, r1
 80040fc:	8812      	ldrh	r2, [r2, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d300      	bcc.n	8004104 <HAL_UART_IRQHandler+0x334>
 8004102:	e17d      	b.n	8004400 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	187a      	adds	r2, r7, r1
 8004108:	215e      	movs	r1, #94	; 0x5e
 800410a:	8812      	ldrh	r2, [r2, #0]
 800410c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2280      	movs	r2, #128	; 0x80
 8004112:	589b      	ldr	r3, [r3, r2]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2220      	movs	r2, #32
 800411a:	4013      	ands	r3, r2
 800411c:	d170      	bne.n	8004200 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411e:	f3ef 8310 	mrs	r3, PRIMASK
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004126:	67bb      	str	r3, [r7, #120]	; 0x78
 8004128:	2301      	movs	r3, #1
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412e:	f383 8810 	msr	PRIMASK, r3
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	49b4      	ldr	r1, [pc, #720]	; (8004410 <HAL_UART_IRQHandler+0x640>)
 8004140:	400a      	ands	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	f383 8810 	msr	PRIMASK, r3
}
 800414e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004150:	f3ef 8310 	mrs	r3, PRIMASK
 8004154:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004158:	677b      	str	r3, [r7, #116]	; 0x74
 800415a:	2301      	movs	r3, #1
 800415c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004160:	f383 8810 	msr	PRIMASK, r3
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2101      	movs	r1, #1
 8004172:	438a      	bics	r2, r1
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417c:	f383 8810 	msr	PRIMASK, r3
}
 8004180:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004182:	f3ef 8310 	mrs	r3, PRIMASK
 8004186:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004188:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418a:	673b      	str	r3, [r7, #112]	; 0x70
 800418c:	2301      	movs	r3, #1
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2140      	movs	r1, #64	; 0x40
 80041a4:	438a      	bics	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	f383 8810 	msr	PRIMASK, r3
}
 80041b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	228c      	movs	r2, #140	; 0x8c
 80041b8:	2120      	movs	r1, #32
 80041ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80041c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041cc:	2301      	movs	r3, #1
 80041ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2110      	movs	r1, #16
 80041e4:	438a      	bics	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	589b      	ldr	r3, [r3, r2]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7fd fb8c 	bl	8001918 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	225c      	movs	r2, #92	; 0x5c
 800420a:	5a9a      	ldrh	r2, [r3, r2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	215e      	movs	r1, #94	; 0x5e
 8004210:	5a5b      	ldrh	r3, [r3, r1]
 8004212:	b29b      	uxth	r3, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	0011      	movs	r1, r2
 800421c:	0018      	movs	r0, r3
 800421e:	f7fc fdaf 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004222:	e0ed      	b.n	8004400 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	225c      	movs	r2, #92	; 0x5c
 8004228:	5a99      	ldrh	r1, [r3, r2]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	225e      	movs	r2, #94	; 0x5e
 800422e:	5a9b      	ldrh	r3, [r3, r2]
 8004230:	b29a      	uxth	r2, r3
 8004232:	208e      	movs	r0, #142	; 0x8e
 8004234:	183b      	adds	r3, r7, r0
 8004236:	1a8a      	subs	r2, r1, r2
 8004238:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	225e      	movs	r2, #94	; 0x5e
 800423e:	5a9b      	ldrh	r3, [r3, r2]
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d100      	bne.n	8004248 <HAL_UART_IRQHandler+0x478>
 8004246:	e0dd      	b.n	8004404 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004248:	183b      	adds	r3, r7, r0
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d100      	bne.n	8004252 <HAL_UART_IRQHandler+0x482>
 8004250:	e0d8      	b.n	8004404 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004252:	f3ef 8310 	mrs	r3, PRIMASK
 8004256:	60fb      	str	r3, [r7, #12]
  return(result);
 8004258:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800425a:	2488      	movs	r4, #136	; 0x88
 800425c:	193a      	adds	r2, r7, r4
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	2301      	movs	r3, #1
 8004262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f383 8810 	msr	PRIMASK, r3
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4967      	ldr	r1, [pc, #412]	; (8004414 <HAL_UART_IRQHandler+0x644>)
 8004278:	400a      	ands	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	193b      	adds	r3, r7, r4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428a:	f3ef 8310 	mrs	r3, PRIMASK
 800428e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004290:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004292:	2484      	movs	r4, #132	; 0x84
 8004294:	193a      	adds	r2, r7, r4
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	2301      	movs	r3, #1
 800429a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	495a      	ldr	r1, [pc, #360]	; (8004418 <HAL_UART_IRQHandler+0x648>)
 80042b0:	400a      	ands	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	193b      	adds	r3, r7, r4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	228c      	movs	r2, #140	; 0x8c
 80042c6:	2120      	movs	r1, #32
 80042c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d6:	f3ef 8310 	mrs	r3, PRIMASK
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	2480      	movs	r4, #128	; 0x80
 80042e0:	193a      	adds	r2, r7, r4
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	2301      	movs	r3, #1
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2110      	movs	r1, #16
 80042fc:	438a      	bics	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	193b      	adds	r3, r7, r4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	f383 8810 	msr	PRIMASK, r3
}
 800430c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004314:	183b      	adds	r3, r7, r0
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0011      	movs	r1, r2
 800431c:	0018      	movs	r0, r3
 800431e:	f7fc fd2f 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004322:	e06f      	b.n	8004404 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004324:	23a4      	movs	r3, #164	; 0xa4
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	035b      	lsls	r3, r3, #13
 800432e:	4013      	ands	r3, r2
 8004330:	d010      	beq.n	8004354 <HAL_UART_IRQHandler+0x584>
 8004332:	239c      	movs	r3, #156	; 0x9c
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	03db      	lsls	r3, r3, #15
 800433c:	4013      	ands	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2280      	movs	r2, #128	; 0x80
 8004346:	0352      	lsls	r2, r2, #13
 8004348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0018      	movs	r0, r3
 800434e:	f000 ff98 	bl	8005282 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004352:	e05a      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004354:	23a4      	movs	r3, #164	; 0xa4
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2280      	movs	r2, #128	; 0x80
 800435c:	4013      	ands	r3, r2
 800435e:	d016      	beq.n	800438e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004360:	23a0      	movs	r3, #160	; 0xa0
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	4013      	ands	r3, r2
 800436a:	d106      	bne.n	800437a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800436c:	239c      	movs	r3, #156	; 0x9c
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	4013      	ands	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437e:	2b00      	cmp	r3, #0
 8004380:	d042      	beq.n	8004408 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	0010      	movs	r0, r2
 800438a:	4798      	blx	r3
    }
    return;
 800438c:	e03c      	b.n	8004408 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800438e:	23a4      	movs	r3, #164	; 0xa4
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2240      	movs	r2, #64	; 0x40
 8004396:	4013      	ands	r3, r2
 8004398:	d00a      	beq.n	80043b0 <HAL_UART_IRQHandler+0x5e0>
 800439a:	23a0      	movs	r3, #160	; 0xa0
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2240      	movs	r2, #64	; 0x40
 80043a2:	4013      	ands	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 ff3e 	bl	800522a <UART_EndTransmit_IT>
    return;
 80043ae:	e02c      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043b0:	23a4      	movs	r3, #164	; 0xa4
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	4013      	ands	r3, r2
 80043bc:	d00b      	beq.n	80043d6 <HAL_UART_IRQHandler+0x606>
 80043be:	23a0      	movs	r3, #160	; 0xa0
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	05db      	lsls	r3, r3, #23
 80043c8:	4013      	ands	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 ff67 	bl	80052a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043d4:	e019      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043d6:	23a4      	movs	r3, #164	; 0xa4
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	045b      	lsls	r3, r3, #17
 80043e0:	4013      	ands	r3, r2
 80043e2:	d012      	beq.n	800440a <HAL_UART_IRQHandler+0x63a>
 80043e4:	23a0      	movs	r3, #160	; 0xa0
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da0d      	bge.n	800440a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 ff4e 	bl	8005292 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043f6:	e008      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
      return;
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	e006      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
    return;
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	e004      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
      return;
 8004400:	46c0      	nop			; (mov r8, r8)
 8004402:	e002      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
      return;
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	e000      	b.n	800440a <HAL_UART_IRQHandler+0x63a>
    return;
 8004408:	46c0      	nop			; (mov r8, r8)
  }
}
 800440a:	46bd      	mov	sp, r7
 800440c:	b02a      	add	sp, #168	; 0xa8
 800440e:	bdb0      	pop	{r4, r5, r7, pc}
 8004410:	fffffeff 	.word	0xfffffeff
 8004414:	fffffedf 	.word	0xfffffedf
 8004418:	effffffe 	.word	0xeffffffe

0800441c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b002      	add	sp, #8
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b002      	add	sp, #8
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	b5b0      	push	{r4, r5, r7, lr}
 800445e:	b090      	sub	sp, #64	; 0x40
 8004460:	af00      	add	r7, sp, #0
 8004462:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004464:	231a      	movs	r3, #26
 8004466:	2220      	movs	r2, #32
 8004468:	189b      	adds	r3, r3, r2
 800446a:	19db      	adds	r3, r3, r7
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	431a      	orrs	r2, r3
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	431a      	orrs	r2, r3
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	4313      	orrs	r3, r2
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4aaf      	ldr	r2, [pc, #700]	; (800474c <UART_SetConfig+0x2f0>)
 8004490:	4013      	ands	r3, r2
 8004492:	0019      	movs	r1, r3
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449a:	430b      	orrs	r3, r1
 800449c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4aaa      	ldr	r2, [pc, #680]	; (8004750 <UART_SetConfig+0x2f4>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	0018      	movs	r0, r3
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	68d9      	ldr	r1, [r3, #12]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	0003      	movs	r3, r0
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4aa4      	ldr	r2, [pc, #656]	; (8004754 <UART_SetConfig+0x2f8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ce:	4313      	orrs	r3, r2
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a9f      	ldr	r2, [pc, #636]	; (8004758 <UART_SetConfig+0x2fc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	220f      	movs	r2, #15
 80044f0:	4393      	bics	r3, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	0003      	movs	r3, r0
 80044fe:	430b      	orrs	r3, r1
 8004500:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a95      	ldr	r2, [pc, #596]	; (800475c <UART_SetConfig+0x300>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d131      	bne.n	8004570 <UART_SetConfig+0x114>
 800450c:	4b94      	ldr	r3, [pc, #592]	; (8004760 <UART_SetConfig+0x304>)
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	2203      	movs	r2, #3
 8004512:	4013      	ands	r3, r2
 8004514:	2b03      	cmp	r3, #3
 8004516:	d01d      	beq.n	8004554 <UART_SetConfig+0xf8>
 8004518:	d823      	bhi.n	8004562 <UART_SetConfig+0x106>
 800451a:	2b02      	cmp	r3, #2
 800451c:	d00c      	beq.n	8004538 <UART_SetConfig+0xdc>
 800451e:	d820      	bhi.n	8004562 <UART_SetConfig+0x106>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <UART_SetConfig+0xce>
 8004524:	2b01      	cmp	r3, #1
 8004526:	d00e      	beq.n	8004546 <UART_SetConfig+0xea>
 8004528:	e01b      	b.n	8004562 <UART_SetConfig+0x106>
 800452a:	231b      	movs	r3, #27
 800452c:	2220      	movs	r2, #32
 800452e:	189b      	adds	r3, r3, r2
 8004530:	19db      	adds	r3, r3, r7
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	e0b4      	b.n	80046a2 <UART_SetConfig+0x246>
 8004538:	231b      	movs	r3, #27
 800453a:	2220      	movs	r2, #32
 800453c:	189b      	adds	r3, r3, r2
 800453e:	19db      	adds	r3, r3, r7
 8004540:	2202      	movs	r2, #2
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e0ad      	b.n	80046a2 <UART_SetConfig+0x246>
 8004546:	231b      	movs	r3, #27
 8004548:	2220      	movs	r2, #32
 800454a:	189b      	adds	r3, r3, r2
 800454c:	19db      	adds	r3, r3, r7
 800454e:	2204      	movs	r2, #4
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e0a6      	b.n	80046a2 <UART_SetConfig+0x246>
 8004554:	231b      	movs	r3, #27
 8004556:	2220      	movs	r2, #32
 8004558:	189b      	adds	r3, r3, r2
 800455a:	19db      	adds	r3, r3, r7
 800455c:	2208      	movs	r2, #8
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e09f      	b.n	80046a2 <UART_SetConfig+0x246>
 8004562:	231b      	movs	r3, #27
 8004564:	2220      	movs	r2, #32
 8004566:	189b      	adds	r3, r3, r2
 8004568:	19db      	adds	r3, r3, r7
 800456a:	2210      	movs	r2, #16
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e098      	b.n	80046a2 <UART_SetConfig+0x246>
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a7b      	ldr	r2, [pc, #492]	; (8004764 <UART_SetConfig+0x308>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d131      	bne.n	80045de <UART_SetConfig+0x182>
 800457a:	4b79      	ldr	r3, [pc, #484]	; (8004760 <UART_SetConfig+0x304>)
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	220c      	movs	r2, #12
 8004580:	4013      	ands	r3, r2
 8004582:	2b0c      	cmp	r3, #12
 8004584:	d01d      	beq.n	80045c2 <UART_SetConfig+0x166>
 8004586:	d823      	bhi.n	80045d0 <UART_SetConfig+0x174>
 8004588:	2b08      	cmp	r3, #8
 800458a:	d00c      	beq.n	80045a6 <UART_SetConfig+0x14a>
 800458c:	d820      	bhi.n	80045d0 <UART_SetConfig+0x174>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <UART_SetConfig+0x13c>
 8004592:	2b04      	cmp	r3, #4
 8004594:	d00e      	beq.n	80045b4 <UART_SetConfig+0x158>
 8004596:	e01b      	b.n	80045d0 <UART_SetConfig+0x174>
 8004598:	231b      	movs	r3, #27
 800459a:	2220      	movs	r2, #32
 800459c:	189b      	adds	r3, r3, r2
 800459e:	19db      	adds	r3, r3, r7
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e07d      	b.n	80046a2 <UART_SetConfig+0x246>
 80045a6:	231b      	movs	r3, #27
 80045a8:	2220      	movs	r2, #32
 80045aa:	189b      	adds	r3, r3, r2
 80045ac:	19db      	adds	r3, r3, r7
 80045ae:	2202      	movs	r2, #2
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e076      	b.n	80046a2 <UART_SetConfig+0x246>
 80045b4:	231b      	movs	r3, #27
 80045b6:	2220      	movs	r2, #32
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	19db      	adds	r3, r3, r7
 80045bc:	2204      	movs	r2, #4
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e06f      	b.n	80046a2 <UART_SetConfig+0x246>
 80045c2:	231b      	movs	r3, #27
 80045c4:	2220      	movs	r2, #32
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	19db      	adds	r3, r3, r7
 80045ca:	2208      	movs	r2, #8
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e068      	b.n	80046a2 <UART_SetConfig+0x246>
 80045d0:	231b      	movs	r3, #27
 80045d2:	2220      	movs	r2, #32
 80045d4:	189b      	adds	r3, r3, r2
 80045d6:	19db      	adds	r3, r3, r7
 80045d8:	2210      	movs	r2, #16
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e061      	b.n	80046a2 <UART_SetConfig+0x246>
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a61      	ldr	r2, [pc, #388]	; (8004768 <UART_SetConfig+0x30c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d106      	bne.n	80045f6 <UART_SetConfig+0x19a>
 80045e8:	231b      	movs	r3, #27
 80045ea:	2220      	movs	r2, #32
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	19db      	adds	r3, r3, r7
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e055      	b.n	80046a2 <UART_SetConfig+0x246>
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5c      	ldr	r2, [pc, #368]	; (800476c <UART_SetConfig+0x310>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d106      	bne.n	800460e <UART_SetConfig+0x1b2>
 8004600:	231b      	movs	r3, #27
 8004602:	2220      	movs	r2, #32
 8004604:	189b      	adds	r3, r3, r2
 8004606:	19db      	adds	r3, r3, r7
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e049      	b.n	80046a2 <UART_SetConfig+0x246>
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a50      	ldr	r2, [pc, #320]	; (8004754 <UART_SetConfig+0x2f8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d13e      	bne.n	8004696 <UART_SetConfig+0x23a>
 8004618:	4b51      	ldr	r3, [pc, #324]	; (8004760 <UART_SetConfig+0x304>)
 800461a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800461c:	23c0      	movs	r3, #192	; 0xc0
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	4013      	ands	r3, r2
 8004622:	22c0      	movs	r2, #192	; 0xc0
 8004624:	0112      	lsls	r2, r2, #4
 8004626:	4293      	cmp	r3, r2
 8004628:	d027      	beq.n	800467a <UART_SetConfig+0x21e>
 800462a:	22c0      	movs	r2, #192	; 0xc0
 800462c:	0112      	lsls	r2, r2, #4
 800462e:	4293      	cmp	r3, r2
 8004630:	d82a      	bhi.n	8004688 <UART_SetConfig+0x22c>
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	4293      	cmp	r3, r2
 8004638:	d011      	beq.n	800465e <UART_SetConfig+0x202>
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	4293      	cmp	r3, r2
 8004640:	d822      	bhi.n	8004688 <UART_SetConfig+0x22c>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <UART_SetConfig+0x1f4>
 8004646:	2280      	movs	r2, #128	; 0x80
 8004648:	00d2      	lsls	r2, r2, #3
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <UART_SetConfig+0x210>
 800464e:	e01b      	b.n	8004688 <UART_SetConfig+0x22c>
 8004650:	231b      	movs	r3, #27
 8004652:	2220      	movs	r2, #32
 8004654:	189b      	adds	r3, r3, r2
 8004656:	19db      	adds	r3, r3, r7
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e021      	b.n	80046a2 <UART_SetConfig+0x246>
 800465e:	231b      	movs	r3, #27
 8004660:	2220      	movs	r2, #32
 8004662:	189b      	adds	r3, r3, r2
 8004664:	19db      	adds	r3, r3, r7
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e01a      	b.n	80046a2 <UART_SetConfig+0x246>
 800466c:	231b      	movs	r3, #27
 800466e:	2220      	movs	r2, #32
 8004670:	189b      	adds	r3, r3, r2
 8004672:	19db      	adds	r3, r3, r7
 8004674:	2204      	movs	r2, #4
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e013      	b.n	80046a2 <UART_SetConfig+0x246>
 800467a:	231b      	movs	r3, #27
 800467c:	2220      	movs	r2, #32
 800467e:	189b      	adds	r3, r3, r2
 8004680:	19db      	adds	r3, r3, r7
 8004682:	2208      	movs	r2, #8
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e00c      	b.n	80046a2 <UART_SetConfig+0x246>
 8004688:	231b      	movs	r3, #27
 800468a:	2220      	movs	r2, #32
 800468c:	189b      	adds	r3, r3, r2
 800468e:	19db      	adds	r3, r3, r7
 8004690:	2210      	movs	r2, #16
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e005      	b.n	80046a2 <UART_SetConfig+0x246>
 8004696:	231b      	movs	r3, #27
 8004698:	2220      	movs	r2, #32
 800469a:	189b      	adds	r3, r3, r2
 800469c:	19db      	adds	r3, r3, r7
 800469e:	2210      	movs	r2, #16
 80046a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2b      	ldr	r2, [pc, #172]	; (8004754 <UART_SetConfig+0x2f8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d000      	beq.n	80046ae <UART_SetConfig+0x252>
 80046ac:	e0a9      	b.n	8004802 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ae:	231b      	movs	r3, #27
 80046b0:	2220      	movs	r2, #32
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	19db      	adds	r3, r3, r7
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d015      	beq.n	80046e8 <UART_SetConfig+0x28c>
 80046bc:	dc18      	bgt.n	80046f0 <UART_SetConfig+0x294>
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d00d      	beq.n	80046de <UART_SetConfig+0x282>
 80046c2:	dc15      	bgt.n	80046f0 <UART_SetConfig+0x294>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <UART_SetConfig+0x272>
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d005      	beq.n	80046d8 <UART_SetConfig+0x27c>
 80046cc:	e010      	b.n	80046f0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ce:	f7fe fa13 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 80046d2:	0003      	movs	r3, r0
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046d6:	e014      	b.n	8004702 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <UART_SetConfig+0x314>)
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046dc:	e011      	b.n	8004702 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fe f97f 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 80046e2:	0003      	movs	r3, r0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046e6:	e00c      	b.n	8004702 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046ee:	e008      	b.n	8004702 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80046f4:	231a      	movs	r3, #26
 80046f6:	2220      	movs	r2, #32
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	19db      	adds	r3, r3, r7
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
        break;
 8004700:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d100      	bne.n	800470a <UART_SetConfig+0x2ae>
 8004708:	e14b      	b.n	80049a2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <UART_SetConfig+0x318>)
 8004710:	0052      	lsls	r2, r2, #1
 8004712:	5ad3      	ldrh	r3, [r2, r3]
 8004714:	0019      	movs	r1, r3
 8004716:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004718:	f7fb fd06 	bl	8000128 <__udivsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	0013      	movs	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	189b      	adds	r3, r3, r2
 800472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472c:	429a      	cmp	r2, r3
 800472e:	d305      	bcc.n	800473c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004738:	429a      	cmp	r2, r3
 800473a:	d91d      	bls.n	8004778 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800473c:	231a      	movs	r3, #26
 800473e:	2220      	movs	r2, #32
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e12b      	b.n	80049a2 <UART_SetConfig+0x546>
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	cfff69f3 	.word	0xcfff69f3
 8004750:	ffffcfff 	.word	0xffffcfff
 8004754:	40008000 	.word	0x40008000
 8004758:	11fff4ff 	.word	0x11fff4ff
 800475c:	40013800 	.word	0x40013800
 8004760:	40021000 	.word	0x40021000
 8004764:	40004400 	.word	0x40004400
 8004768:	40004800 	.word	0x40004800
 800476c:	40004c00 	.word	0x40004c00
 8004770:	00f42400 	.word	0x00f42400
 8004774:	0800610c 	.word	0x0800610c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004784:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <UART_SetConfig+0x574>)
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	5ad3      	ldrh	r3, [r2, r3]
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	69b8      	ldr	r0, [r7, #24]
 8004796:	69f9      	ldr	r1, [r7, #28]
 8004798:	f7fb fe3c 	bl	8000414 <__aeabi_uldivmod>
 800479c:	0002      	movs	r2, r0
 800479e:	000b      	movs	r3, r1
 80047a0:	0e11      	lsrs	r1, r2, #24
 80047a2:	021d      	lsls	r5, r3, #8
 80047a4:	430d      	orrs	r5, r1
 80047a6:	0214      	lsls	r4, r2, #8
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68b8      	ldr	r0, [r7, #8]
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	1900      	adds	r0, r0, r4
 80047ba:	4169      	adcs	r1, r5
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f7fb fe23 	bl	8000414 <__aeabi_uldivmod>
 80047ce:	0002      	movs	r2, r0
 80047d0:	000b      	movs	r3, r1
 80047d2:	0013      	movs	r3, r2
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d8:	23c0      	movs	r3, #192	; 0xc0
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	429a      	cmp	r2, r3
 80047de:	d309      	bcc.n	80047f4 <UART_SetConfig+0x398>
 80047e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	035b      	lsls	r3, r3, #13
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d204      	bcs.n	80047f4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e0d6      	b.n	80049a2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80047f4:	231a      	movs	r3, #26
 80047f6:	2220      	movs	r2, #32
 80047f8:	189b      	adds	r3, r3, r2
 80047fa:	19db      	adds	r3, r3, r7
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e0cf      	b.n	80049a2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	429a      	cmp	r2, r3
 800480c:	d000      	beq.n	8004810 <UART_SetConfig+0x3b4>
 800480e:	e070      	b.n	80048f2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004810:	231b      	movs	r3, #27
 8004812:	2220      	movs	r2, #32
 8004814:	189b      	adds	r3, r3, r2
 8004816:	19db      	adds	r3, r3, r7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d015      	beq.n	800484a <UART_SetConfig+0x3ee>
 800481e:	dc18      	bgt.n	8004852 <UART_SetConfig+0x3f6>
 8004820:	2b04      	cmp	r3, #4
 8004822:	d00d      	beq.n	8004840 <UART_SetConfig+0x3e4>
 8004824:	dc15      	bgt.n	8004852 <UART_SetConfig+0x3f6>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <UART_SetConfig+0x3d4>
 800482a:	2b02      	cmp	r3, #2
 800482c:	d005      	beq.n	800483a <UART_SetConfig+0x3de>
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004830:	f7fe f962 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8004834:	0003      	movs	r3, r0
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004838:	e014      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483a:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <UART_SetConfig+0x578>)
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800483e:	e011      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004840:	f7fe f8ce 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8004844:	0003      	movs	r3, r0
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004848:	e00c      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004850:	e008      	b.n	8004864 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004856:	231a      	movs	r3, #26
 8004858:	2220      	movs	r2, #32
 800485a:	189b      	adds	r3, r3, r2
 800485c:	19db      	adds	r3, r3, r7
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]
        break;
 8004862:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	2b00      	cmp	r3, #0
 8004868:	d100      	bne.n	800486c <UART_SetConfig+0x410>
 800486a:	e09a      	b.n	80049a2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004870:	4b57      	ldr	r3, [pc, #348]	; (80049d0 <UART_SetConfig+0x574>)
 8004872:	0052      	lsls	r2, r2, #1
 8004874:	5ad3      	ldrh	r3, [r2, r3]
 8004876:	0019      	movs	r1, r3
 8004878:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800487a:	f7fb fc55 	bl	8000128 <__udivsi3>
 800487e:	0003      	movs	r3, r0
 8004880:	005a      	lsls	r2, r3, #1
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	18d2      	adds	r2, r2, r3
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f7fb fc49 	bl	8000128 <__udivsi3>
 8004896:	0003      	movs	r3, r0
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d921      	bls.n	80048e4 <UART_SetConfig+0x488>
 80048a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	025b      	lsls	r3, r3, #9
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d21c      	bcs.n	80048e4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	200e      	movs	r0, #14
 80048b0:	2420      	movs	r4, #32
 80048b2:	1903      	adds	r3, r0, r4
 80048b4:	19db      	adds	r3, r3, r7
 80048b6:	210f      	movs	r1, #15
 80048b8:	438a      	bics	r2, r1
 80048ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2207      	movs	r2, #7
 80048c4:	4013      	ands	r3, r2
 80048c6:	b299      	uxth	r1, r3
 80048c8:	1903      	adds	r3, r0, r4
 80048ca:	19db      	adds	r3, r3, r7
 80048cc:	1902      	adds	r2, r0, r4
 80048ce:	19d2      	adds	r2, r2, r7
 80048d0:	8812      	ldrh	r2, [r2, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	1902      	adds	r2, r0, r4
 80048dc:	19d2      	adds	r2, r2, r7
 80048de:	8812      	ldrh	r2, [r2, #0]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	e05e      	b.n	80049a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048e4:	231a      	movs	r3, #26
 80048e6:	2220      	movs	r2, #32
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	19db      	adds	r3, r3, r7
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e057      	b.n	80049a2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048f2:	231b      	movs	r3, #27
 80048f4:	2220      	movs	r2, #32
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	19db      	adds	r3, r3, r7
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d015      	beq.n	800492c <UART_SetConfig+0x4d0>
 8004900:	dc18      	bgt.n	8004934 <UART_SetConfig+0x4d8>
 8004902:	2b04      	cmp	r3, #4
 8004904:	d00d      	beq.n	8004922 <UART_SetConfig+0x4c6>
 8004906:	dc15      	bgt.n	8004934 <UART_SetConfig+0x4d8>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <UART_SetConfig+0x4b6>
 800490c:	2b02      	cmp	r3, #2
 800490e:	d005      	beq.n	800491c <UART_SetConfig+0x4c0>
 8004910:	e010      	b.n	8004934 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004912:	f7fe f8f1 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8004916:	0003      	movs	r3, r0
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800491a:	e014      	b.n	8004946 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <UART_SetConfig+0x578>)
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004920:	e011      	b.n	8004946 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe f85d 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8004926:	0003      	movs	r3, r0
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800492a:	e00c      	b.n	8004946 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004932:	e008      	b.n	8004946 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004938:	231a      	movs	r3, #26
 800493a:	2220      	movs	r2, #32
 800493c:	189b      	adds	r3, r3, r2
 800493e:	19db      	adds	r3, r3, r7
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
        break;
 8004944:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02a      	beq.n	80049a2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004950:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <UART_SetConfig+0x574>)
 8004952:	0052      	lsls	r2, r2, #1
 8004954:	5ad3      	ldrh	r3, [r2, r3]
 8004956:	0019      	movs	r1, r3
 8004958:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800495a:	f7fb fbe5 	bl	8000128 <__udivsi3>
 800495e:	0003      	movs	r3, r0
 8004960:	001a      	movs	r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	18d2      	adds	r2, r2, r3
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	0019      	movs	r1, r3
 8004970:	0010      	movs	r0, r2
 8004972:	f7fb fbd9 	bl	8000128 <__udivsi3>
 8004976:	0003      	movs	r3, r0
 8004978:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d90a      	bls.n	8004996 <UART_SetConfig+0x53a>
 8004980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	429a      	cmp	r2, r3
 8004988:	d205      	bcs.n	8004996 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	b29a      	uxth	r2, r3
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	e005      	b.n	80049a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004996:	231a      	movs	r3, #26
 8004998:	2220      	movs	r2, #32
 800499a:	189b      	adds	r3, r3, r2
 800499c:	19db      	adds	r3, r3, r7
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	226a      	movs	r2, #106	; 0x6a
 80049a6:	2101      	movs	r1, #1
 80049a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	2268      	movs	r2, #104	; 0x68
 80049ae:	2101      	movs	r1, #1
 80049b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	2200      	movs	r2, #0
 80049b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	2200      	movs	r2, #0
 80049bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049be:	231a      	movs	r3, #26
 80049c0:	2220      	movs	r2, #32
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	19db      	adds	r3, r3, r7
 80049c6:	781b      	ldrb	r3, [r3, #0]
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b010      	add	sp, #64	; 0x40
 80049ce:	bdb0      	pop	{r4, r5, r7, pc}
 80049d0:	0800610c 	.word	0x0800610c
 80049d4:	00f42400 	.word	0x00f42400

080049d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	2201      	movs	r2, #1
 80049e6:	4013      	ands	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a4a      	ldr	r2, [pc, #296]	; (8004b1c <UART_AdvFeatureConfig+0x144>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	2202      	movs	r2, #2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4a43      	ldr	r2, [pc, #268]	; (8004b20 <UART_AdvFeatureConfig+0x148>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	0019      	movs	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	2204      	movs	r2, #4
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a3b      	ldr	r2, [pc, #236]	; (8004b24 <UART_AdvFeatureConfig+0x14c>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <UART_AdvFeatureConfig+0x150>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a2c      	ldr	r2, [pc, #176]	; (8004b2c <UART_AdvFeatureConfig+0x154>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	2220      	movs	r2, #32
 8004a90:	4013      	ands	r3, r2
 8004a92:	d00b      	beq.n	8004aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <UART_AdvFeatureConfig+0x158>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <UART_AdvFeatureConfig+0x15c>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	035b      	lsls	r3, r3, #13
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d10b      	bne.n	8004af2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <UART_AdvFeatureConfig+0x160>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	4013      	ands	r3, r2
 8004afa:	d00b      	beq.n	8004b14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <UART_AdvFeatureConfig+0x164>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }
}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b002      	add	sp, #8
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	fffdffff 	.word	0xfffdffff
 8004b20:	fffeffff 	.word	0xfffeffff
 8004b24:	fffbffff 	.word	0xfffbffff
 8004b28:	ffff7fff 	.word	0xffff7fff
 8004b2c:	ffffefff 	.word	0xffffefff
 8004b30:	ffffdfff 	.word	0xffffdfff
 8004b34:	ffefffff 	.word	0xffefffff
 8004b38:	ff9fffff 	.word	0xff9fffff
 8004b3c:	fff7ffff 	.word	0xfff7ffff

08004b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2290      	movs	r2, #144	; 0x90
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b50:	f7fc fcc6 	bl	80014e0 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2208      	movs	r2, #8
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d10c      	bne.n	8004b80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2280      	movs	r2, #128	; 0x80
 8004b6a:	0391      	lsls	r1, r2, #14
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <UART_CheckIdleState+0x98>)
 8004b70:	9200      	str	r2, [sp, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f000 f832 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004b78:	1e03      	subs	r3, r0, #0
 8004b7a:	d001      	beq.n	8004b80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e026      	b.n	8004bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2204      	movs	r2, #4
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d10c      	bne.n	8004ba8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2280      	movs	r2, #128	; 0x80
 8004b92:	03d1      	lsls	r1, r2, #15
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <UART_CheckIdleState+0x98>)
 8004b98:	9200      	str	r2, [sp, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f000 f81e 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004ba0:	1e03      	subs	r3, r0, #0
 8004ba2:	d001      	beq.n	8004ba8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e012      	b.n	8004bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2288      	movs	r2, #136	; 0x88
 8004bac:	2120      	movs	r1, #32
 8004bae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	228c      	movs	r2, #140	; 0x8c
 8004bb4:	2120      	movs	r1, #32
 8004bb6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2284      	movs	r2, #132	; 0x84
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	01ffffff 	.word	0x01ffffff

08004bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b094      	sub	sp, #80	; 0x50
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	1dfb      	adds	r3, r7, #7
 8004bea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bec:	e0a7      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	d100      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004bf4:	e0a3      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf6:	f7fc fc73 	bl	80014e0 <HAL_GetTick>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d13f      	bne.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c14:	647b      	str	r3, [r7, #68]	; 0x44
 8004c16:	2301      	movs	r3, #1
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	494e      	ldr	r1, [pc, #312]	; (8004d68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004c2e:	400a      	ands	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
 8004c48:	2301      	movs	r3, #1
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2101      	movs	r1, #1
 8004c60:	438a      	bics	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	f383 8810 	msr	PRIMASK, r3
}
 8004c6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2288      	movs	r2, #136	; 0x88
 8004c74:	2120      	movs	r1, #32
 8004c76:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	228c      	movs	r2, #140	; 0x8c
 8004c7c:	2120      	movs	r1, #32
 8004c7e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2284      	movs	r2, #132	; 0x84
 8004c84:	2100      	movs	r1, #0
 8004c86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e069      	b.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2204      	movs	r2, #4
 8004c94:	4013      	ands	r3, r2
 8004c96:	d052      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d148      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2280      	movs	r2, #128	; 0x80
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cba:	613b      	str	r3, [r7, #16]
  return(result);
 8004cbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f383 8810 	msr	PRIMASK, r3
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4924      	ldr	r1, [pc, #144]	; (8004d68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004cd8:	400a      	ands	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cec:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f383 8810 	msr	PRIMASK, r3
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2101      	movs	r1, #1
 8004d0a:	438a      	bics	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	f383 8810 	msr	PRIMASK, r3
}
 8004d18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2288      	movs	r2, #136	; 0x88
 8004d1e:	2120      	movs	r1, #32
 8004d20:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	228c      	movs	r2, #140	; 0x8c
 8004d26:	2120      	movs	r1, #32
 8004d28:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2290      	movs	r2, #144	; 0x90
 8004d2e:	2120      	movs	r1, #32
 8004d30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2284      	movs	r2, #132	; 0x84
 8004d36:	2100      	movs	r1, #0
 8004d38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e010      	b.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	425a      	negs	r2, r3
 8004d4e:	4153      	adcs	r3, r2
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	001a      	movs	r2, r3
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d100      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x182>
 8004d5c:	e747      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b014      	add	sp, #80	; 0x50
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	fffffe5f 	.word	0xfffffe5f

08004d6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b090      	sub	sp, #64	; 0x40
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	1dbb      	adds	r3, r7, #6
 8004d78:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1dba      	adds	r2, r7, #6
 8004d84:	215c      	movs	r1, #92	; 0x5c
 8004d86:	8812      	ldrh	r2, [r2, #0]
 8004d88:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2290      	movs	r2, #144	; 0x90
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	228c      	movs	r2, #140	; 0x8c
 8004d96:	2122      	movs	r1, #34	; 0x22
 8004d98:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	589b      	ldr	r3, [r3, r2]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02d      	beq.n	8004e00 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2280      	movs	r2, #128	; 0x80
 8004da8:	589b      	ldr	r3, [r3, r2]
 8004daa:	4a40      	ldr	r2, [pc, #256]	; (8004eac <UART_Start_Receive_DMA+0x140>)
 8004dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	589b      	ldr	r3, [r3, r2]
 8004db4:	4a3e      	ldr	r2, [pc, #248]	; (8004eb0 <UART_Start_Receive_DMA+0x144>)
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	589b      	ldr	r3, [r3, r2]
 8004dbe:	4a3d      	ldr	r2, [pc, #244]	; (8004eb4 <UART_Start_Receive_DMA+0x148>)
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2280      	movs	r2, #128	; 0x80
 8004dc6:	589b      	ldr	r3, [r3, r2]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	5898      	ldr	r0, [r3, r2]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	0019      	movs	r1, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	001a      	movs	r2, r3
 8004de0:	1dbb      	adds	r3, r7, #6
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	f7fc fd12 	bl	800180c <HAL_DMA_Start_IT>
 8004de8:	1e03      	subs	r3, r0, #0
 8004dea:	d009      	beq.n	8004e00 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2290      	movs	r2, #144	; 0x90
 8004df0:	2110      	movs	r1, #16
 8004df2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	228c      	movs	r2, #140	; 0x8c
 8004df8:	2120      	movs	r1, #32
 8004dfa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e050      	b.n	8004ea2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d019      	beq.n	8004e3c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e08:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e12:	2301      	movs	r3, #1
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	f383 8810 	msr	PRIMASK, r3
}
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0049      	lsls	r1, r1, #1
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	f383 8810 	msr	PRIMASK, r3
}
 8004e3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e40:	613b      	str	r3, [r7, #16]
  return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e46:	2301      	movs	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f383 8810 	msr	PRIMASK, r3
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e72:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e74:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
 8004e78:	2301      	movs	r3, #1
 8004e7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2140      	movs	r1, #64	; 0x40
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	f383 8810 	msr	PRIMASK, r3
}
 8004e9e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b010      	add	sp, #64	; 0x40
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	08005005 	.word	0x08005005
 8004eb0:	08005135 	.word	0x08005135
 8004eb4:	08005177 	.word	0x08005177

08004eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	2301      	movs	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	21c0      	movs	r1, #192	; 0xc0
 8004ee2:	438a      	bics	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef6:	617b      	str	r3, [r7, #20]
  return(result);
 8004ef8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004efa:	623b      	str	r3, [r7, #32]
 8004efc:	2301      	movs	r3, #1
 8004efe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4908      	ldr	r1, [pc, #32]	; (8004f34 <UART_EndTxTransfer+0x7c>)
 8004f14:	400a      	ands	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2288      	movs	r2, #136	; 0x88
 8004f28:	2120      	movs	r1, #32
 8004f2a:	5099      	str	r1, [r3, r2]
}
 8004f2c:	46c0      	nop			; (mov r8, r8)
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b00a      	add	sp, #40	; 0x28
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	ff7fffff 	.word	0xff7fffff

08004f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08e      	sub	sp, #56	; 0x38
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f40:	f3ef 8310 	mrs	r3, PRIMASK
 8004f44:	617b      	str	r3, [r7, #20]
  return(result);
 8004f46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4926      	ldr	r1, [pc, #152]	; (8004ffc <UART_EndRxTransfer+0xc4>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f383 8810 	msr	PRIMASK, r3
}
 8004f70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f72:	f3ef 8310 	mrs	r3, PRIMASK
 8004f76:	623b      	str	r3, [r7, #32]
  return(result);
 8004f78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <UART_EndRxTransfer+0xc8>)
 8004f94:	400a      	ands	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	f383 8810 	msr	PRIMASK, r3
}
 8004fa2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d118      	bne.n	8004fde <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2110      	movs	r1, #16
 8004fce:	438a      	bics	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	228c      	movs	r2, #140	; 0x8c
 8004fe2:	2120      	movs	r1, #32
 8004fe4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b00e      	add	sp, #56	; 0x38
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	fffffedf 	.word	0xfffffedf
 8005000:	effffffe 	.word	0xeffffffe

08005004 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b094      	sub	sp, #80	; 0x50
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2220      	movs	r2, #32
 800501a:	4013      	ands	r3, r2
 800501c:	d16f      	bne.n	80050fe <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800501e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005020:	225e      	movs	r2, #94	; 0x5e
 8005022:	2100      	movs	r1, #0
 8005024:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005026:	f3ef 8310 	mrs	r3, PRIMASK
 800502a:	61bb      	str	r3, [r7, #24]
  return(result);
 800502c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005030:	2301      	movs	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	493a      	ldr	r1, [pc, #232]	; (8005130 <UART_DMAReceiveCplt+0x12c>)
 8005048:	400a      	ands	r2, r1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f383 8810 	msr	PRIMASK, r3
}
 8005056:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005058:	f3ef 8310 	mrs	r3, PRIMASK
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005060:	647b      	str	r3, [r7, #68]	; 0x44
 8005062:	2301      	movs	r3, #1
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	f383 8810 	msr	PRIMASK, r3
}
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	438a      	bics	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	f383 8810 	msr	PRIMASK, r3
}
 8005088:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800508a:	f3ef 8310 	mrs	r3, PRIMASK
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
 8005094:	2301      	movs	r3, #1
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	f383 8810 	msr	PRIMASK, r3
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2140      	movs	r1, #64	; 0x40
 80050ac:	438a      	bics	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050be:	228c      	movs	r2, #140	; 0x8c
 80050c0:	2120      	movs	r1, #32
 80050c2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d118      	bne.n	80050fe <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050cc:	f3ef 8310 	mrs	r3, PRIMASK
 80050d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050d2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d6:	2301      	movs	r3, #1
 80050d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2110      	movs	r1, #16
 80050ee:	438a      	bics	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f383 8810 	msr	PRIMASK, r3
}
 80050fc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	2200      	movs	r2, #0
 8005102:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d108      	bne.n	800511e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800510c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510e:	225c      	movs	r2, #92	; 0x5c
 8005110:	5a9a      	ldrh	r2, [r3, r2]
 8005112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005114:	0011      	movs	r1, r2
 8005116:	0018      	movs	r0, r3
 8005118:	f7fb fe32 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800511c:	e003      	b.n	8005126 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800511e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005120:	0018      	movs	r0, r3
 8005122:	f7ff f983 	bl	800442c <HAL_UART_RxCpltCallback>
}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b014      	add	sp, #80	; 0x50
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	fffffeff 	.word	0xfffffeff

08005134 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10a      	bne.n	8005166 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	225c      	movs	r2, #92	; 0x5c
 8005154:	5a9b      	ldrh	r3, [r3, r2]
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	0011      	movs	r1, r2
 800515e:	0018      	movs	r0, r3
 8005160:	f7fb fe0e 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005164:	e003      	b.n	800516e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	0018      	movs	r0, r3
 800516a:	f7ff f967 	bl	800443c <HAL_UART_RxHalfCpltCallback>
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b004      	add	sp, #16
 8005174:	bd80      	pop	{r7, pc}

08005176 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2288      	movs	r2, #136	; 0x88
 8005188:	589b      	ldr	r3, [r3, r2]
 800518a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	228c      	movs	r2, #140	; 0x8c
 8005190:	589b      	ldr	r3, [r3, r2]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2280      	movs	r2, #128	; 0x80
 800519c:	4013      	ands	r3, r2
 800519e:	2b80      	cmp	r3, #128	; 0x80
 80051a0:	d10a      	bne.n	80051b8 <UART_DMAError+0x42>
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b21      	cmp	r3, #33	; 0x21
 80051a6:	d107      	bne.n	80051b8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2256      	movs	r2, #86	; 0x56
 80051ac:	2100      	movs	r1, #0
 80051ae:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff fe80 	bl	8004eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d10a      	bne.n	80051dc <UART_DMAError+0x66>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b22      	cmp	r3, #34	; 0x22
 80051ca:	d107      	bne.n	80051dc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	225e      	movs	r2, #94	; 0x5e
 80051d0:	2100      	movs	r1, #0
 80051d2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7ff feae 	bl	8004f38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2290      	movs	r2, #144	; 0x90
 80051e0:	589b      	ldr	r3, [r3, r2]
 80051e2:	2210      	movs	r2, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2190      	movs	r1, #144	; 0x90
 80051ea:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f7ff f92c 	bl	800444c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b006      	add	sp, #24
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	225e      	movs	r2, #94	; 0x5e
 800520e:	2100      	movs	r1, #0
 8005210:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2256      	movs	r2, #86	; 0x56
 8005216:	2100      	movs	r1, #0
 8005218:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	0018      	movs	r0, r3
 800521e:	f7ff f915 	bl	800444c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005232:	f3ef 8310 	mrs	r3, PRIMASK
 8005236:	60bb      	str	r3, [r7, #8]
  return(result);
 8005238:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	2301      	movs	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f383 8810 	msr	PRIMASK, r3
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2140      	movs	r1, #64	; 0x40
 8005254:	438a      	bics	r2, r1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f383 8810 	msr	PRIMASK, r3
}
 8005262:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2288      	movs	r2, #136	; 0x88
 8005268:	2120      	movs	r1, #32
 800526a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	0018      	movs	r0, r3
 8005276:	f7ff f8d1 	bl	800441c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	b006      	add	sp, #24
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b002      	add	sp, #8
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b002      	add	sp, #8
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b002      	add	sp, #8
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2284      	movs	r2, #132	; 0x84
 80052c0:	5c9b      	ldrb	r3, [r3, r2]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_UARTEx_DisableFifoMode+0x16>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e027      	b.n	800531a <HAL_UARTEx_DisableFifoMode+0x66>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2284      	movs	r2, #132	; 0x84
 80052ce:	2101      	movs	r1, #1
 80052d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2288      	movs	r2, #136	; 0x88
 80052d6:	2124      	movs	r1, #36	; 0x24
 80052d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	438a      	bics	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a0b      	ldr	r2, [pc, #44]	; (8005324 <HAL_UARTEx_DisableFifoMode+0x70>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2288      	movs	r2, #136	; 0x88
 800530c:	2120      	movs	r1, #32
 800530e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2284      	movs	r2, #132	; 0x84
 8005314:	2100      	movs	r1, #0
 8005316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	dfffffff 	.word	0xdfffffff

08005328 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2284      	movs	r2, #132	; 0x84
 8005336:	5c9b      	ldrb	r3, [r3, r2]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800533c:	2302      	movs	r3, #2
 800533e:	e02e      	b.n	800539e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2284      	movs	r2, #132	; 0x84
 8005344:	2101      	movs	r1, #1
 8005346:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2288      	movs	r2, #136	; 0x88
 800534c:	2124      	movs	r1, #36	; 0x24
 800534e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2101      	movs	r1, #1
 8005364:	438a      	bics	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	08d9      	lsrs	r1, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	0018      	movs	r0, r3
 8005380:	f000 f8bc 	bl	80054fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2288      	movs	r2, #136	; 0x88
 8005390:	2120      	movs	r1, #32
 8005392:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2284      	movs	r2, #132	; 0x84
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	0018      	movs	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b004      	add	sp, #16
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2284      	movs	r2, #132	; 0x84
 80053b6:	5c9b      	ldrb	r3, [r3, r2]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e02f      	b.n	8005420 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2284      	movs	r2, #132	; 0x84
 80053c4:	2101      	movs	r1, #1
 80053c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2288      	movs	r2, #136	; 0x88
 80053cc:	2124      	movs	r1, #36	; 0x24
 80053ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2101      	movs	r1, #1
 80053e4:	438a      	bics	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4a0e      	ldr	r2, [pc, #56]	; (8005428 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	0018      	movs	r0, r3
 8005402:	f000 f87b 	bl	80054fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2288      	movs	r2, #136	; 0x88
 8005412:	2120      	movs	r1, #32
 8005414:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2284      	movs	r2, #132	; 0x84
 800541a:	2100      	movs	r1, #0
 800541c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}
 8005428:	f1ffffff 	.word	0xf1ffffff

0800542c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	1dbb      	adds	r3, r7, #6
 8005438:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	228c      	movs	r2, #140	; 0x8c
 800543e:	589b      	ldr	r3, [r3, r2]
 8005440:	2b20      	cmp	r3, #32
 8005442:	d156      	bne.n	80054f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800544a:	1dbb      	adds	r3, r7, #6
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e04e      	b.n	80054f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	015b      	lsls	r3, r3, #5
 800545e:	429a      	cmp	r2, r3
 8005460:	d109      	bne.n	8005476 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d105      	bne.n	8005476 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2201      	movs	r2, #1
 800546e:	4013      	ands	r3, r2
 8005470:	d001      	beq.n	8005476 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e03e      	b.n	80054f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005482:	2527      	movs	r5, #39	; 0x27
 8005484:	197c      	adds	r4, r7, r5
 8005486:	1dbb      	adds	r3, r7, #6
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	0018      	movs	r0, r3
 8005490:	f7ff fc6c 	bl	8004d6c <UART_Start_Receive_DMA>
 8005494:	0003      	movs	r3, r0
 8005496:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005498:	197b      	adds	r3, r7, r5
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d124      	bne.n	80054ea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d11c      	bne.n	80054e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2210      	movs	r2, #16
 80054ae:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b0:	f3ef 8310 	mrs	r3, PRIMASK
 80054b4:	617b      	str	r3, [r7, #20]
  return(result);
 80054b6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	623b      	str	r3, [r7, #32]
 80054ba:	2301      	movs	r3, #1
 80054bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2110      	movs	r1, #16
 80054d2:	430a      	orrs	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f383 8810 	msr	PRIMASK, r3
}
 80054e0:	e003      	b.n	80054ea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80054e2:	2327      	movs	r3, #39	; 0x27
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80054ea:	2327      	movs	r3, #39	; 0x27
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	e000      	b.n	80054f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	0018      	movs	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b00a      	add	sp, #40	; 0x28
 80054fa:	bdb0      	pop	{r4, r5, r7, pc}

080054fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	226a      	movs	r2, #106	; 0x6a
 8005510:	2101      	movs	r1, #1
 8005512:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2268      	movs	r2, #104	; 0x68
 8005518:	2101      	movs	r1, #1
 800551a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800551c:	e043      	b.n	80055a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800551e:	260f      	movs	r6, #15
 8005520:	19bb      	adds	r3, r7, r6
 8005522:	2208      	movs	r2, #8
 8005524:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005526:	200e      	movs	r0, #14
 8005528:	183b      	adds	r3, r7, r0
 800552a:	2208      	movs	r2, #8
 800552c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	0e5b      	lsrs	r3, r3, #25
 8005536:	b2da      	uxtb	r2, r3
 8005538:	240d      	movs	r4, #13
 800553a:	193b      	adds	r3, r7, r4
 800553c:	2107      	movs	r1, #7
 800553e:	400a      	ands	r2, r1
 8005540:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	0f5b      	lsrs	r3, r3, #29
 800554a:	b2da      	uxtb	r2, r3
 800554c:	250c      	movs	r5, #12
 800554e:	197b      	adds	r3, r7, r5
 8005550:	2107      	movs	r1, #7
 8005552:	400a      	ands	r2, r1
 8005554:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005556:	183b      	adds	r3, r7, r0
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	197a      	adds	r2, r7, r5
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	4914      	ldr	r1, [pc, #80]	; (80055b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005560:	5c8a      	ldrb	r2, [r1, r2]
 8005562:	435a      	muls	r2, r3
 8005564:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005566:	197b      	adds	r3, r7, r5
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800556c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800556e:	0019      	movs	r1, r3
 8005570:	f7fa fe64 	bl	800023c <__divsi3>
 8005574:	0003      	movs	r3, r0
 8005576:	b299      	uxth	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	226a      	movs	r2, #106	; 0x6a
 800557c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800557e:	19bb      	adds	r3, r7, r6
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	193a      	adds	r2, r7, r4
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	490a      	ldr	r1, [pc, #40]	; (80055b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005588:	5c8a      	ldrb	r2, [r1, r2]
 800558a:	435a      	muls	r2, r3
 800558c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800558e:	193b      	adds	r3, r7, r4
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005594:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005596:	0019      	movs	r1, r3
 8005598:	f7fa fe50 	bl	800023c <__divsi3>
 800559c:	0003      	movs	r3, r0
 800559e:	b299      	uxth	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2268      	movs	r2, #104	; 0x68
 80055a4:	5299      	strh	r1, [r3, r2]
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b005      	add	sp, #20
 80055ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	08006124 	.word	0x08006124
 80055b4:	0800612c 	.word	0x0800612c

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	20000060 	.word	0x20000060

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	2600      	movs	r6, #0
 80055c8:	4d0c      	ldr	r5, [pc, #48]	; (80055fc <__libc_init_array+0x38>)
 80055ca:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055cc:	1b64      	subs	r4, r4, r5
 80055ce:	10a4      	asrs	r4, r4, #2
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	2600      	movs	r6, #0
 80055d6:	f000 fc9d 	bl	8005f14 <_init>
 80055da:	4d0a      	ldr	r5, [pc, #40]	; (8005604 <__libc_init_array+0x40>)
 80055dc:	4c0a      	ldr	r4, [pc, #40]	; (8005608 <__libc_init_array+0x44>)
 80055de:	1b64      	subs	r4, r4, r5
 80055e0:	10a4      	asrs	r4, r4, #2
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	00b3      	lsls	r3, r6, #2
 80055ea:	58eb      	ldr	r3, [r5, r3]
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	00b3      	lsls	r3, r6, #2
 80055f4:	58eb      	ldr	r3, [r5, r3]
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	08006170 	.word	0x08006170
 8005600:	08006170 	.word	0x08006170
 8005604:	08006170 	.word	0x08006170
 8005608:	08006174 	.word	0x08006174

0800560c <memset>:
 800560c:	0003      	movs	r3, r0
 800560e:	1882      	adds	r2, r0, r2
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	7019      	strb	r1, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <siprintf>:
 800561c:	b40e      	push	{r1, r2, r3}
 800561e:	b500      	push	{lr}
 8005620:	490b      	ldr	r1, [pc, #44]	; (8005650 <siprintf+0x34>)
 8005622:	b09c      	sub	sp, #112	; 0x70
 8005624:	ab1d      	add	r3, sp, #116	; 0x74
 8005626:	9002      	str	r0, [sp, #8]
 8005628:	9006      	str	r0, [sp, #24]
 800562a:	9107      	str	r1, [sp, #28]
 800562c:	9104      	str	r1, [sp, #16]
 800562e:	4809      	ldr	r0, [pc, #36]	; (8005654 <siprintf+0x38>)
 8005630:	4909      	ldr	r1, [pc, #36]	; (8005658 <siprintf+0x3c>)
 8005632:	cb04      	ldmia	r3!, {r2}
 8005634:	9105      	str	r1, [sp, #20]
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	a902      	add	r1, sp, #8
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	f000 f882 	bl	8005744 <_svfiprintf_r>
 8005640:	2300      	movs	r3, #0
 8005642:	9a02      	ldr	r2, [sp, #8]
 8005644:	7013      	strb	r3, [r2, #0]
 8005646:	b01c      	add	sp, #112	; 0x70
 8005648:	bc08      	pop	{r3}
 800564a:	b003      	add	sp, #12
 800564c:	4718      	bx	r3
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	7fffffff 	.word	0x7fffffff
 8005654:	20000060 	.word	0x20000060
 8005658:	ffff0208 	.word	0xffff0208

0800565c <strncmp>:
 800565c:	b530      	push	{r4, r5, lr}
 800565e:	0005      	movs	r5, r0
 8005660:	1e10      	subs	r0, r2, #0
 8005662:	d008      	beq.n	8005676 <strncmp+0x1a>
 8005664:	2400      	movs	r4, #0
 8005666:	3a01      	subs	r2, #1
 8005668:	5d2b      	ldrb	r3, [r5, r4]
 800566a:	5d08      	ldrb	r0, [r1, r4]
 800566c:	4283      	cmp	r3, r0
 800566e:	d101      	bne.n	8005674 <strncmp+0x18>
 8005670:	4294      	cmp	r4, r2
 8005672:	d101      	bne.n	8005678 <strncmp+0x1c>
 8005674:	1a18      	subs	r0, r3, r0
 8005676:	bd30      	pop	{r4, r5, pc}
 8005678:	3401      	adds	r4, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f4      	bne.n	8005668 <strncmp+0xc>
 800567e:	e7f9      	b.n	8005674 <strncmp+0x18>

08005680 <__ssputs_r>:
 8005680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005682:	688e      	ldr	r6, [r1, #8]
 8005684:	b085      	sub	sp, #20
 8005686:	0007      	movs	r7, r0
 8005688:	000c      	movs	r4, r1
 800568a:	9203      	str	r2, [sp, #12]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	429e      	cmp	r6, r3
 8005690:	d83c      	bhi.n	800570c <__ssputs_r+0x8c>
 8005692:	2390      	movs	r3, #144	; 0x90
 8005694:	898a      	ldrh	r2, [r1, #12]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	421a      	tst	r2, r3
 800569a:	d034      	beq.n	8005706 <__ssputs_r+0x86>
 800569c:	6909      	ldr	r1, [r1, #16]
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	6960      	ldr	r0, [r4, #20]
 80056a2:	1a5b      	subs	r3, r3, r1
 80056a4:	9302      	str	r3, [sp, #8]
 80056a6:	2303      	movs	r3, #3
 80056a8:	4343      	muls	r3, r0
 80056aa:	0fdd      	lsrs	r5, r3, #31
 80056ac:	18ed      	adds	r5, r5, r3
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	9802      	ldr	r0, [sp, #8]
 80056b2:	3301      	adds	r3, #1
 80056b4:	181b      	adds	r3, r3, r0
 80056b6:	106d      	asrs	r5, r5, #1
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	d900      	bls.n	80056be <__ssputs_r+0x3e>
 80056bc:	001d      	movs	r5, r3
 80056be:	0553      	lsls	r3, r2, #21
 80056c0:	d532      	bpl.n	8005728 <__ssputs_r+0xa8>
 80056c2:	0029      	movs	r1, r5
 80056c4:	0038      	movs	r0, r7
 80056c6:	f000 fb53 	bl	8005d70 <_malloc_r>
 80056ca:	1e06      	subs	r6, r0, #0
 80056cc:	d109      	bne.n	80056e2 <__ssputs_r+0x62>
 80056ce:	230c      	movs	r3, #12
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	2340      	movs	r3, #64	; 0x40
 80056d4:	2001      	movs	r0, #1
 80056d6:	89a2      	ldrh	r2, [r4, #12]
 80056d8:	4240      	negs	r0, r0
 80056da:	4313      	orrs	r3, r2
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	b005      	add	sp, #20
 80056e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056e2:	9a02      	ldr	r2, [sp, #8]
 80056e4:	6921      	ldr	r1, [r4, #16]
 80056e6:	f000 faba 	bl	8005c5e <memcpy>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	4a14      	ldr	r2, [pc, #80]	; (8005740 <__ssputs_r+0xc0>)
 80056ee:	401a      	ands	r2, r3
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	4313      	orrs	r3, r2
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	9b02      	ldr	r3, [sp, #8]
 80056f8:	6126      	str	r6, [r4, #16]
 80056fa:	18f6      	adds	r6, r6, r3
 80056fc:	6026      	str	r6, [r4, #0]
 80056fe:	6165      	str	r5, [r4, #20]
 8005700:	9e01      	ldr	r6, [sp, #4]
 8005702:	1aed      	subs	r5, r5, r3
 8005704:	60a5      	str	r5, [r4, #8]
 8005706:	9b01      	ldr	r3, [sp, #4]
 8005708:	429e      	cmp	r6, r3
 800570a:	d900      	bls.n	800570e <__ssputs_r+0x8e>
 800570c:	9e01      	ldr	r6, [sp, #4]
 800570e:	0032      	movs	r2, r6
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	6820      	ldr	r0, [r4, #0]
 8005714:	f000 faac 	bl	8005c70 <memmove>
 8005718:	68a3      	ldr	r3, [r4, #8]
 800571a:	2000      	movs	r0, #0
 800571c:	1b9b      	subs	r3, r3, r6
 800571e:	60a3      	str	r3, [r4, #8]
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	199e      	adds	r6, r3, r6
 8005724:	6026      	str	r6, [r4, #0]
 8005726:	e7da      	b.n	80056de <__ssputs_r+0x5e>
 8005728:	002a      	movs	r2, r5
 800572a:	0038      	movs	r0, r7
 800572c:	f000 fb96 	bl	8005e5c <_realloc_r>
 8005730:	1e06      	subs	r6, r0, #0
 8005732:	d1e0      	bne.n	80056f6 <__ssputs_r+0x76>
 8005734:	0038      	movs	r0, r7
 8005736:	6921      	ldr	r1, [r4, #16]
 8005738:	f000 faae 	bl	8005c98 <_free_r>
 800573c:	e7c7      	b.n	80056ce <__ssputs_r+0x4e>
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	fffffb7f 	.word	0xfffffb7f

08005744 <_svfiprintf_r>:
 8005744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005746:	b0a1      	sub	sp, #132	; 0x84
 8005748:	9003      	str	r0, [sp, #12]
 800574a:	001d      	movs	r5, r3
 800574c:	898b      	ldrh	r3, [r1, #12]
 800574e:	000f      	movs	r7, r1
 8005750:	0016      	movs	r6, r2
 8005752:	061b      	lsls	r3, r3, #24
 8005754:	d511      	bpl.n	800577a <_svfiprintf_r+0x36>
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10e      	bne.n	800577a <_svfiprintf_r+0x36>
 800575c:	2140      	movs	r1, #64	; 0x40
 800575e:	f000 fb07 	bl	8005d70 <_malloc_r>
 8005762:	6038      	str	r0, [r7, #0]
 8005764:	6138      	str	r0, [r7, #16]
 8005766:	2800      	cmp	r0, #0
 8005768:	d105      	bne.n	8005776 <_svfiprintf_r+0x32>
 800576a:	230c      	movs	r3, #12
 800576c:	9a03      	ldr	r2, [sp, #12]
 800576e:	3801      	subs	r0, #1
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	b021      	add	sp, #132	; 0x84
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	2300      	movs	r3, #0
 800577c:	ac08      	add	r4, sp, #32
 800577e:	6163      	str	r3, [r4, #20]
 8005780:	3320      	adds	r3, #32
 8005782:	7663      	strb	r3, [r4, #25]
 8005784:	3310      	adds	r3, #16
 8005786:	76a3      	strb	r3, [r4, #26]
 8005788:	9507      	str	r5, [sp, #28]
 800578a:	0035      	movs	r5, r6
 800578c:	782b      	ldrb	r3, [r5, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <_svfiprintf_r+0x52>
 8005792:	2b25      	cmp	r3, #37	; 0x25
 8005794:	d147      	bne.n	8005826 <_svfiprintf_r+0xe2>
 8005796:	1bab      	subs	r3, r5, r6
 8005798:	9305      	str	r3, [sp, #20]
 800579a:	42b5      	cmp	r5, r6
 800579c:	d00c      	beq.n	80057b8 <_svfiprintf_r+0x74>
 800579e:	0032      	movs	r2, r6
 80057a0:	0039      	movs	r1, r7
 80057a2:	9803      	ldr	r0, [sp, #12]
 80057a4:	f7ff ff6c 	bl	8005680 <__ssputs_r>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d100      	bne.n	80057ae <_svfiprintf_r+0x6a>
 80057ac:	e0ae      	b.n	800590c <_svfiprintf_r+0x1c8>
 80057ae:	6962      	ldr	r2, [r4, #20]
 80057b0:	9b05      	ldr	r3, [sp, #20]
 80057b2:	4694      	mov	ip, r2
 80057b4:	4463      	add	r3, ip
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	782b      	ldrb	r3, [r5, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d100      	bne.n	80057c0 <_svfiprintf_r+0x7c>
 80057be:	e0a5      	b.n	800590c <_svfiprintf_r+0x1c8>
 80057c0:	2201      	movs	r2, #1
 80057c2:	2300      	movs	r3, #0
 80057c4:	4252      	negs	r2, r2
 80057c6:	6062      	str	r2, [r4, #4]
 80057c8:	a904      	add	r1, sp, #16
 80057ca:	3254      	adds	r2, #84	; 0x54
 80057cc:	1852      	adds	r2, r2, r1
 80057ce:	1c6e      	adds	r6, r5, #1
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	60e3      	str	r3, [r4, #12]
 80057d4:	60a3      	str	r3, [r4, #8]
 80057d6:	7013      	strb	r3, [r2, #0]
 80057d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80057da:	2205      	movs	r2, #5
 80057dc:	7831      	ldrb	r1, [r6, #0]
 80057de:	4854      	ldr	r0, [pc, #336]	; (8005930 <_svfiprintf_r+0x1ec>)
 80057e0:	f000 fa32 	bl	8005c48 <memchr>
 80057e4:	1c75      	adds	r5, r6, #1
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d11f      	bne.n	800582a <_svfiprintf_r+0xe6>
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	06d3      	lsls	r3, r2, #27
 80057ee:	d504      	bpl.n	80057fa <_svfiprintf_r+0xb6>
 80057f0:	2353      	movs	r3, #83	; 0x53
 80057f2:	a904      	add	r1, sp, #16
 80057f4:	185b      	adds	r3, r3, r1
 80057f6:	2120      	movs	r1, #32
 80057f8:	7019      	strb	r1, [r3, #0]
 80057fa:	0713      	lsls	r3, r2, #28
 80057fc:	d504      	bpl.n	8005808 <_svfiprintf_r+0xc4>
 80057fe:	2353      	movs	r3, #83	; 0x53
 8005800:	a904      	add	r1, sp, #16
 8005802:	185b      	adds	r3, r3, r1
 8005804:	212b      	movs	r1, #43	; 0x2b
 8005806:	7019      	strb	r1, [r3, #0]
 8005808:	7833      	ldrb	r3, [r6, #0]
 800580a:	2b2a      	cmp	r3, #42	; 0x2a
 800580c:	d016      	beq.n	800583c <_svfiprintf_r+0xf8>
 800580e:	0035      	movs	r5, r6
 8005810:	2100      	movs	r1, #0
 8005812:	200a      	movs	r0, #10
 8005814:	68e3      	ldr	r3, [r4, #12]
 8005816:	782a      	ldrb	r2, [r5, #0]
 8005818:	1c6e      	adds	r6, r5, #1
 800581a:	3a30      	subs	r2, #48	; 0x30
 800581c:	2a09      	cmp	r2, #9
 800581e:	d94e      	bls.n	80058be <_svfiprintf_r+0x17a>
 8005820:	2900      	cmp	r1, #0
 8005822:	d111      	bne.n	8005848 <_svfiprintf_r+0x104>
 8005824:	e017      	b.n	8005856 <_svfiprintf_r+0x112>
 8005826:	3501      	adds	r5, #1
 8005828:	e7b0      	b.n	800578c <_svfiprintf_r+0x48>
 800582a:	4b41      	ldr	r3, [pc, #260]	; (8005930 <_svfiprintf_r+0x1ec>)
 800582c:	6822      	ldr	r2, [r4, #0]
 800582e:	1ac0      	subs	r0, r0, r3
 8005830:	2301      	movs	r3, #1
 8005832:	4083      	lsls	r3, r0
 8005834:	4313      	orrs	r3, r2
 8005836:	002e      	movs	r6, r5
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	e7ce      	b.n	80057da <_svfiprintf_r+0x96>
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	1d19      	adds	r1, r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	9107      	str	r1, [sp, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	db01      	blt.n	800584c <_svfiprintf_r+0x108>
 8005848:	930b      	str	r3, [sp, #44]	; 0x2c
 800584a:	e004      	b.n	8005856 <_svfiprintf_r+0x112>
 800584c:	425b      	negs	r3, r3
 800584e:	60e3      	str	r3, [r4, #12]
 8005850:	2302      	movs	r3, #2
 8005852:	4313      	orrs	r3, r2
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	782b      	ldrb	r3, [r5, #0]
 8005858:	2b2e      	cmp	r3, #46	; 0x2e
 800585a:	d10a      	bne.n	8005872 <_svfiprintf_r+0x12e>
 800585c:	786b      	ldrb	r3, [r5, #1]
 800585e:	2b2a      	cmp	r3, #42	; 0x2a
 8005860:	d135      	bne.n	80058ce <_svfiprintf_r+0x18a>
 8005862:	9b07      	ldr	r3, [sp, #28]
 8005864:	3502      	adds	r5, #2
 8005866:	1d1a      	adds	r2, r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	9207      	str	r2, [sp, #28]
 800586c:	2b00      	cmp	r3, #0
 800586e:	db2b      	blt.n	80058c8 <_svfiprintf_r+0x184>
 8005870:	9309      	str	r3, [sp, #36]	; 0x24
 8005872:	4e30      	ldr	r6, [pc, #192]	; (8005934 <_svfiprintf_r+0x1f0>)
 8005874:	2203      	movs	r2, #3
 8005876:	0030      	movs	r0, r6
 8005878:	7829      	ldrb	r1, [r5, #0]
 800587a:	f000 f9e5 	bl	8005c48 <memchr>
 800587e:	2800      	cmp	r0, #0
 8005880:	d006      	beq.n	8005890 <_svfiprintf_r+0x14c>
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	1b80      	subs	r0, r0, r6
 8005886:	4083      	lsls	r3, r0
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	3501      	adds	r5, #1
 800588c:	4313      	orrs	r3, r2
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	7829      	ldrb	r1, [r5, #0]
 8005892:	2206      	movs	r2, #6
 8005894:	4828      	ldr	r0, [pc, #160]	; (8005938 <_svfiprintf_r+0x1f4>)
 8005896:	1c6e      	adds	r6, r5, #1
 8005898:	7621      	strb	r1, [r4, #24]
 800589a:	f000 f9d5 	bl	8005c48 <memchr>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d03c      	beq.n	800591c <_svfiprintf_r+0x1d8>
 80058a2:	4b26      	ldr	r3, [pc, #152]	; (800593c <_svfiprintf_r+0x1f8>)
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d125      	bne.n	80058f4 <_svfiprintf_r+0x1b0>
 80058a8:	2207      	movs	r2, #7
 80058aa:	9b07      	ldr	r3, [sp, #28]
 80058ac:	3307      	adds	r3, #7
 80058ae:	4393      	bics	r3, r2
 80058b0:	3308      	adds	r3, #8
 80058b2:	9307      	str	r3, [sp, #28]
 80058b4:	6963      	ldr	r3, [r4, #20]
 80058b6:	9a04      	ldr	r2, [sp, #16]
 80058b8:	189b      	adds	r3, r3, r2
 80058ba:	6163      	str	r3, [r4, #20]
 80058bc:	e765      	b.n	800578a <_svfiprintf_r+0x46>
 80058be:	4343      	muls	r3, r0
 80058c0:	0035      	movs	r5, r6
 80058c2:	2101      	movs	r1, #1
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	e7a6      	b.n	8005816 <_svfiprintf_r+0xd2>
 80058c8:	2301      	movs	r3, #1
 80058ca:	425b      	negs	r3, r3
 80058cc:	e7d0      	b.n	8005870 <_svfiprintf_r+0x12c>
 80058ce:	2300      	movs	r3, #0
 80058d0:	200a      	movs	r0, #10
 80058d2:	001a      	movs	r2, r3
 80058d4:	3501      	adds	r5, #1
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	7829      	ldrb	r1, [r5, #0]
 80058da:	1c6e      	adds	r6, r5, #1
 80058dc:	3930      	subs	r1, #48	; 0x30
 80058de:	2909      	cmp	r1, #9
 80058e0:	d903      	bls.n	80058ea <_svfiprintf_r+0x1a6>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0c5      	beq.n	8005872 <_svfiprintf_r+0x12e>
 80058e6:	9209      	str	r2, [sp, #36]	; 0x24
 80058e8:	e7c3      	b.n	8005872 <_svfiprintf_r+0x12e>
 80058ea:	4342      	muls	r2, r0
 80058ec:	0035      	movs	r5, r6
 80058ee:	2301      	movs	r3, #1
 80058f0:	1852      	adds	r2, r2, r1
 80058f2:	e7f1      	b.n	80058d8 <_svfiprintf_r+0x194>
 80058f4:	ab07      	add	r3, sp, #28
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	003a      	movs	r2, r7
 80058fa:	0021      	movs	r1, r4
 80058fc:	4b10      	ldr	r3, [pc, #64]	; (8005940 <_svfiprintf_r+0x1fc>)
 80058fe:	9803      	ldr	r0, [sp, #12]
 8005900:	e000      	b.n	8005904 <_svfiprintf_r+0x1c0>
 8005902:	bf00      	nop
 8005904:	9004      	str	r0, [sp, #16]
 8005906:	9b04      	ldr	r3, [sp, #16]
 8005908:	3301      	adds	r3, #1
 800590a:	d1d3      	bne.n	80058b4 <_svfiprintf_r+0x170>
 800590c:	89bb      	ldrh	r3, [r7, #12]
 800590e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005910:	065b      	lsls	r3, r3, #25
 8005912:	d400      	bmi.n	8005916 <_svfiprintf_r+0x1d2>
 8005914:	e72d      	b.n	8005772 <_svfiprintf_r+0x2e>
 8005916:	2001      	movs	r0, #1
 8005918:	4240      	negs	r0, r0
 800591a:	e72a      	b.n	8005772 <_svfiprintf_r+0x2e>
 800591c:	ab07      	add	r3, sp, #28
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	003a      	movs	r2, r7
 8005922:	0021      	movs	r1, r4
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <_svfiprintf_r+0x1fc>)
 8005926:	9803      	ldr	r0, [sp, #12]
 8005928:	f000 f87c 	bl	8005a24 <_printf_i>
 800592c:	e7ea      	b.n	8005904 <_svfiprintf_r+0x1c0>
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	08006134 	.word	0x08006134
 8005934:	0800613a 	.word	0x0800613a
 8005938:	0800613e 	.word	0x0800613e
 800593c:	00000000 	.word	0x00000000
 8005940:	08005681 	.word	0x08005681

08005944 <_printf_common>:
 8005944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005946:	0015      	movs	r5, r2
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	688a      	ldr	r2, [r1, #8]
 800594c:	690b      	ldr	r3, [r1, #16]
 800594e:	000c      	movs	r4, r1
 8005950:	9000      	str	r0, [sp, #0]
 8005952:	4293      	cmp	r3, r2
 8005954:	da00      	bge.n	8005958 <_printf_common+0x14>
 8005956:	0013      	movs	r3, r2
 8005958:	0022      	movs	r2, r4
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	3243      	adds	r2, #67	; 0x43
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	2a00      	cmp	r2, #0
 8005962:	d001      	beq.n	8005968 <_printf_common+0x24>
 8005964:	3301      	adds	r3, #1
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	069b      	lsls	r3, r3, #26
 800596c:	d502      	bpl.n	8005974 <_printf_common+0x30>
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	3302      	adds	r3, #2
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	2306      	movs	r3, #6
 8005978:	0017      	movs	r7, r2
 800597a:	401f      	ands	r7, r3
 800597c:	421a      	tst	r2, r3
 800597e:	d027      	beq.n	80059d0 <_printf_common+0x8c>
 8005980:	0023      	movs	r3, r4
 8005982:	3343      	adds	r3, #67	; 0x43
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	1e5a      	subs	r2, r3, #1
 8005988:	4193      	sbcs	r3, r2
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	0692      	lsls	r2, r2, #26
 800598e:	d430      	bmi.n	80059f2 <_printf_common+0xae>
 8005990:	0022      	movs	r2, r4
 8005992:	9901      	ldr	r1, [sp, #4]
 8005994:	9800      	ldr	r0, [sp, #0]
 8005996:	9e08      	ldr	r6, [sp, #32]
 8005998:	3243      	adds	r2, #67	; 0x43
 800599a:	47b0      	blx	r6
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d025      	beq.n	80059ec <_printf_common+0xa8>
 80059a0:	2306      	movs	r3, #6
 80059a2:	6820      	ldr	r0, [r4, #0]
 80059a4:	682a      	ldr	r2, [r5, #0]
 80059a6:	68e1      	ldr	r1, [r4, #12]
 80059a8:	2500      	movs	r5, #0
 80059aa:	4003      	ands	r3, r0
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d103      	bne.n	80059b8 <_printf_common+0x74>
 80059b0:	1a8d      	subs	r5, r1, r2
 80059b2:	43eb      	mvns	r3, r5
 80059b4:	17db      	asrs	r3, r3, #31
 80059b6:	401d      	ands	r5, r3
 80059b8:	68a3      	ldr	r3, [r4, #8]
 80059ba:	6922      	ldr	r2, [r4, #16]
 80059bc:	4293      	cmp	r3, r2
 80059be:	dd01      	ble.n	80059c4 <_printf_common+0x80>
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	18ed      	adds	r5, r5, r3
 80059c4:	2700      	movs	r7, #0
 80059c6:	42bd      	cmp	r5, r7
 80059c8:	d120      	bne.n	8005a0c <_printf_common+0xc8>
 80059ca:	2000      	movs	r0, #0
 80059cc:	e010      	b.n	80059f0 <_printf_common+0xac>
 80059ce:	3701      	adds	r7, #1
 80059d0:	68e3      	ldr	r3, [r4, #12]
 80059d2:	682a      	ldr	r2, [r5, #0]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	42bb      	cmp	r3, r7
 80059d8:	ddd2      	ble.n	8005980 <_printf_common+0x3c>
 80059da:	0022      	movs	r2, r4
 80059dc:	2301      	movs	r3, #1
 80059de:	9901      	ldr	r1, [sp, #4]
 80059e0:	9800      	ldr	r0, [sp, #0]
 80059e2:	9e08      	ldr	r6, [sp, #32]
 80059e4:	3219      	adds	r2, #25
 80059e6:	47b0      	blx	r6
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d1f0      	bne.n	80059ce <_printf_common+0x8a>
 80059ec:	2001      	movs	r0, #1
 80059ee:	4240      	negs	r0, r0
 80059f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059f2:	2030      	movs	r0, #48	; 0x30
 80059f4:	18e1      	adds	r1, r4, r3
 80059f6:	3143      	adds	r1, #67	; 0x43
 80059f8:	7008      	strb	r0, [r1, #0]
 80059fa:	0021      	movs	r1, r4
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	3145      	adds	r1, #69	; 0x45
 8005a00:	7809      	ldrb	r1, [r1, #0]
 8005a02:	18a2      	adds	r2, r4, r2
 8005a04:	3243      	adds	r2, #67	; 0x43
 8005a06:	3302      	adds	r3, #2
 8005a08:	7011      	strb	r1, [r2, #0]
 8005a0a:	e7c1      	b.n	8005990 <_printf_common+0x4c>
 8005a0c:	0022      	movs	r2, r4
 8005a0e:	2301      	movs	r3, #1
 8005a10:	9901      	ldr	r1, [sp, #4]
 8005a12:	9800      	ldr	r0, [sp, #0]
 8005a14:	9e08      	ldr	r6, [sp, #32]
 8005a16:	321a      	adds	r2, #26
 8005a18:	47b0      	blx	r6
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	d0e6      	beq.n	80059ec <_printf_common+0xa8>
 8005a1e:	3701      	adds	r7, #1
 8005a20:	e7d1      	b.n	80059c6 <_printf_common+0x82>
	...

08005a24 <_printf_i>:
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	b08b      	sub	sp, #44	; 0x2c
 8005a28:	9206      	str	r2, [sp, #24]
 8005a2a:	000a      	movs	r2, r1
 8005a2c:	3243      	adds	r2, #67	; 0x43
 8005a2e:	9307      	str	r3, [sp, #28]
 8005a30:	9005      	str	r0, [sp, #20]
 8005a32:	9204      	str	r2, [sp, #16]
 8005a34:	7e0a      	ldrb	r2, [r1, #24]
 8005a36:	000c      	movs	r4, r1
 8005a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a3a:	2a78      	cmp	r2, #120	; 0x78
 8005a3c:	d807      	bhi.n	8005a4e <_printf_i+0x2a>
 8005a3e:	2a62      	cmp	r2, #98	; 0x62
 8005a40:	d809      	bhi.n	8005a56 <_printf_i+0x32>
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	d100      	bne.n	8005a48 <_printf_i+0x24>
 8005a46:	e0c1      	b.n	8005bcc <_printf_i+0x1a8>
 8005a48:	2a58      	cmp	r2, #88	; 0x58
 8005a4a:	d100      	bne.n	8005a4e <_printf_i+0x2a>
 8005a4c:	e08c      	b.n	8005b68 <_printf_i+0x144>
 8005a4e:	0026      	movs	r6, r4
 8005a50:	3642      	adds	r6, #66	; 0x42
 8005a52:	7032      	strb	r2, [r6, #0]
 8005a54:	e022      	b.n	8005a9c <_printf_i+0x78>
 8005a56:	0010      	movs	r0, r2
 8005a58:	3863      	subs	r0, #99	; 0x63
 8005a5a:	2815      	cmp	r0, #21
 8005a5c:	d8f7      	bhi.n	8005a4e <_printf_i+0x2a>
 8005a5e:	f7fa fb59 	bl	8000114 <__gnu_thumb1_case_shi>
 8005a62:	0016      	.short	0x0016
 8005a64:	fff6001f 	.word	0xfff6001f
 8005a68:	fff6fff6 	.word	0xfff6fff6
 8005a6c:	001ffff6 	.word	0x001ffff6
 8005a70:	fff6fff6 	.word	0xfff6fff6
 8005a74:	fff6fff6 	.word	0xfff6fff6
 8005a78:	003600a8 	.word	0x003600a8
 8005a7c:	fff6009a 	.word	0xfff6009a
 8005a80:	00b9fff6 	.word	0x00b9fff6
 8005a84:	0036fff6 	.word	0x0036fff6
 8005a88:	fff6fff6 	.word	0xfff6fff6
 8005a8c:	009e      	.short	0x009e
 8005a8e:	0026      	movs	r6, r4
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	3642      	adds	r6, #66	; 0x42
 8005a94:	1d11      	adds	r1, r2, #4
 8005a96:	6019      	str	r1, [r3, #0]
 8005a98:	6813      	ldr	r3, [r2, #0]
 8005a9a:	7033      	strb	r3, [r6, #0]
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0a7      	b.n	8005bf0 <_printf_i+0x1cc>
 8005aa0:	6808      	ldr	r0, [r1, #0]
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	1d0a      	adds	r2, r1, #4
 8005aa6:	0605      	lsls	r5, r0, #24
 8005aa8:	d50b      	bpl.n	8005ac2 <_printf_i+0x9e>
 8005aaa:	680d      	ldr	r5, [r1, #0]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	da03      	bge.n	8005aba <_printf_i+0x96>
 8005ab2:	232d      	movs	r3, #45	; 0x2d
 8005ab4:	9a04      	ldr	r2, [sp, #16]
 8005ab6:	426d      	negs	r5, r5
 8005ab8:	7013      	strb	r3, [r2, #0]
 8005aba:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <_printf_i+0x21c>)
 8005abc:	270a      	movs	r7, #10
 8005abe:	9303      	str	r3, [sp, #12]
 8005ac0:	e01b      	b.n	8005afa <_printf_i+0xd6>
 8005ac2:	680d      	ldr	r5, [r1, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	0641      	lsls	r1, r0, #25
 8005ac8:	d5f1      	bpl.n	8005aae <_printf_i+0x8a>
 8005aca:	b22d      	sxth	r5, r5
 8005acc:	e7ef      	b.n	8005aae <_printf_i+0x8a>
 8005ace:	680d      	ldr	r5, [r1, #0]
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	1d08      	adds	r0, r1, #4
 8005ad4:	6018      	str	r0, [r3, #0]
 8005ad6:	062e      	lsls	r6, r5, #24
 8005ad8:	d501      	bpl.n	8005ade <_printf_i+0xba>
 8005ada:	680d      	ldr	r5, [r1, #0]
 8005adc:	e003      	b.n	8005ae6 <_printf_i+0xc2>
 8005ade:	066d      	lsls	r5, r5, #25
 8005ae0:	d5fb      	bpl.n	8005ada <_printf_i+0xb6>
 8005ae2:	680d      	ldr	r5, [r1, #0]
 8005ae4:	b2ad      	uxth	r5, r5
 8005ae6:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <_printf_i+0x21c>)
 8005ae8:	2708      	movs	r7, #8
 8005aea:	9303      	str	r3, [sp, #12]
 8005aec:	2a6f      	cmp	r2, #111	; 0x6f
 8005aee:	d000      	beq.n	8005af2 <_printf_i+0xce>
 8005af0:	3702      	adds	r7, #2
 8005af2:	0023      	movs	r3, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	3343      	adds	r3, #67	; 0x43
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db03      	blt.n	8005b0a <_printf_i+0xe6>
 8005b02:	2204      	movs	r2, #4
 8005b04:	6821      	ldr	r1, [r4, #0]
 8005b06:	4391      	bics	r1, r2
 8005b08:	6021      	str	r1, [r4, #0]
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	d102      	bne.n	8005b14 <_printf_i+0xf0>
 8005b0e:	9e04      	ldr	r6, [sp, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00c      	beq.n	8005b2e <_printf_i+0x10a>
 8005b14:	9e04      	ldr	r6, [sp, #16]
 8005b16:	0028      	movs	r0, r5
 8005b18:	0039      	movs	r1, r7
 8005b1a:	f7fa fb8b 	bl	8000234 <__aeabi_uidivmod>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	3e01      	subs	r6, #1
 8005b22:	5c5b      	ldrb	r3, [r3, r1]
 8005b24:	7033      	strb	r3, [r6, #0]
 8005b26:	002b      	movs	r3, r5
 8005b28:	0005      	movs	r5, r0
 8005b2a:	429f      	cmp	r7, r3
 8005b2c:	d9f3      	bls.n	8005b16 <_printf_i+0xf2>
 8005b2e:	2f08      	cmp	r7, #8
 8005b30:	d109      	bne.n	8005b46 <_printf_i+0x122>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	07db      	lsls	r3, r3, #31
 8005b36:	d506      	bpl.n	8005b46 <_printf_i+0x122>
 8005b38:	6863      	ldr	r3, [r4, #4]
 8005b3a:	6922      	ldr	r2, [r4, #16]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	dc02      	bgt.n	8005b46 <_printf_i+0x122>
 8005b40:	2330      	movs	r3, #48	; 0x30
 8005b42:	3e01      	subs	r6, #1
 8005b44:	7033      	strb	r3, [r6, #0]
 8005b46:	9b04      	ldr	r3, [sp, #16]
 8005b48:	1b9b      	subs	r3, r3, r6
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	9b07      	ldr	r3, [sp, #28]
 8005b4e:	0021      	movs	r1, r4
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	9805      	ldr	r0, [sp, #20]
 8005b54:	9b06      	ldr	r3, [sp, #24]
 8005b56:	aa09      	add	r2, sp, #36	; 0x24
 8005b58:	f7ff fef4 	bl	8005944 <_printf_common>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d14c      	bne.n	8005bfa <_printf_i+0x1d6>
 8005b60:	2001      	movs	r0, #1
 8005b62:	4240      	negs	r0, r0
 8005b64:	b00b      	add	sp, #44	; 0x2c
 8005b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b68:	3145      	adds	r1, #69	; 0x45
 8005b6a:	700a      	strb	r2, [r1, #0]
 8005b6c:	4a34      	ldr	r2, [pc, #208]	; (8005c40 <_printf_i+0x21c>)
 8005b6e:	9203      	str	r2, [sp, #12]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	6821      	ldr	r1, [r4, #0]
 8005b74:	ca20      	ldmia	r2!, {r5}
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	0608      	lsls	r0, r1, #24
 8005b7a:	d516      	bpl.n	8005baa <_printf_i+0x186>
 8005b7c:	07cb      	lsls	r3, r1, #31
 8005b7e:	d502      	bpl.n	8005b86 <_printf_i+0x162>
 8005b80:	2320      	movs	r3, #32
 8005b82:	4319      	orrs	r1, r3
 8005b84:	6021      	str	r1, [r4, #0]
 8005b86:	2710      	movs	r7, #16
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	d1b2      	bne.n	8005af2 <_printf_i+0xce>
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	439a      	bics	r2, r3
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	e7ad      	b.n	8005af2 <_printf_i+0xce>
 8005b96:	2220      	movs	r2, #32
 8005b98:	6809      	ldr	r1, [r1, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	6022      	str	r2, [r4, #0]
 8005b9e:	0022      	movs	r2, r4
 8005ba0:	2178      	movs	r1, #120	; 0x78
 8005ba2:	3245      	adds	r2, #69	; 0x45
 8005ba4:	7011      	strb	r1, [r2, #0]
 8005ba6:	4a27      	ldr	r2, [pc, #156]	; (8005c44 <_printf_i+0x220>)
 8005ba8:	e7e1      	b.n	8005b6e <_printf_i+0x14a>
 8005baa:	0648      	lsls	r0, r1, #25
 8005bac:	d5e6      	bpl.n	8005b7c <_printf_i+0x158>
 8005bae:	b2ad      	uxth	r5, r5
 8005bb0:	e7e4      	b.n	8005b7c <_printf_i+0x158>
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	680d      	ldr	r5, [r1, #0]
 8005bb6:	1d10      	adds	r0, r2, #4
 8005bb8:	6949      	ldr	r1, [r1, #20]
 8005bba:	6018      	str	r0, [r3, #0]
 8005bbc:	6813      	ldr	r3, [r2, #0]
 8005bbe:	062e      	lsls	r6, r5, #24
 8005bc0:	d501      	bpl.n	8005bc6 <_printf_i+0x1a2>
 8005bc2:	6019      	str	r1, [r3, #0]
 8005bc4:	e002      	b.n	8005bcc <_printf_i+0x1a8>
 8005bc6:	066d      	lsls	r5, r5, #25
 8005bc8:	d5fb      	bpl.n	8005bc2 <_printf_i+0x19e>
 8005bca:	8019      	strh	r1, [r3, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9e04      	ldr	r6, [sp, #16]
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	e7bb      	b.n	8005b4c <_printf_i+0x128>
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	1d11      	adds	r1, r2, #4
 8005bd8:	6019      	str	r1, [r3, #0]
 8005bda:	6816      	ldr	r6, [r2, #0]
 8005bdc:	2100      	movs	r1, #0
 8005bde:	0030      	movs	r0, r6
 8005be0:	6862      	ldr	r2, [r4, #4]
 8005be2:	f000 f831 	bl	8005c48 <memchr>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d001      	beq.n	8005bee <_printf_i+0x1ca>
 8005bea:	1b80      	subs	r0, r0, r6
 8005bec:	6060      	str	r0, [r4, #4]
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9a04      	ldr	r2, [sp, #16]
 8005bf6:	7013      	strb	r3, [r2, #0]
 8005bf8:	e7a8      	b.n	8005b4c <_printf_i+0x128>
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	0032      	movs	r2, r6
 8005bfe:	9906      	ldr	r1, [sp, #24]
 8005c00:	9805      	ldr	r0, [sp, #20]
 8005c02:	9d07      	ldr	r5, [sp, #28]
 8005c04:	47a8      	blx	r5
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d0aa      	beq.n	8005b60 <_printf_i+0x13c>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	079b      	lsls	r3, r3, #30
 8005c0e:	d415      	bmi.n	8005c3c <_printf_i+0x218>
 8005c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c12:	68e0      	ldr	r0, [r4, #12]
 8005c14:	4298      	cmp	r0, r3
 8005c16:	daa5      	bge.n	8005b64 <_printf_i+0x140>
 8005c18:	0018      	movs	r0, r3
 8005c1a:	e7a3      	b.n	8005b64 <_printf_i+0x140>
 8005c1c:	0022      	movs	r2, r4
 8005c1e:	2301      	movs	r3, #1
 8005c20:	9906      	ldr	r1, [sp, #24]
 8005c22:	9805      	ldr	r0, [sp, #20]
 8005c24:	9e07      	ldr	r6, [sp, #28]
 8005c26:	3219      	adds	r2, #25
 8005c28:	47b0      	blx	r6
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	d098      	beq.n	8005b60 <_printf_i+0x13c>
 8005c2e:	3501      	adds	r5, #1
 8005c30:	68e3      	ldr	r3, [r4, #12]
 8005c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	42ab      	cmp	r3, r5
 8005c38:	dcf0      	bgt.n	8005c1c <_printf_i+0x1f8>
 8005c3a:	e7e9      	b.n	8005c10 <_printf_i+0x1ec>
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	e7f7      	b.n	8005c30 <_printf_i+0x20c>
 8005c40:	08006145 	.word	0x08006145
 8005c44:	08006156 	.word	0x08006156

08005c48 <memchr>:
 8005c48:	b2c9      	uxtb	r1, r1
 8005c4a:	1882      	adds	r2, r0, r2
 8005c4c:	4290      	cmp	r0, r2
 8005c4e:	d101      	bne.n	8005c54 <memchr+0xc>
 8005c50:	2000      	movs	r0, #0
 8005c52:	4770      	bx	lr
 8005c54:	7803      	ldrb	r3, [r0, #0]
 8005c56:	428b      	cmp	r3, r1
 8005c58:	d0fb      	beq.n	8005c52 <memchr+0xa>
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	e7f6      	b.n	8005c4c <memchr+0x4>

08005c5e <memcpy>:
 8005c5e:	2300      	movs	r3, #0
 8005c60:	b510      	push	{r4, lr}
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d100      	bne.n	8005c68 <memcpy+0xa>
 8005c66:	bd10      	pop	{r4, pc}
 8005c68:	5ccc      	ldrb	r4, [r1, r3]
 8005c6a:	54c4      	strb	r4, [r0, r3]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	e7f8      	b.n	8005c62 <memcpy+0x4>

08005c70 <memmove>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	4288      	cmp	r0, r1
 8005c74:	d902      	bls.n	8005c7c <memmove+0xc>
 8005c76:	188b      	adds	r3, r1, r2
 8005c78:	4298      	cmp	r0, r3
 8005c7a:	d303      	bcc.n	8005c84 <memmove+0x14>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e007      	b.n	8005c90 <memmove+0x20>
 8005c80:	5c8b      	ldrb	r3, [r1, r2]
 8005c82:	5483      	strb	r3, [r0, r2]
 8005c84:	3a01      	subs	r2, #1
 8005c86:	d2fb      	bcs.n	8005c80 <memmove+0x10>
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	5ccc      	ldrb	r4, [r1, r3]
 8005c8c:	54c4      	strb	r4, [r0, r3]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1fa      	bne.n	8005c8a <memmove+0x1a>
 8005c94:	e7f8      	b.n	8005c88 <memmove+0x18>
	...

08005c98 <_free_r>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	0005      	movs	r5, r0
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d010      	beq.n	8005cc2 <_free_r+0x2a>
 8005ca0:	1f0c      	subs	r4, r1, #4
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da00      	bge.n	8005caa <_free_r+0x12>
 8005ca8:	18e4      	adds	r4, r4, r3
 8005caa:	0028      	movs	r0, r5
 8005cac:	f000 f918 	bl	8005ee0 <__malloc_lock>
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <_free_r+0x90>)
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <_free_r+0x2c>
 8005cb8:	6063      	str	r3, [r4, #4]
 8005cba:	6014      	str	r4, [r2, #0]
 8005cbc:	0028      	movs	r0, r5
 8005cbe:	f000 f917 	bl	8005ef0 <__malloc_unlock>
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d908      	bls.n	8005cda <_free_r+0x42>
 8005cc8:	6821      	ldr	r1, [r4, #0]
 8005cca:	1860      	adds	r0, r4, r1
 8005ccc:	4283      	cmp	r3, r0
 8005cce:	d1f3      	bne.n	8005cb8 <_free_r+0x20>
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	1841      	adds	r1, r0, r1
 8005cd6:	6021      	str	r1, [r4, #0]
 8005cd8:	e7ee      	b.n	8005cb8 <_free_r+0x20>
 8005cda:	001a      	movs	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <_free_r+0x4e>
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	d9f9      	bls.n	8005cda <_free_r+0x42>
 8005ce6:	6811      	ldr	r1, [r2, #0]
 8005ce8:	1850      	adds	r0, r2, r1
 8005cea:	42a0      	cmp	r0, r4
 8005cec:	d10b      	bne.n	8005d06 <_free_r+0x6e>
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	1809      	adds	r1, r1, r0
 8005cf2:	1850      	adds	r0, r2, r1
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	4283      	cmp	r3, r0
 8005cf8:	d1e0      	bne.n	8005cbc <_free_r+0x24>
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	1841      	adds	r1, r0, r1
 8005d00:	6011      	str	r1, [r2, #0]
 8005d02:	6053      	str	r3, [r2, #4]
 8005d04:	e7da      	b.n	8005cbc <_free_r+0x24>
 8005d06:	42a0      	cmp	r0, r4
 8005d08:	d902      	bls.n	8005d10 <_free_r+0x78>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	602b      	str	r3, [r5, #0]
 8005d0e:	e7d5      	b.n	8005cbc <_free_r+0x24>
 8005d10:	6821      	ldr	r1, [r4, #0]
 8005d12:	1860      	adds	r0, r4, r1
 8005d14:	4283      	cmp	r3, r0
 8005d16:	d103      	bne.n	8005d20 <_free_r+0x88>
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	1841      	adds	r1, r0, r1
 8005d1e:	6021      	str	r1, [r4, #0]
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	6054      	str	r4, [r2, #4]
 8005d24:	e7ca      	b.n	8005cbc <_free_r+0x24>
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	200004dc 	.word	0x200004dc

08005d2c <sbrk_aligned>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4e0f      	ldr	r6, [pc, #60]	; (8005d6c <sbrk_aligned+0x40>)
 8005d30:	000d      	movs	r5, r1
 8005d32:	6831      	ldr	r1, [r6, #0]
 8005d34:	0004      	movs	r4, r0
 8005d36:	2900      	cmp	r1, #0
 8005d38:	d102      	bne.n	8005d40 <sbrk_aligned+0x14>
 8005d3a:	f000 f8bf 	bl	8005ebc <_sbrk_r>
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	0029      	movs	r1, r5
 8005d42:	0020      	movs	r0, r4
 8005d44:	f000 f8ba 	bl	8005ebc <_sbrk_r>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d00a      	beq.n	8005d62 <sbrk_aligned+0x36>
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	1cc5      	adds	r5, r0, #3
 8005d50:	439d      	bics	r5, r3
 8005d52:	42a8      	cmp	r0, r5
 8005d54:	d007      	beq.n	8005d66 <sbrk_aligned+0x3a>
 8005d56:	1a29      	subs	r1, r5, r0
 8005d58:	0020      	movs	r0, r4
 8005d5a:	f000 f8af 	bl	8005ebc <_sbrk_r>
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	d101      	bne.n	8005d66 <sbrk_aligned+0x3a>
 8005d62:	2501      	movs	r5, #1
 8005d64:	426d      	negs	r5, r5
 8005d66:	0028      	movs	r0, r5
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	200004e0 	.word	0x200004e0

08005d70 <_malloc_r>:
 8005d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d72:	2203      	movs	r2, #3
 8005d74:	1ccb      	adds	r3, r1, #3
 8005d76:	4393      	bics	r3, r2
 8005d78:	3308      	adds	r3, #8
 8005d7a:	0006      	movs	r6, r0
 8005d7c:	001f      	movs	r7, r3
 8005d7e:	2b0c      	cmp	r3, #12
 8005d80:	d232      	bcs.n	8005de8 <_malloc_r+0x78>
 8005d82:	270c      	movs	r7, #12
 8005d84:	42b9      	cmp	r1, r7
 8005d86:	d831      	bhi.n	8005dec <_malloc_r+0x7c>
 8005d88:	0030      	movs	r0, r6
 8005d8a:	f000 f8a9 	bl	8005ee0 <__malloc_lock>
 8005d8e:	4d32      	ldr	r5, [pc, #200]	; (8005e58 <_malloc_r+0xe8>)
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	001c      	movs	r4, r3
 8005d94:	2c00      	cmp	r4, #0
 8005d96:	d12e      	bne.n	8005df6 <_malloc_r+0x86>
 8005d98:	0039      	movs	r1, r7
 8005d9a:	0030      	movs	r0, r6
 8005d9c:	f7ff ffc6 	bl	8005d2c <sbrk_aligned>
 8005da0:	0004      	movs	r4, r0
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d11e      	bne.n	8005de4 <_malloc_r+0x74>
 8005da6:	682c      	ldr	r4, [r5, #0]
 8005da8:	0025      	movs	r5, r4
 8005daa:	2d00      	cmp	r5, #0
 8005dac:	d14a      	bne.n	8005e44 <_malloc_r+0xd4>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	0029      	movs	r1, r5
 8005db2:	18e3      	adds	r3, r4, r3
 8005db4:	0030      	movs	r0, r6
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	f000 f880 	bl	8005ebc <_sbrk_r>
 8005dbc:	9b01      	ldr	r3, [sp, #4]
 8005dbe:	4283      	cmp	r3, r0
 8005dc0:	d143      	bne.n	8005e4a <_malloc_r+0xda>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	3703      	adds	r7, #3
 8005dc6:	1aff      	subs	r7, r7, r3
 8005dc8:	2303      	movs	r3, #3
 8005dca:	439f      	bics	r7, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	2f0c      	cmp	r7, #12
 8005dd0:	d200      	bcs.n	8005dd4 <_malloc_r+0x64>
 8005dd2:	270c      	movs	r7, #12
 8005dd4:	0039      	movs	r1, r7
 8005dd6:	0030      	movs	r0, r6
 8005dd8:	f7ff ffa8 	bl	8005d2c <sbrk_aligned>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d034      	beq.n	8005e4a <_malloc_r+0xda>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	19df      	adds	r7, r3, r7
 8005de4:	6027      	str	r7, [r4, #0]
 8005de6:	e013      	b.n	8005e10 <_malloc_r+0xa0>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dacb      	bge.n	8005d84 <_malloc_r+0x14>
 8005dec:	230c      	movs	r3, #12
 8005dee:	2500      	movs	r5, #0
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	0028      	movs	r0, r5
 8005df4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	1bd1      	subs	r1, r2, r7
 8005dfa:	d420      	bmi.n	8005e3e <_malloc_r+0xce>
 8005dfc:	290b      	cmp	r1, #11
 8005dfe:	d917      	bls.n	8005e30 <_malloc_r+0xc0>
 8005e00:	19e2      	adds	r2, r4, r7
 8005e02:	6027      	str	r7, [r4, #0]
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	d111      	bne.n	8005e2c <_malloc_r+0xbc>
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	6053      	str	r3, [r2, #4]
 8005e10:	0030      	movs	r0, r6
 8005e12:	0025      	movs	r5, r4
 8005e14:	f000 f86c 	bl	8005ef0 <__malloc_unlock>
 8005e18:	2207      	movs	r2, #7
 8005e1a:	350b      	adds	r5, #11
 8005e1c:	1d23      	adds	r3, r4, #4
 8005e1e:	4395      	bics	r5, r2
 8005e20:	1aea      	subs	r2, r5, r3
 8005e22:	429d      	cmp	r5, r3
 8005e24:	d0e5      	beq.n	8005df2 <_malloc_r+0x82>
 8005e26:	1b5b      	subs	r3, r3, r5
 8005e28:	50a3      	str	r3, [r4, r2]
 8005e2a:	e7e2      	b.n	8005df2 <_malloc_r+0x82>
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	e7ec      	b.n	8005e0a <_malloc_r+0x9a>
 8005e30:	6862      	ldr	r2, [r4, #4]
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	d101      	bne.n	8005e3a <_malloc_r+0xca>
 8005e36:	602a      	str	r2, [r5, #0]
 8005e38:	e7ea      	b.n	8005e10 <_malloc_r+0xa0>
 8005e3a:	605a      	str	r2, [r3, #4]
 8005e3c:	e7e8      	b.n	8005e10 <_malloc_r+0xa0>
 8005e3e:	0023      	movs	r3, r4
 8005e40:	6864      	ldr	r4, [r4, #4]
 8005e42:	e7a7      	b.n	8005d94 <_malloc_r+0x24>
 8005e44:	002c      	movs	r4, r5
 8005e46:	686d      	ldr	r5, [r5, #4]
 8005e48:	e7af      	b.n	8005daa <_malloc_r+0x3a>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	0030      	movs	r0, r6
 8005e4e:	6033      	str	r3, [r6, #0]
 8005e50:	f000 f84e 	bl	8005ef0 <__malloc_unlock>
 8005e54:	e7cd      	b.n	8005df2 <_malloc_r+0x82>
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	200004dc 	.word	0x200004dc

08005e5c <_realloc_r>:
 8005e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5e:	0007      	movs	r7, r0
 8005e60:	000e      	movs	r6, r1
 8005e62:	0014      	movs	r4, r2
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d105      	bne.n	8005e74 <_realloc_r+0x18>
 8005e68:	0011      	movs	r1, r2
 8005e6a:	f7ff ff81 	bl	8005d70 <_malloc_r>
 8005e6e:	0005      	movs	r5, r0
 8005e70:	0028      	movs	r0, r5
 8005e72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d103      	bne.n	8005e80 <_realloc_r+0x24>
 8005e78:	f7ff ff0e 	bl	8005c98 <_free_r>
 8005e7c:	0025      	movs	r5, r4
 8005e7e:	e7f7      	b.n	8005e70 <_realloc_r+0x14>
 8005e80:	f000 f83e 	bl	8005f00 <_malloc_usable_size_r>
 8005e84:	9001      	str	r0, [sp, #4]
 8005e86:	4284      	cmp	r4, r0
 8005e88:	d803      	bhi.n	8005e92 <_realloc_r+0x36>
 8005e8a:	0035      	movs	r5, r6
 8005e8c:	0843      	lsrs	r3, r0, #1
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	d3ee      	bcc.n	8005e70 <_realloc_r+0x14>
 8005e92:	0021      	movs	r1, r4
 8005e94:	0038      	movs	r0, r7
 8005e96:	f7ff ff6b 	bl	8005d70 <_malloc_r>
 8005e9a:	1e05      	subs	r5, r0, #0
 8005e9c:	d0e8      	beq.n	8005e70 <_realloc_r+0x14>
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	0022      	movs	r2, r4
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d900      	bls.n	8005ea8 <_realloc_r+0x4c>
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	0031      	movs	r1, r6
 8005eaa:	0028      	movs	r0, r5
 8005eac:	f7ff fed7 	bl	8005c5e <memcpy>
 8005eb0:	0031      	movs	r1, r6
 8005eb2:	0038      	movs	r0, r7
 8005eb4:	f7ff fef0 	bl	8005c98 <_free_r>
 8005eb8:	e7da      	b.n	8005e70 <_realloc_r+0x14>
	...

08005ebc <_sbrk_r>:
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	b570      	push	{r4, r5, r6, lr}
 8005ec0:	4d06      	ldr	r5, [pc, #24]	; (8005edc <_sbrk_r+0x20>)
 8005ec2:	0004      	movs	r4, r0
 8005ec4:	0008      	movs	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fb fa28 	bl	800131c <_sbrk>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d103      	bne.n	8005ed8 <_sbrk_r+0x1c>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d000      	beq.n	8005ed8 <_sbrk_r+0x1c>
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	200004e4 	.word	0x200004e4

08005ee0 <__malloc_lock>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	4802      	ldr	r0, [pc, #8]	; (8005eec <__malloc_lock+0xc>)
 8005ee4:	f000 f814 	bl	8005f10 <__retarget_lock_acquire_recursive>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	200004e8 	.word	0x200004e8

08005ef0 <__malloc_unlock>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	4802      	ldr	r0, [pc, #8]	; (8005efc <__malloc_unlock+0xc>)
 8005ef4:	f000 f80d 	bl	8005f12 <__retarget_lock_release_recursive>
 8005ef8:	bd10      	pop	{r4, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	200004e8 	.word	0x200004e8

08005f00 <_malloc_usable_size_r>:
 8005f00:	1f0b      	subs	r3, r1, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	1f18      	subs	r0, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da01      	bge.n	8005f0e <_malloc_usable_size_r+0xe>
 8005f0a:	580b      	ldr	r3, [r1, r0]
 8005f0c:	18c0      	adds	r0, r0, r3
 8005f0e:	4770      	bx	lr

08005f10 <__retarget_lock_acquire_recursive>:
 8005f10:	4770      	bx	lr

08005f12 <__retarget_lock_release_recursive>:
 8005f12:	4770      	bx	lr

08005f14 <_init>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr

08005f20 <_fini>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr
